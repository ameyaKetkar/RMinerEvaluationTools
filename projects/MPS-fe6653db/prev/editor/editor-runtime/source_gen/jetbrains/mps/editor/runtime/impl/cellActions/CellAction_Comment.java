package jetbrains.mps.editor.runtime.impl.cellActions;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.CellFinderUtil;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class CellAction_Comment extends AbstractCellAction {
  private final SNode myNode;

  /**
   * 
   * @param node node to comment. This node must have parent when executing action
   */
  public CellAction_Comment(@NotNull SNode node) {
    this.myNode = node;
  }

  /**
   * 
   * @param editorContext editor context
   * @throws IllegalStateException if commenting node does not have parent
   */
  public void execute(EditorContext editorContext) {
    SNode parent = SNodeOperations.getParent(myNode);
    if (parent == null) {
      throw new IllegalStateException("Node to comment has no parent. Node: " + BehaviorReflection.invokeVirtual(String.class, myNode, "virtual_getPresentation_1213877396640", new Object[]{}) + " Node id: " + myNode.getNodeId());

    }
    SNode newComment = CommentUtil.commentOut(myNode);
    editorContext.flushEvents();
    final SContainmentLink containmentLink = myNode.getContainmentLink();
    assert containmentLink != null;
    if (containmentLink.isMultiple()) {
      SelectionUtil.selectCell(editorContext, newComment, SelectionManager.LAST_CELL);
    } else {
      EditorCell parentCell = editorContext.getEditorComponent().findNodeCell(parent);
      EditorCell cellToSelect = CellFinderUtil.findChildByCondition(parentCell, new Condition<EditorCell>() {
        public boolean met(EditorCell cell) {
          return eq_9lx3n0_a0a0a0a0b0a1a0g0e(cell.getRole(), containmentLink.getRole()) && !(SNodeOperations.isInstanceOf(((SNode) cell.getSNode()), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3dcc194340c24debL, "jetbrains.mps.lang.core.structure.BaseCommentAttribute")));
        }
      }, true);
      editorContext.getSelectionManager().setSelection(cellToSelect);
    }
  }
  private static boolean eq_9lx3n0_a0a0a0a0b0a1a0g0e(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
