package jetbrains.mps.editor.runtime.impl.cellActions;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;

public class Cell_Action_Uncomment extends AbstractCellAction {
  private final SNode myNode;

  /**
   * 
   * @param node node to comment. This node must have parent when executing action
   */
  public Cell_Action_Uncomment(@NotNull SNode node) {
    this.myNode = node;
  }

  /**
   * 
   * 
   * @param editorContext editor context
   * @throws IllegalStateException if commenting node does not have parent
   */
  public void execute(EditorContext editorContext) {
    SNode parent = SNodeOperations.getParent(myNode);
    if (parent == null) {
      throw new IllegalStateException("Node to comment has no parent. Node: " + BehaviorReflection.invokeVirtual(String.class, myNode, "virtual_getPresentation_1213877396640", new Object[]{}) + " Node id: " + myNode.getNodeId());

    }
    SNode commentedNode = CommentUtil.uncomment(myNode);
    editorContext.flushEvents();
    if (commentedNode != null) {
      SelectionUtil.selectNode(editorContext, commentedNode);
    }

  }

}
