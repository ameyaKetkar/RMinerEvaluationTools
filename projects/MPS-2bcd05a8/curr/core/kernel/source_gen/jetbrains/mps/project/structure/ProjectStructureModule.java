package jetbrains.mps.project.structure;

/*Generated by MPS */

import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.components.CoreComponent;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SModelId;
import java.util.concurrent.ConcurrentHashMap;
import jetbrains.mps.smodel.MPSModuleOwner;
import jetbrains.mps.smodel.BaseMPSModuleOwner;
import org.jetbrains.mps.openapi.module.SModuleListener;
import org.jetbrains.mps.openapi.module.SModuleAdapter;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.module.SRepositoryListener;
import org.jetbrains.mps.openapi.module.SRepositoryListenerBase;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.project.Solution;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.DevKit;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.List;
import java.util.Set;
import org.jetbrains.mps.openapi.language.SLanguage;
import java.util.Collections;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.extapi.model.SModelBase;
import org.jetbrains.mps.openapi.module.SModuleId;
import jetbrains.mps.smodel.SModelStereotype;
import java.util.ArrayList;
import jetbrains.mps.smodel.BaseSpecialModelDescriptor;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.smodel.NodeReadAccessCasterInEditor;
import jetbrains.mps.project.structure.stub.ProjectStructureBuilder;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.nodeidmap.ForeignNodeIdMap;
import jetbrains.mps.smodel.FastNodeFinder;
import jetbrains.mps.smodel.BaseFastNodeFinder;

public class ProjectStructureModule extends AbstractModule implements CoreComponent {
  private static final String MODULE_REF = "642f71f8-327a-425b-84f9-44ad58786d27(jetbrains.mps.lang.project.modules)";
  private Map<SModelId, ProjectStructureModule.ProjectStructureSModelDescriptor> myModels = new ConcurrentHashMap<SModelId, ProjectStructureModule.ProjectStructureSModelDescriptor>();
  private static ProjectStructureModule INSTANCE;
  private final MPSModuleOwner myOwner = new BaseMPSModuleOwner() {};
  private final SModuleListener myModuleListener = new SModuleAdapter() {
    @Override
    public void moduleChanged(SModule module) {
      refreshModule(module, false);
    }
  };
  private final SRepositoryListener myListener = new SRepositoryListenerBase() {
    @Override
    public void moduleAdded(@NotNull SModule module) {
      refreshModule(module, false);
      module.addModuleListener(myModuleListener);
    }
    @Override
    public void beforeModuleRemoved(@NotNull SModule module) {
      module.removeModuleListener(myModuleListener);
      refreshModule(module, true);
    }
  };
  private final MPSModuleRepository myRepository;
  public static ProjectStructureModule getInstance() {
    return INSTANCE;
  }
  public ProjectStructureModule(MPSModuleRepository repository) {
    myRepository = repository;
    setModuleReference(PersistenceFacade.getInstance().createModuleReference(MODULE_REF));
  }
  private void refreshModule(SModule module, boolean isDeleted) {
    assertCanChange();
    if (!((module instanceof Solution || module instanceof Language || module instanceof DevKit))) {
      return;
    }
    SModelReference ref = getSModelReference(module);
    if (isDeleted) {
      ProjectStructureModule.ProjectStructureSModelDescriptor descriptor = myModels.get(ref.getModelId());
      if (descriptor != null) {
        removeModel(descriptor);
      }
    } else
    if (myModels.containsKey(ref.getModelId())) {
      ProjectStructureModule.ProjectStructureSModelDescriptor descriptor = myModels.get(ref.getModelId());
      descriptor.dropModel();
    } else {
      createModel(module);
    }
  }
  public SModel getModelByModule(SModule module) {
    myRepository.getModelAccess().checkReadAccess();
    if (module == null) {
      return null;
    }
    SModelReference ref = getSModelReference(module);
    ProjectStructureModule.ProjectStructureSModelDescriptor descriptor = myModels.get(ref.getModelId());
    return (descriptor == null ? null : descriptor);
  }
  @Override
  public void init() {
    if (INSTANCE != null) {
      throw new IllegalStateException("double initialization");
    }
    INSTANCE = this;
    myRepository.addRepositoryListener(myListener);
    myRepository.getModelAccess().runWriteAction(new Runnable() {
      @Override
      public void run() {
        myRepository.registerModule(ProjectStructureModule.this, myOwner);
      }
    });
  }
  @Override
  public void dispose() {
    // it is disposed as CoreComponent 
    if (INSTANCE == null) {
      return;
    }
    INSTANCE = null;
    clearAll();
    myRepository.getModelAccess().runWriteAction(new Runnable() {
      @Override
      public void run() {
        myRepository.unregisterModule(ProjectStructureModule.this, myOwner);
      }
    });
    myRepository.removeRepositoryListener(myListener);
  }
  public void clearAll() {
    myRepository.getModelAccess().runWriteAction(new Runnable() {
      @Override
      public void run() {
        removeAll();
        dependenciesChanged();
        myModels.clear();
      }
    });
  }
  private void removeAll() {
    List<SModel> models = this.getProjectStructureModels();
    for (SModel model : models) {
      removeModel(model);
    }
  }
  @Override
  public Set<SLanguage> getUsedLanguages() {
    return Collections.singleton(MetaAdapterFactory.getLanguage(MetaIdFactory.langId(0x86ef829012bb4ca7L, 0x947f093788f263a9L), "jetbrains.mps.lang.project"));
  }
  private void removeModel(SModel md) {
    if (myModels.remove(md.getReference().getModelId()) != null) {
      unregisterModel((SModelBase) md);
      if (md instanceof ProjectStructureModule.ProjectStructureSModelDescriptor) {
        ((ProjectStructureModule.ProjectStructureSModelDescriptor) md).dropModel();
      }
    }
  }
  public ProjectStructureModule.ProjectStructureSModelDescriptor createModel(SModule module) {
    ProjectStructureModule.ProjectStructureSModelDescriptor result = new ProjectStructureModule.ProjectStructureSModelDescriptor(getSModelReference(module), module);
    myModels.put(getSModelReference(module).getModelId(), result);
    registerModel(result);
    return result;
  }
  private SModelReference getSModelReference(SModule module) {
    SModuleId moduleId = module.getModuleReference().getModuleId();
    SModelId id = (moduleId != null ? jetbrains.mps.smodel.SModelId.foreign("project", moduleId.toString()) : null);
    return new jetbrains.mps.smodel.SModelReference(this.getModuleReference(), id, "module." + module.getModuleName() + "@" + SModelStereotype.getStubStereotypeForId("project"));
  }
  public String toString() {
    return getModuleName();
  }
  public List<SModel> getProjectStructureModels() {
    return new ArrayList<SModel>(myModels.values());
  }
  @Override
  protected void collectFacetTypes(Set<String> types) {
    // none 
  }
  @Override
  public SModel resolveInDependencies(SModelId ref) {
    return myModels.get(ref);
  }
  public class ProjectStructureSModelDescriptor extends BaseSpecialModelDescriptor {
    private final SModule myModule;
    private ProjectStructureSModelDescriptor(SModelReference ref, SModule module) {
      super(ref);
      myModule = module;
    }
    @Override
    protected ProjectStructureModule.ProjectStructureSModel createModel() {
      final ProjectStructureModule.ProjectStructureSModel model = new ProjectStructureModule.ProjectStructureSModel(getReference());
      final ModuleDescriptor moduleDescriptor = ((AbstractModule) myModule).getModuleDescriptor();
      final IFile file = ((AbstractModule) myModule).getDescriptorFile();
      if (file != null && moduleDescriptor != null) {
        NodeReadAccessCasterInEditor.runReadTransparentAction(new Runnable() {
          @Override
          public void run() {
            new ProjectStructureBuilder(moduleDescriptor, file, model) {
              @Override
              public Iterable<SModelReference> loadReferences(SNode m, ModuleDescriptor descriptor) {
                SModule module = (moduleDescriptor == descriptor ? myModule : ModuleRepositoryFacade.getInstance().getModule(descriptor.getModuleReference()));
                if (module == null) {
                  return Collections.emptyList();
                }
                return Sequence.<SModel>fromIterable(module.getModels()).where(new IWhereFilter<SModel>() {
                  @Override
                  public boolean accept(SModel o) {
                    return SModelStereotype.isUserModel(o);
                  }
                }).select(new ISelector<SModel, SModelReference>() {
                  @Override
                  public SModelReference select(SModel o) {
                    return o.getReference();
                  }
                });
              }
            }.convert();
          }
        });
      }
      return model;
    }
    private void dropModel() {
      if (mySModel == null) {
        return;
      }
      final jetbrains.mps.smodel.SModel oldModel = mySModel;
      mySModel = null;
      replaceModelAndFireEvent(oldModel, null);
    }
  }
  public static class ProjectStructureSModel extends jetbrains.mps.smodel.SModel {
    public ProjectStructureSModel(@NotNull SModelReference modelReference) {
      super(modelReference, new ForeignNodeIdMap());
    }
    @Override
    public boolean canFireEvent() {
      return false;
    }
    @Override
    public FastNodeFinder createFastNodeFinder() {
      return new BaseFastNodeFinder(getModelDescriptor());
    }
  }
}
