/* LanguageTool, a natural language style checker
 * Copyright (C) 2012 Marcin Mi≈Çkowski
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
 * USA
 */
package org.languagetool.rules.uk;

import static org.junit.Assert.assertEquals;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

import org.junit.Test;
import org.languagetool.JLanguageTool;
import org.languagetool.TestTools;
import org.languagetool.language.Ukrainian;
import org.languagetool.rules.RuleMatch;

public class MorfologikUkrainianSpellerRuleTest {

  @Test
  public void testMorfologikSpeller() throws IOException {
    MorfologikUkrainianSpellerRule rule = new MorfologikUkrainianSpellerRule (TestTools.getMessages("uk"), new Ukrainian());

    JLanguageTool langTool = new JLanguageTool(new Ukrainian());

    // correct sentences:
    assertEquals(0, rule.match(langTool.getAnalyzedSentence("–î–æ –≤–∞—? –ø—Ä–∏–π–¥–µ –∑–∞–≤–≤—ñ–¥–¥—ñ–ª—É!")).length);
    assertEquals(0, rule.match(langTool.getAnalyzedSentence(",")).length);
    assertEquals(0, rule.match(langTool.getAnalyzedSentence("123454")).length);

    assertEquals(0, rule.match(langTool.getAnalyzedSentence("–î–æ –Ω–∞—? –ø—Ä–∏—ó–¥–µ The Beatles!")).length);

    // soft hyphen
    assertEquals(0, rule.match(langTool.getAnalyzedSentence("–ø—ñ—?\u00AD–Ω—ñ")).length);
    assertEquals(0, rule.match(langTool.getAnalyzedSentence("–ø—ñ—?\u00AD–Ω—ñ –ø—ñ—?\u00AD–Ω—ñ")).length);
    
    
    //incorrect sentences:

    RuleMatch[] matches = rule.match(langTool.getAnalyzedSentence("–∞—Ç–∞–∫—É—é—á–∏–π"));
    // check match positions:
    assertEquals(1, matches.length);

    matches = rule.match(langTool.getAnalyzedSentence("—à–∫–ª—?–Ω–∏–π"));

    assertEquals(1, matches.length);
    assertEquals("—?–∫–ª—?–Ω–∏–π", matches[0].getSuggestedReplacements().get(0));

    assertEquals(0, rule.match(langTool.getAnalyzedSentence("–∞")).length);

    // mix alphabets
    matches = rule.match(langTool.getAnalyzedSentence("–ø—Ä–∏–π–¥–µ—à–Ωi–π"));   // latin 'i'

    assertEquals(1, matches.length);
    assertEquals("–ø—Ä–∏–π–¥–µ—à–Ω—ñ–π", matches[0].getSuggestedReplacements().get(0));

    // compounding
    assertEquals(0, rule.match(langTool.getAnalyzedSentence("–ñ–∞–∫–µ—Ç –±—É–≤ —?–∏–Ω—å–æ-–∂–æ–≤—Ç–æ–≥–æ –∫–æ–ª—å–æ—Ä—É")).length);

    assertEquals(0, rule.match(langTool.getAnalyzedSentence("–í—ñ–Ω –±–∞–≥–∞—Ç–æ —?–∏–¥—ñ–≤ –Ω–∞ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ñ–æ—Ä—É–º–∞—Ö")).length);

    assertEquals(1, rule.match(langTool.getAnalyzedSentence("–í—ñ–Ω –±–∞–≥–∞—Ç–æ —?–∏–¥—ñ–≤ –Ω–∞ —ñ–Ω—Ç–µ—Ä–º–µ—Ç-—Ñ–æ—Ä—É–º–∞—Ö")).length);

    
    // dynamic tagging
    assertEquals(0, rule.match(langTool.getAnalyzedSentence("–µ–∫—?-–∫—Ä–µ–≤–µ—Ç–∫–∞")).length);

    assertEquals(1, rule.match(langTool.getAnalyzedSentence("–±–∞–Ω–¥-—Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—?.")).length);


    // abbreviations

    RuleMatch[] match = rule.match(langTool.getAnalyzedSentence("–ß–∏—Ç–∞–Ω–Ω—? –≤—ñ—Ä—à—ñ–≤ –¢.–ì.–®–µ–≤—á–µ–Ω–∫–æ —ñ –ì.–¢—é—Ç—é–Ω–Ω–∏–∫–∞"));
    assertEquals(new ArrayList<RuleMatch>(), Arrays.asList(match));

    match = rule.match(langTool.getAnalyzedSentence("–ß–∏—Ç–∞–Ω–Ω—? –≤—ñ—Ä—à—ñ–≤ –¢. –ì. –®–µ–≤—á–µ–Ω–∫–æ —ñ –ì. –¢—é—Ç—é–Ω–Ω–∏–∫–∞"));
    assertEquals(new ArrayList<RuleMatch>(), Arrays.asList(match));

    match = rule.match(langTool.getAnalyzedSentence("–?–Ω–≥–ª—ñÃ?–π—?—å–∫–∞ –º–æ–≤–∞ (–∞–Ω–≥–ª. English language, English) –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –≥–µ—Ä–º–∞–Ω—?—å–∫–æ—ó –≥—Ä—É–ø–∏"));
    assertEquals(new ArrayList<RuleMatch>(), Arrays.asList(match));

    match = rule.match(langTool.getAnalyzedSentence("–?–Ω–≥–ª—ñÃ?–π—?—å–∫–∞ –º–æ–≤–∞ (–∞–Ω–≥–ª English language, English) –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –≥–µ—Ä–º–∞–Ω—?—å–∫–æ—ó –≥—Ä—É–ø–∏"));
    assertEquals(1, match.length);

  
    match = rule.match(langTool.getAnalyzedSentence("100 —Ç–∏—?. –≥—Ä–∏–≤–µ–Ω—å"));
    assertEquals(new ArrayList<RuleMatch>(), Arrays.asList(match));

    match = rule.match(langTool.getAnalyzedSentence("100 –∫–≤. –º"));
    assertEquals(new ArrayList<RuleMatch>(), Arrays.asList(match));

    match = rule.match(langTool.getAnalyzedSentence("100 –∫–≤ –º"));
    assertEquals(1, Arrays.asList(match).size());
  }

}
