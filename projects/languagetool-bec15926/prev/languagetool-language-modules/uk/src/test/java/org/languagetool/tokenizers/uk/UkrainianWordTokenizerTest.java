/* LanguageTool, a natural language style checker 
 * Copyright (C) 2005 Daniel Naber (http://www.danielnaber.de)
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
 * USA
 */

package org.languagetool.tokenizers.uk;

import java.util.Arrays;
import java.util.List;

import junit.framework.TestCase;

public class UkrainianWordTokenizerTest extends TestCase {
  private final UkrainianWordTokenizer w = new UkrainianWordTokenizer();

  public void testTokenize() {
    List<String> testList = w.tokenize("–í–æ–Ω–∏ –ø—Ä–∏–π—à–ª–∏ –¥–æ–¥–æ–º—É.");
    assertEquals(Arrays.asList("–í–æ–Ω–∏", " ", "–ø—Ä–∏–π—à–ª–∏", " ", "–¥–æ–¥–æ–º—É", "."), testList);

    testList = w.tokenize("–í–æ–Ω–∏ –ø—Ä–∏–π—à–ª–∏ –ø º—?—Ç–∏–º–∏ –∑—ñ–≤‚Äô—?–ª–∏–º–∏.");
    assertEquals(Arrays.asList("–í–æ–Ω–∏", " ", "–ø—Ä–∏–π—à–ª–∏", " ", "–ø'—?—Ç–∏–º–∏", " ", "–∑—ñ–≤'—?–ª–∏–º–∏", "."), testList);

//    testList = w.tokenize("–í–æ–Ω–∏\u0301 –ø—Ä–∏\u00AD–π—à–ª–∏ –ø º—?\u0301—Ç–∏–º–∏ –∑—ñ–≤‚Äô—?\u00AD–ª–∏–º–∏.");
//    assertEquals(Arrays.asList("–í–æ–Ω–∏", " ", "–ø—Ä–∏–π—à–ª–∏", " ", "–ø'—?—Ç–∏–º–∏", " ", "–∑—ñ–≤'—?–ª–∏–º–∏", "."), testList);

    testList = w.tokenize("–ó–∞—?—ñ–¥–∞–≤ –Ü.–Ñ—Ä–º–æ–ª—é–∫.");
    assertEquals(Arrays.asList("–ó–∞—?—ñ–¥–∞–≤", " ", "–Ü", ".", "–Ñ—Ä–º–æ–ª—é–∫", "."), testList);

    testList = w.tokenize("–ó–∞—?—ñ–¥–∞–≤ –Ü.–ü.–Ñ—Ä–º–æ–ª—é–∫.");
    assertEquals(Arrays.asList("–ó–∞—?—ñ–¥–∞–≤", " ", "–Ü", ".", "–ü", ".", "–Ñ—Ä–º–æ–ª—é–∫", "."), testList);

    testList = w.tokenize("–Ü.\u00A0–Ñ—Ä–º–æ–ª—é–∫.");
    assertEquals(Arrays.asList("–Ü", ".", "\u00A0", "–Ñ—Ä–º–æ–ª—é–∫", "."), testList);

    testList = w.tokenize("300 –≥—Ä–Ω. –Ω–∞ –±–∞–ª–∞–Ω—?—ñ");
    assertEquals(Arrays.asList("300", " ", "–≥—Ä–Ω.", " ", "–Ω–∞", " ", "–±–∞–ª–∞–Ω—?—ñ"), testList);

    testList = w.tokenize("–Ω–∞–¥—ñ–π—à–ª–æ 2,2 –º—ñ–ª—å–π–æ–Ω–∞");
    assertEquals(Arrays.asList("–Ω–∞–¥—ñ–π—à–ª–æ", " ", "2,2", " ", "–º—ñ–ª—å–π–æ–Ω–∞"), testList);

    testList = w.tokenize("–Ω–∞–¥—ñ–π—à–ª–æ 84,46 –º—ñ–ª—å–π–æ–Ω–∞");
    assertEquals(Arrays.asList("–Ω–∞–¥—ñ–π—à–ª–æ", " ", "84,46", " ", "–º—ñ–ª—å–π–æ–Ω–∞"), testList);

//    testList = w.tokenize("–Ω–∞–¥—ñ–π—à–ª–æ 2 000 —Ç–æ–Ω");
//    assertEquals(Arrays.asList("–Ω–∞–¥—ñ–π—à–ª–æ", " ", "2 000", " ", "—Ç–æ–Ω"), testList);

    testList = w.tokenize("—?—Ç–∞–ª–æ—?—? 14.07.2001 –≤–Ω–æ—á—ñ");
    assertEquals(Arrays.asList("—?—Ç–∞–ª–æ—?—?", " ", "14.07.2001", " ", "–≤–Ω–æ—á—ñ"), testList);

    testList = w.tokenize("–≤—á–æ—Ä–∞ –æ 7.30 —Ä–∞–Ω–∫—É");
    assertEquals(Arrays.asList("–≤—á–æ—Ä–∞", " ", "–æ", " ", "7.30", " ", "—Ä–∞–Ω–∫—É"), testList);

    testList = w.tokenize("—? —É–∫—Ä–∞—ó–Ω–µ—Ü—å(—?–º—ñ—î—Ç—å—?—?");
    assertEquals(Arrays.asList("—?", " ", "—É–∫—Ä–∞—ó–Ω–µ—Ü—å", "(", "—?–º—ñ—î—Ç—å—?—?"), testList);
        
    testList = w.tokenize("–û–£–?(–±) —Ç–∞ –ö–ü(–±)–£");
    assertEquals(Arrays.asList("–û–£–?(–±)", " ", "—Ç–∞", " ", "–ö–ü(–±)–£"), testList);

    testList = w.tokenize("–?–µ–≥–æ–¥–∞ —î... –∑–∞—?—Ç—É–ø–Ω–∏–∫–æ–º");
    assertEquals(Arrays.asList("–?–µ–≥–æ–¥–∞", " ", "—î", "...", " ", "–∑–∞—?—Ç—É–ø–Ω–∏–∫–æ–º"), testList);

    testList = w.tokenize("140 —Ç–∏—?. –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤");
    assertEquals(Arrays.asList("140", " ", "—Ç–∏—?.", " ", "–ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤"), testList);

    testList = w.tokenize("–ø—Ä–æ—Ñ. –?—Ä—Ç—é—Ö–æ–≤");
    assertEquals(Arrays.asList("–ø—Ä–æ—Ñ.", " ", "–?—Ä—Ç—é—Ö–æ–≤"), testList);
  }

}
