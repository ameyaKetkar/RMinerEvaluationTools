/* LanguageTool, a natural language style checker 
 * Copyright (C) 2006 Daniel Naber (http://www.danielnaber.de)
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
 * USA
 */
package org.languagetool.tagging.uk;

import java.io.IOException;

import junit.framework.TestCase;

import org.languagetool.TestTools;
import org.languagetool.language.Ukrainian;
import org.languagetool.tokenizers.uk.UkrainianWordTokenizer;

public class UkrainianTaggerTest extends TestCase {
    
  private UkrainianTagger tagger;
  private UkrainianWordTokenizer tokenizer;
      
  @Override
  public void setUp() {
    tagger = new UkrainianTagger();
    tokenizer = new UkrainianWordTokenizer();
  }

  public void testDictionary() throws IOException {
    TestTools.testDictionary(tagger, new Ukrainian());
  }
  
  public void testTagger() throws IOException {

    // one-way case sensitivity
    TestTools.myAssert("–∫–∏—î–≤—ñ", "–∫–∏—î–≤—ñ/[–∫–∏–π]noun:m:v_dav", tokenizer, tagger);
    TestTools.myAssert("–ö–∏—î–≤—ñ", "–ö–∏—î–≤—ñ/[–ö–∏—ó–≤]noun:m:v_mis|–ö–∏—î–≤—ñ/[–∫–∏–π]noun:m:v_dav", tokenizer, tagger);
    TestTools.myAssert("–≤—ñ–ª", "–≤—ñ–ª/[–≤—ñ–ª]noun:m:v_naz:anim", tokenizer, tagger);
    TestTools.myAssert("–í—ñ–ª", "–í—ñ–ª/[–≤—ñ–ª]noun:m:v_naz:anim", tokenizer, tagger);
    TestTools.myAssert("–í–Ü–õ", "–í–Ü–õ/[–í–Ü–õ]noun:m:v_dav:nv:np:abbr|–í–Ü–õ/[–í–Ü–õ]noun:m:v_mis:nv:np:abbr|–í–Ü–õ/[–í–Ü–õ]noun:m:v_naz:nv:np:abbr|–í–Ü–õ/[–í–Ü–õ]noun:m:v_oru:nv:np:abbr|–í–Ü–õ/[–í–Ü–õ]noun:m:v_rod:nv:np:abbr|–í–Ü–õ/[–í–Ü–õ]noun:m:v_zna:nv:np:abbr|–í–Ü–õ/[–≤—ñ–ª]noun:m:v_naz:anim", tokenizer, tagger);
    TestTools.myAssert("–¥–∞–ª—ñ", "–¥–∞–ª—ñ/[–¥–∞–ª—ñ]adv", tokenizer, tagger);
    TestTools.myAssert("–î–∞–ª—ñ", "–î–∞–ª—ñ/[–î–∞–ª—å]noun:m:v_mis:anim:lname|–î–∞–ª—ñ/[–î–∞–ª—ñ]noun:m:v_dav:nv:np:anim:lname|–î–∞–ª—ñ/[–î–∞–ª—ñ]noun:m:v_mis:nv:np:anim:lname|–î–∞–ª—ñ/[–î–∞–ª—ñ]noun:m:v_naz:nv:np:anim:lname|–î–∞–ª—ñ/[–î–∞–ª—ñ]noun:m:v_oru:nv:np:anim:lname|–î–∞–ª—ñ/[–î–∞–ª—ñ]noun:m:v_rod:nv:np:anim:lname|–î–∞–ª—ñ/[–î–∞–ª—ñ]noun:m:v_zna:nv:np:anim:lname|–î–∞–ª—ñ/[–¥–∞–ª—ñ]adv", tokenizer, tagger);
    TestTools.myAssert("–ë–µ–Ω", "–ë–µ–Ω/[–ë–µ–Ω]noun:m:v_naz:anim:fname|–ë–µ–Ω/[–±–µ–Ω]unknown", tokenizer, tagger);
    TestTools.myAssert("–±–µ–Ω", "–±–µ–Ω/[–±–µ–Ω]unknown", tokenizer, tagger);


    TestTools.myAssert("–°–ø—Ä–∞–≤—É –ø–æ—Ä—É—à–µ–Ω–æ —?—É–¥–æ–º", 
      "–°–ø—Ä–∞–≤—É/[—?–ø—Ä–∞–≤–∞]noun:f:v_zna -- –ø–æ—Ä—É—à–µ–Ω–æ/[–ø–æ—Ä—É—à–∏—Ç–∏]verb:impers:perf -- —?—É–¥–æ–º/[—?—É–¥]noun:m:v_oru|—?—É–¥–æ–º/[—?—É–¥–æ–º–∞]noun:p:v_rod",
       tokenizer, tagger);
       
    String expected = 
      "–ú–∞–π–∂–µ/[–º–∞–π–∂–µ]adv -- –¥–≤–∞/[–¥–≤–∞]numr:m:v_naz|–¥–≤–∞/[–¥–≤–∞]numr:m:v_zna|–¥–≤–∞/[–¥–≤–∞]numr:n:v_naz|–¥–≤–∞/[–¥–≤–∞]numr:n:v_zna -- —Ä–æ–∫–∏/[—Ä—ñ–∫]noun:p:v_naz|—Ä–æ–∫–∏/[—Ä—ñ–∫]noun:p:v_zna"
    + " -- —Ç–æ–º—É/[—Ç–æ–π]adj:m:v_dav:&pron:dem|—Ç–æ–º—É/[—Ç–æ–π]adj:m:v_mis:&pron:dem|—Ç–æ–º—É/[—Ç–æ–π]adj:n:v_dav:&pron:dem|—Ç–æ–º—É/[—Ç–æ–π]adj:n:v_mis:&pron:dem|—Ç–æ–º—É/[—Ç–æ–º]noun:m:v_dav|—Ç–æ–º—É/[—Ç–æ–º]noun:m:v_mis|—Ç–æ–º—É/[—Ç–æ–º]noun:m:v_rod|—Ç–æ–º—É/[—Ç–æ–º—É]adv|—Ç–æ–º—É/[—Ç–æ–º—É]conj:subord"
    + " -- –õ—é–±–∞/[–õ—é–±–∞]noun:f:v_naz:anim:fname|–õ—é–±–∞/[–ª—é–±–∏–π]adj:f:v_naz -- —Ä–∞–∑–æ–º/[—Ä–∞–∑]noun:m:v_oru|—Ä–∞–∑–æ–º/[—Ä–∞–∑–æ–º]adv -- —ñ–∑/[—ñ–∑]prep:rv_rod:rv_zna:rv_oru"
    + " -- —á–æ–ª–æ–≤—ñ–∫–æ–º/[—á–æ–ª–æ–≤—ñ–∫]noun:m:v_oru:anim -- –°—Ç–µ–ø–∞–Ω–æ–º/[–°—Ç–µ–ø–∞–Ω]noun:m:v_oru:anim:fname -- –≤–∏—ó—Ö–∞–ª–∏/[–≤–∏—ó—Ö–∞—Ç–∏]verb:past:m:perf -- —Ç—É–¥–∏/[—Ç—É–¥–∏]adv:&pron:dem"
    + " -- –Ω–∞/[–Ω–∞]excl|–Ω–∞/[–Ω–∞]part|–Ω–∞/[–Ω–∞]prep:rv_zna:rv_mis -- "
    + "–ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—?/[–ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—?]noun:n:v_naz|–ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—?/[–ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—?]noun:n:v_rod|–ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—?/[–ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—?]noun:n:v_zna|–ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—?/[–ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—?]noun:p:v_naz|–ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—?/[–ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—?]noun:p:v_zna";
  
    TestTools.myAssert("–ú–∞–π–∂–µ –¥–≤–∞ —Ä–æ–∫–∏ —Ç–æ–º—É –õ—é–±–∞ —Ä–∞–∑–æ–º —ñ–∑ —á–æ–ª–æ–≤—ñ–∫–æ–º –°—Ç–µ–ø–∞–Ω–æ–º –≤–∏—ó—Ö–∞–ª–∏ —Ç—É–¥–∏ –Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—?.",
        expected, tokenizer, tagger);
  }

  public void testNumberTagging() throws IOException {
    TestTools.myAssert("101,234", "101,234/[101,234]number", tokenizer, tagger);
    TestTools.myAssert("3,5-5,6% 7¬∞ 7,4¬∞–°", "3,5-5,6%/[3,5-5,6%]number -- 7¬∞/[7¬∞]number -- 7,4¬∞–°/[7,4¬∞–°]number", tokenizer, tagger);
    TestTools.myAssert("XIX", "XIX/[XIX]number", tokenizer, tagger);

    TestTools.myAssert("14.07.2001", "14.07.2001/[14.07.2001]date", tokenizer, tagger);

    TestTools.myAssert("–æ 15.33", "–æ/[–æ]excl|–æ/[–æ]prep:rv_zna:rv_mis -- 15.33/[15.33]time", tokenizer, tagger);
    TestTools.myAssert("–û 1:05", "–û/[–æ]excl|–û/[–æ]prep:rv_zna:rv_mis -- 1:05/[1:05]time", tokenizer, tagger);
  }
  
  public void testTaggingWithDots() throws IOException {
    TestTools.myAssert("300 —Ä. –¥–æ –Ω. –µ.", 
      "300/[300]number -- —Ä./[null]null -- –¥–æ/[–¥–æ]noun:n:v_dav:nv|–¥–æ/[–¥–æ]noun:n:v_mis:nv|–¥–æ/[–¥–æ]noun:n:v_naz:nv|–¥–æ/[–¥–æ]noun:n:v_oru:nv|–¥–æ/[–¥–æ]noun:n:v_rod:nv|–¥–æ/[–¥–æ]noun:n:v_zna:nv|–¥–æ/[–¥–æ]noun:p:v_dav:nv|–¥–æ/[–¥–æ]noun:p:v_mis:nv|–¥–æ/[–¥–æ]noun:p:v_naz:nv|–¥–æ/[–¥–æ]noun:p:v_oru:nv|–¥–æ/[–¥–æ]noun:p:v_rod:nv|–¥–æ/[–¥–æ]noun:p:v_zna:nv|–¥–æ/[–¥–æ]prep:rv_rod -- –Ω./[null]null -- –µ/[–µ]excl",
       tokenizer, tagger);
  
//    TestTools.myAssert("–Ñ.–ë–∞–∫—É–ª—ñ–Ω–∞.",
//      "–Ñ.–ë–∞–∫—É–ª—ñ–Ω–∞[–ë–∞–∫—É–ª—ñ–Ω]noun:m:v_rod:anim:lname|–Ñ.–ë–∞–∫—É–ª—ñ–Ω–∞[–ë–∞–∫—É–ª—ñ–Ω]noun:m:v_zna:anim:lname",
//       tokenizer, tagger);
  }
  
  public void testDynamicTagging() throws IOException {
    TestTools.myAssert("–≥-–≥-–≥", "–≥-–≥-–≥/[null]null", tokenizer, tagger);
    
    TestTools.myAssert("100-—Ä—ñ—á–Ω–æ–º—É", "100-—Ä—ñ—á–Ω–æ–º—É/[100-—Ä—ñ—á–Ω–∏–π]adj:m:v_dav|100-—Ä—ñ—á–Ω–æ–º—É/[100-—Ä—ñ—á–Ω–∏–π]adj:m:v_mis|100-—Ä—ñ—á–Ω–æ–º—É/[100-—Ä—ñ—á–Ω–∏–π]adj:n:v_dav|100-—Ä—ñ—á–Ω–æ–º—É/[100-—Ä—ñ—á–Ω–∏–π]adj:n:v_mis", tokenizer, tagger);
    TestTools.myAssert("100-–π", "100-–π/[100-–π]adj:m:v_naz|100-–π/[100-–π]adj:m:v_zna", tokenizer, tagger);
    TestTools.myAssert("50-—Ö", "50-—Ö/[50-–π]adj:p:v_rod|50-—Ö/[50-–π]adj:p:v_zna", tokenizer, tagger);

    TestTools.myAssert("–ø–æ-—?–≤–∏–Ω—?—á–æ–º—É", "–ø–æ-—?–≤–∏–Ω—?—á–æ–º—É/[–ø–æ-—?–≤–∏–Ω—?—á–æ–º—É]adv", tokenizer, tagger);
    TestTools.myAssert("–ø–æ-—?–∏–±—ñ—Ä—?—å–∫–∏", "–ø–æ-—?–∏–±—ñ—Ä—?—å–∫–∏/[–ø–æ-—?–∏–±—ñ—Ä—?—å–∫–∏]adv", tokenizer, tagger);

    TestTools.myAssert("–¥–∞–≤–∞–π-–Ω–æ", "–¥–∞–≤–∞–π-–Ω–æ/[–¥–∞–≤–∞—Ç–∏]verb:impr:s:2:imperf", tokenizer, tagger);
    TestTools.myAssert("–¥–∏–≤—ñ—Ç—å—?—?-–Ω–æ", "–¥–∏–≤—ñ—Ç—å—?—?-–Ω–æ/[–¥–∏–≤–∏—Ç–∏—?—?]verb:rev:impr:p:2:imperf", tokenizer, tagger);
    TestTools.myAssert("—Ç–æ–π-—Ç–∞–∫–∏", "—Ç–æ–π-—Ç–∞–∫–∏/[—Ç–æ–π-—Ç–∞–∫–∏]adj:m:v_naz:&pron:dem|—Ç–æ–π-—Ç–∞–∫–∏/[—Ç–æ–π-—Ç–∞–∫–∏]adj:m:v_zna:&pron:dem", tokenizer, tagger);
    TestTools.myAssert("–±—É–¥–µ-—Ç–∞–∫–∏", "–±—É–¥–µ-—Ç–∞–∫–∏/[–±—É—Ç–∏]verb:futr:s:3:imperf", tokenizer, tagger);
    TestTools.myAssert("–æ—Ü–µ–π-–æ—Ç", "–æ—Ü–µ–π-–æ—Ç/[–æ—Ü–µ–π]adj:m:v_naz:&pron:dem|–æ—Ü–µ–π-–æ—Ç/[–æ—Ü–µ–π]adj:m:v_zna:&pron:dem", tokenizer, tagger);
    TestTools.myAssert("–æ—Ç—Ç–∞–∫–∏–π-—Ç–æ", "–æ—Ç—Ç–∞–∫–∏–π-—Ç–æ/[–æ—Ç—Ç–∞–∫–∏–π]adj:m:v_naz:&pron:dem:rare|–æ—Ç—Ç–∞–∫–∏–π-—Ç–æ/[–æ—Ç—Ç–∞–∫–∏–π]adj:m:v_zna:&pron:dem:rare", tokenizer, tagger);
    TestTools.myAssert("–≥–µ—Ç—å-—Ç–æ", "–≥–µ—Ç—å-—Ç–æ/[–≥–µ—Ç—å]adv|–≥–µ—Ç—å-—Ç–æ/[–≥–µ—Ç—å]part", tokenizer, tagger);
    TestTools.myAssert("–∞–Ω—É-–±–æ", "–∞–Ω—É-–±–æ/[–∞–Ω—É]excl|–∞–Ω—É-–±–æ/[–∞–Ω—É]part", tokenizer, tagger);
    TestTools.myAssert("–≥–æ–¥—ñ-–±–æ", "–≥–æ–¥—ñ-–±–æ/[–≥–æ–¥—ñ]predic", tokenizer, tagger);
    TestTools.myAssert("–≥–µ–π-–Ω–æ", "–≥–µ–π-–Ω–æ/[–≥–µ–π]excl", tokenizer, tagger);
    TestTools.myAssert("—Ü–∏—Ç—å-–Ω–æ", "—Ü–∏—Ç—å-–Ω–æ/[—Ü–∏—Ç—å]excl", tokenizer, tagger);

    TestTools.myAssert("–µ–∫—?-–ø–∞—Ä—Ç–Ω–µ—Ä", "–µ–∫—?-–ø–∞—Ä—Ç–Ω–µ—Ä/[–µ–∫—?-–ø–∞—Ä—Ç–Ω–µ—Ä]noun:m:v_naz:anim", tokenizer, tagger);

    // TODO: —?—Ç–∞—Ä–∏–π -> —?—Ç–∞—Ä—à–∏–π
    TestTools.myAssert("–?–ª—ñ—î–≤–∞-—?—Ç–∞—Ä—à–æ–≥–æ", "–?–ª—ñ—î–≤–∞-—?—Ç–∞—Ä—à–æ–≥–æ/[–?–ª—ñ—î–≤-—?—Ç–∞—Ä–∏–π]noun:m:v_rod:anim:lname|–?–ª—ñ—î–≤–∞-—?—Ç–∞—Ä—à–æ–≥–æ/[–?–ª—ñ—î–≤-—?—Ç–∞—Ä–∏–π]noun:m:v_zna:anim:lname", tokenizer, tagger);

//    TestTools.myAssert("–≥—Ä–µ–∫–æ-—É–Ω—ñ—?—Ç—?—å–∫–∏–π", "", tokenizer, tagger);
    
    TestTools.myAssert("–∂–∏–ª–æ-–±—É–ª–æ", "–∂–∏–ª–æ-–±—É–ª–æ/[–∂–∏—Ç–∏-–±—É—Ç–∏]verb:past:n:imperf", tokenizer, tagger);
    TestTools.myAssert("—É—á–∏—à-—É—á–∏—à", "—É—á–∏—à-—É—á–∏—à/[—É—á–∏—Ç–∏-—É—á–∏—Ç–∏]verb:pres:s:2:imperf:v-u", tokenizer, tagger);

    TestTools.myAssert("–≤–≥–æ—Ä—É-–≤–Ω–∏–∑", "–≤–≥–æ—Ä—É-–≤–Ω–∏–∑/[–≤–≥–æ—Ä—É-–≤–Ω–∏–∑]adv:v-u", tokenizer, tagger);

    TestTools.myAssert("–Ω–∏–∑–µ–Ω—å–∫–æ-–Ω–∏–∑–µ–Ω—å–∫–æ", "–Ω–∏–∑–µ–Ω—å–∫–æ-–Ω–∏–∑–µ–Ω—å–∫–æ/[–Ω–∏–∑–µ–Ω—å–∫–æ-–Ω–∏–∑–µ–Ω—å–∫–æ]adv", tokenizer, tagger);
    TestTools.myAssert("—Ç–∞–∫–æ–≥–æ-—?—?–∫–æ–≥–æ", "—Ç–∞–∫–æ–≥–æ-—?—?–∫–æ–≥–æ/[—Ç–∞–∫–∏–π-—?—?–∫–∏–π]adj:m:v_rod:&pron:def|—Ç–∞–∫–æ–≥–æ-—?—?–∫–æ–≥–æ/[—Ç–∞–∫–∏–π-—?—?–∫–∏–π]adj:m:v_zna:&pron:def|—Ç–∞–∫–æ–≥–æ-—?—?–∫–æ–≥–æ/[—Ç–∞–∫–∏–π-—?—?–∫–∏–π]adj:n:v_rod:&pron:def", tokenizer, tagger);
    TestTools.myAssert("–≤–µ–ª–∏–∫–∏–π-–ø—Ä–µ–≤–µ–ª–∏–∫–∏–π", "–≤–µ–ª–∏–∫–∏–π-–ø—Ä–µ–≤–µ–ª–∏–∫–∏–π/[–≤–µ–ª–∏–∫–∏–π-–ø—Ä–µ–≤–µ–ª–∏–∫–∏–π]adj:m:v_naz|–≤–µ–ª–∏–∫–∏–π-–ø—Ä–µ–≤–µ–ª–∏–∫–∏–π/[–≤–µ–ª–∏–∫–∏–π-–ø—Ä–µ–≤–µ–ª–∏–∫–∏–π]adj:m:v_zna", tokenizer, tagger);
    TestTools.myAssert("—á–æ—Ä–Ω—ñ–π-—á–æ—Ä–Ω—ñ–π", "—á–æ—Ä–Ω—ñ–π-—á–æ—Ä–Ω—ñ–π/[—á–æ—Ä–Ω–∏–π-—á–æ—Ä–Ω–∏–π]adj:f:v_dav|—á–æ—Ä–Ω—ñ–π-—á–æ—Ä–Ω—ñ–π/[—á–æ—Ä–Ω–∏–π-—á–æ—Ä–Ω–∏–π]adj:f:v_mis|—á–æ—Ä–Ω—ñ–π-—á–æ—Ä–Ω—ñ–π/[—á–æ—Ä–Ω—ñ—Ç–∏-—á–æ—Ä–Ω—ñ—Ç–∏]verb:impr:s:2:imperf", tokenizer, tagger);

    TestTools.myAssert("–ª—ñ–∫–∞—Ä-–≥–æ–º–µ–æ–ø–∞—Ç", "–ª—ñ–∫–∞—Ä-–≥–æ–º–µ–æ–ø–∞—Ç/[–ª—ñ–∫–∞—Ä-–≥–æ–º–µ–æ–ø–∞—Ç]noun:m:v_naz:anim", tokenizer, tagger);
    TestTools.myAssert("–ª—ñ–∫–∞—Ä—?-–≥–æ–º–µ–æ–ø–∞—Ç–∞", "–ª—ñ–∫–∞—Ä—?-–≥–æ–º–µ–æ–ø–∞—Ç–∞/[–ª—ñ–∫–∞—Ä-–≥–æ–º–µ–æ–ø–∞—Ç]noun:m:v_rod:anim|–ª—ñ–∫–∞—Ä—?-–≥–æ–º–µ–æ–ø–∞—Ç–∞/[–ª—ñ–∫–∞—Ä-–≥–æ–º–µ–æ–ø–∞—Ç]noun:m:v_zna:anim", tokenizer, tagger);
    TestTools.myAssert("—à–º–∫—Ä-–≥–æ–º–µ–æ–ø–∞—Ç", "—à–º–∫—Ä-–≥–æ–º–µ–æ–ø–∞—Ç/[null]null", tokenizer, tagger);
    TestTools.myAssert("—à–º–∫—Ä-—Ç–∫—Ä", "—à–º–∫—Ä-—Ç–∫—Ä/[null]null", tokenizer, tagger);

    TestTools.myAssert("–≤—á–∏–Ω–æ–∫-–ø—Ä–∏–∫–ª–∞–¥", "–≤—á–∏–Ω–æ–∫-–ø—Ä–∏–∫–ª–∞–¥/[–≤—á–∏–Ω–æ–∫-–ø—Ä–∏–∫–ª–∞–¥]noun:m:v_naz:v-u|–≤—á–∏–Ω–æ–∫-–ø—Ä–∏–∫–ª–∞–¥/[–≤—á–∏–Ω–æ–∫-–ø—Ä–∏–∫–ª–∞–¥]noun:m:v_zna:v-u", tokenizer, tagger);
    TestTools.myAssert("–º—ñ—?—Ç–∞-—Ñ–æ—Ä—Ç–µ—Ü—ñ", "–º—ñ—?—Ç–∞-—Ñ–æ—Ä—Ç–µ—Ü—ñ/[–º—ñ—?—Ç–æ-—Ñ–æ—Ä—Ç–µ—Ü—?]noun:n:v_rod|–º—ñ—?—Ç–∞-—Ñ–æ—Ä—Ç–µ—Ü—ñ/[–º—ñ—?—Ç–æ-—Ñ–æ—Ä—Ç–µ—Ü—?]noun:p:v_naz|–º—ñ—?—Ç–∞-—Ñ–æ—Ä—Ç–µ—Ü—ñ/[–º—ñ—?—Ç–æ-—Ñ–æ—Ä—Ç–µ—Ü—?]noun:p:v_zna", tokenizer, tagger);

    // inanim-anim
    TestTools.myAssert("–≤—á–µ–Ω–∏—Ö-–Ω–æ–≤–∞—Ç–æ—Ä—ñ–≤", "–≤—á–µ–Ω–∏—Ö-–Ω–æ–≤–∞—Ç–æ—Ä—ñ–≤/[–≤—á–µ–Ω–∏–π-–Ω–æ–≤–∞—Ç–æ—Ä]noun:p:v_rod:anim:v-u|–≤—á–µ–Ω–∏—Ö-–Ω–æ–≤–∞—Ç–æ—Ä—ñ–≤/[–≤—á–µ–Ω–∏–π-–Ω–æ–≤–∞—Ç–æ—Ä]noun:p:v_zna:anim:v-u", tokenizer, tagger);
    TestTools.myAssert("–∫—Ä–∞—ó–Ω–∞-–≤–∏—Ä–æ–±–Ω–∏–∫", "–∫—Ä–∞—ó–Ω–∞-–≤–∏—Ä–æ–±–Ω–∏–∫/[–∫—Ä–∞—ó–Ω–∞-–≤–∏—Ä–æ–±–Ω–∏–∫]noun:f:v_naz", tokenizer, tagger);
    TestTools.myAssert("–±–∞–Ω–∫-–≤–∏—Ä–æ–±–Ω–∏–∫", "–±–∞–Ω–∫-–≤–∏—Ä–æ–±–Ω–∏–∫/[–±–∞–Ω–∫-–≤–∏—Ä–æ–±–Ω–∏–∫]noun:m:v_naz|–±–∞–Ω–∫-–≤–∏—Ä–æ–±–Ω–∏–∫/[–±–∞–Ω–∫-–≤–∏—Ä–æ–±–Ω–∏–∫]noun:m:v_zna", tokenizer, tagger);
    TestTools.myAssert("–±–∞–Ω–∫–∏-–∞–≥–µ–Ω—Ç–∏", "–±–∞–Ω–∫–∏-–∞–≥–µ–Ω—Ç–∏/[–±–∞–Ω–∫-–∞–≥–µ–Ω—Ç]noun:p:v_naz|–±–∞–Ω–∫–∏-–∞–≥–µ–Ω—Ç–∏/[–±–∞–Ω–∫-–∞–≥–µ–Ω—Ç]noun:p:v_zna|–±–∞–Ω–∫–∏-–∞–≥–µ–Ω—Ç–∏/[–±–∞–Ω–∫–∞-–∞–≥–µ–Ω—Ç]noun:p:v_naz|–±–∞–Ω–∫–∏-–∞–≥–µ–Ω—Ç–∏/[–±–∞–Ω–∫–∞-–∞–≥–µ–Ω—Ç]noun:p:v_zna", tokenizer, tagger);
    TestTools.myAssert("–º—ñ—?—Ç–æ-–≥—ñ–≥–∞–Ω—Ç", "–º—ñ—?—Ç–æ-–≥—ñ–≥–∞–Ω—Ç/[–º—ñ—?—Ç–æ-–≥—ñ–≥–∞–Ω—Ç]noun:n:v_naz|–º—ñ—?—Ç–æ-–≥—ñ–≥–∞–Ω—Ç/[–º—ñ—?—Ç–æ-–≥—ñ–≥–∞–Ω—Ç]noun:n:v_zna", tokenizer, tagger);
    TestTools.myAssert("–∫—Ä–∞—ó–Ω–∏-–∞–≥—Ä–µ—?–æ—Ä–∏", "–∫—Ä–∞—ó–Ω–∏-–∞–≥—Ä–µ—?–æ—Ä–∏/[–∫—Ä–∞—ó–Ω–∞-–∞–≥—Ä–µ—?–æ—Ä]noun:p:v_naz|–∫—Ä–∞—ó–Ω–∏-–∞–≥—Ä–µ—?–æ—Ä–∏/[–∫—Ä–∞—ó–Ω–∞-–∞–≥—Ä–µ—?–æ—Ä]noun:p:v_zna", tokenizer, tagger);
    TestTools.myAssert("–ø–æ—?–µ–ª–µ–Ω–Ω—?-–≥—ñ–≥–∞–Ω—Ç", "–ø–æ—?–µ–ª–µ–Ω–Ω—?-–≥—ñ–≥–∞–Ω—Ç/[–ø–æ—?–µ–ª–µ–Ω–Ω—?-–≥—ñ–≥–∞–Ω—Ç]noun:n:v_naz|–ø–æ—?–µ–ª–µ–Ω–Ω—?-–≥—ñ–≥–∞–Ω—Ç/[–ø–æ—?–µ–ª–µ–Ω–Ω—?-–≥—ñ–≥–∞–Ω—Ç]noun:n:v_zna", tokenizer, tagger);
    
    TestTools.myAssert("—?–æ–Ω—?—Ö-–∫—Ä–∞—?–µ–Ω—å", "—?–æ–Ω—?—Ö-–∫—Ä–∞—?–µ–Ω—å/[—?–æ–Ω—?—Ö-–∫—Ä–∞—?–µ–Ω—å]noun:m:v_naz|—?–æ–Ω—?—Ö-–∫—Ä–∞—?–µ–Ω—å/[—?–æ–Ω—?—Ö-–∫—Ä–∞—?–µ–Ω—å]noun:m:v_zna", tokenizer, tagger);
    TestTools.myAssert("–∫—Ä–∞—?–µ–Ω—å-—?–æ–Ω—?—Ö", "–∫—Ä–∞—?–µ–Ω—å-—?–æ–Ω—?—Ö/[–∫—Ä–∞—?–µ–Ω—å-—?–æ–Ω—?—Ö]noun:m:v_naz|–∫—Ä–∞—?–µ–Ω—å-—?–æ–Ω—?—Ö/[–∫—Ä–∞—?–µ–Ω—å-—?–æ–Ω—?—Ö]noun:m:v_zna", tokenizer, tagger);
    TestTools.myAssert("–¥–µ–ø—É—Ç–∞—Ç—ñ–≤-–ø—Ä–∏–≤–∏–¥—ñ–≤", "–¥–µ–ø—É—Ç–∞—Ç—ñ–≤-–ø—Ä–∏–≤–∏–¥—ñ–≤/[–¥–µ–ø—É—Ç–∞—Ç-–ø—Ä–∏–≤–∏–¥]noun:p:v_rod:anim|–¥–µ–ø—É—Ç–∞—Ç—ñ–≤-–ø—Ä–∏–≤–∏–¥—ñ–≤/[–¥–µ–ø—É—Ç–∞—Ç-–ø—Ä–∏–≤–∏–¥]noun:p:v_zna:anim", tokenizer, tagger);
    TestTools.myAssert("–¥—ñ–≤—á–∞—Ç–∞-–∑—ñ—Ä–æ—á–∫–∏", "–¥—ñ–≤—á–∞—Ç–∞-–∑—ñ—Ä–æ—á–∫–∏/[–¥—ñ–≤—á–∞-–∑—ñ—Ä–æ—á–∫–∞]noun:p:v_naz:anim", tokenizer, tagger);

    TestTools.myAssert("–∞–±–∑–∞—Ü-–¥–≤–∞", "–∞–±–∑–∞—Ü-–¥–≤–∞/[–∞–±–∑–∞—Ü-–¥–≤–∞]noun:m:v_naz|–∞–±–∑–∞—Ü-–¥–≤–∞/[–∞–±–∑–∞—Ü-–¥–≤–∞]noun:m:v_zna", tokenizer, tagger);
    TestTools.myAssert("—?–æ—Ç–Ω—ñ-–¥–≤—ñ", "—?–æ—Ç–Ω—ñ-–¥–≤—ñ/[—?–æ—Ç–Ω—?-–¥–≤–∞]noun:p:v_naz|—?–æ—Ç–Ω—ñ-–¥–≤—ñ/[—?–æ—Ç–Ω—?-–¥–≤–∞]noun:p:v_zna", tokenizer, tagger);
    TestTools.myAssert("—Ç–∏—?—?—á–µ—é-—Ç—Ä—å–æ–º–∞", "—Ç–∏—?—?—á–µ—é-—Ç—Ä—å–æ–º–∞/[—Ç–∏—?—?—á–∞-—Ç—Ä–∏]noun:f:v_oru|—Ç–∏—?—?—á–µ—é-—Ç—Ä—å–æ–º–∞/[—Ç–∏—?—?—á–∞-—Ç—Ä–æ—î]noun:f:v_oru", tokenizer, tagger);

    TestTools.myAssert("–æ–¥–Ω–∏–º-–¥–≤–æ–º–∞", "–æ–¥–Ω–∏–º-–¥–≤–æ–º–∞/[–æ–¥–∏–Ω-–¥–≤–∞]numr:m:v_oru|–æ–¥–Ω–∏–º-–¥–≤–æ–º–∞/[–æ–¥–∏–Ω-–¥–≤–∞]numr:n:v_oru|–æ–¥–Ω–∏–º-–¥–≤–æ–º–∞/[–æ–¥–∏–Ω-–¥–≤–æ—î]numr:m:v_oru|–æ–¥–Ω–∏–º-–¥–≤–æ–º–∞/[–æ–¥–∏–Ω-–¥–≤–æ—î]numr:n:v_oru", tokenizer, tagger);
    //TODO: –±–µ—Ä–µ —ñ–º–µ–Ω–Ω–∏–∫ –ø‚Äô—?—Ç–∞
//    TestTools.myAssert("–ø'—?—Ç–∏-—à–µ—?—Ç–∏", "–ø'—?—Ç–∏-—à–µ—?—Ç–∏/[–ø'—?—Ç—å-—à—ñ—?—Ç—å]numr:v_dav|–ø'—?—Ç–∏-—à–µ—?—Ç–∏/[–ø'—?—Ç—å-—à—ñ—?—Ç—å]numr:v_mis|–ø'—?—Ç–∏-—à–µ—?—Ç–∏/[–ø'—?—Ç—å-—à—ñ—?—Ç—å]numr:v_rod", tokenizer, tagger);
    TestTools.myAssert("–ø'—?—Ç–∏-—à–µ—?—Ç–∏", "–ø'—?—Ç–∏-—à–µ—?—Ç–∏/[–ø'—?—Ç–∞-—à—ñ—?—Ç—å]noun:f:v_rod|–ø'—?—Ç–∏-—à–µ—?—Ç–∏/[–ø'—?—Ç—å-—à—ñ—?—Ç—å]numr:p:v_dav|–ø'—?—Ç–∏-—à–µ—?—Ç–∏/[–ø'—?—Ç—å-—à—ñ—?—Ç—å]numr:p:v_mis|–ø'—?—Ç–∏-—à–µ—?—Ç–∏/[–ø'—?—Ç—å-—à—ñ—?—Ç—å]numr:p:v_rod", tokenizer, tagger);
    TestTools.myAssert("–ø—ñ–≤—Ç–æ—Ä–∏-–¥–≤—ñ", "–ø—ñ–≤—Ç–æ—Ä–∏-–¥–≤—ñ/[–ø—ñ–≤—Ç–æ—Ä–∏-–¥–≤–∞]numr:f:v_naz|–ø—ñ–≤—Ç–æ—Ä–∏-–¥–≤—ñ/[–ø—ñ–≤—Ç–æ—Ä–∏-–¥–≤–∞]numr:f:v_zna", tokenizer, tagger);
    TestTools.myAssert("—Ç—Ä–∏-—á–æ—Ç–∏—Ä–∏", "—Ç—Ä–∏-—á–æ—Ç–∏—Ä–∏/[—Ç—Ä–∏-—á–æ—Ç–∏—Ä–∏]numr:p:v_naz|—Ç—Ä–∏-—á–æ—Ç–∏—Ä–∏/[—Ç—Ä–∏-—á–æ—Ç–∏—Ä–∏]numr:p:v_zna", tokenizer, tagger);
    TestTools.myAssert("–¥–≤–∞-—á–æ—Ç–∏—Ä–∏", "–¥–≤–∞-—á–æ—Ç–∏—Ä–∏/[–¥–≤–∞-—á–æ—Ç–∏—Ä–∏]numr:m:v_naz|–¥–≤–∞-—á–æ—Ç–∏—Ä–∏/[–¥–≤–∞-—á–æ—Ç–∏—Ä–∏]numr:m:v_zna|–¥–≤–∞-—á–æ—Ç–∏—Ä–∏/[–¥–≤–∞-—á–æ—Ç–∏—Ä–∏]numr:n:v_naz|–¥–≤–∞-—á–æ—Ç–∏—Ä–∏/[–¥–≤–∞-—á–æ—Ç–∏—Ä–∏]numr:n:v_zna", tokenizer, tagger);
    TestTools.myAssert("–æ–¥–Ω–æ–º—É-–¥–≤–æ—Ö", "–æ–¥–Ω–æ–º—É-–¥–≤–æ—Ö/[–æ–¥–∏–Ω-–¥–≤–∞]numr:m:v_mis|–æ–¥–Ω–æ–º—É-–¥–≤–æ—Ö/[–æ–¥–∏–Ω-–¥–≤–∞]numr:n:v_mis|–æ–¥–Ω–æ–º—É-–¥–≤–æ—Ö/[–æ–¥–∏–Ω-–¥–≤–æ—î]numr:m:v_mis|–æ–¥–Ω–æ–º—É-–¥–≤–æ—Ö/[–æ–¥–∏–Ω-–¥–≤–æ—î]numr:n:v_mis", tokenizer, tagger);
    // u2013
    TestTools.myAssert("—Ç—Ä–∏‚Äì—á–æ—Ç–∏—Ä–∏", "—Ç—Ä–∏‚Äì—á–æ—Ç–∏—Ä–∏/[—Ç—Ä–∏‚Äì—á–æ—Ç–∏—Ä–∏]numr:p:v_naz|—Ç—Ä–∏‚Äì—á–æ—Ç–∏—Ä–∏/[—Ç—Ä–∏‚Äì—á–æ—Ç–∏—Ä–∏]numr:p:v_zna", tokenizer, tagger);
    
//    "–æ–¥–Ω—ñ—î—é-—î–¥–∏–Ω–æ—é"
//    TestTools.myAssert("–∫–∞–ø—É–¥–∂—ñ-–∞–≥–∞", "–¥–≤–∞-—á–æ—Ç–∏—Ä–∏/[–¥–≤–∞-—á–æ—Ç–∏—Ä–∏]numr:v_naz|–¥–≤–∞-—á–æ—Ç–∏—Ä–∏/[–¥–≤–∞-—á–æ—Ç–∏—Ä–∏]numr:v_naz", tokenizer, tagger);
//    TestTools.myAssert("–ö–∞–ª–∞–¥–∂—ñ-–±–µ–π", "–¥–≤–∞-—á–æ—Ç–∏—Ä–∏/[–¥–≤–∞-—á–æ—Ç–∏—Ä–∏]numr:v_naz|–¥–≤–∞-—á–æ—Ç–∏—Ä–∏/[–¥–≤–∞-—á–æ—Ç–∏—Ä–∏]numr:v_naz", tokenizer, tagger);
//    TestTools.myAssert("–∫–∞–ø—É–¥–∞–Ω-–ø–∞—à–∞", "–¥–≤–∞-—á–æ—Ç–∏—Ä–∏/[–¥–≤–∞-—á–æ—Ç–∏—Ä–∏]numr:v_naz|–¥–≤–∞-—á–æ—Ç–∏—Ä–∏/[–¥–≤–∞-—á–æ—Ç–∏—Ä–∏]numr:v_naz", tokenizer, tagger);
//    TestTools.myAssert("–∫–∞–ª—å—Ñ–∞-–µ—Ñ–µ–Ω–¥—ñ", "–¥–≤–∞-—á–æ—Ç–∏—Ä–∏/[–¥–≤–∞-—á–æ—Ç–∏—Ä–∏]numr:v_naz|–¥–≤–∞-—á–æ—Ç–∏—Ä–∏/[–¥–≤–∞-—á–æ—Ç–∏—Ä–∏]numr:v_naz", tokenizer, tagger);

    TestTools.myAssert("–∞-–∞", "–∞-–∞/[–∞-–∞]excl", tokenizer, tagger);

    TestTools.myAssert("–ú–æ—?–∫–≤–∏-—Ä—ñ–∫–∏", "–ú–æ—?–∫–≤–∏-—Ä—ñ–∫–∏/[–ú–æ—?–∫–≤–∞-—Ä—ñ–∫–∞]noun:f:v_rod", tokenizer, tagger);
    
    TestTools.myAssert("–ø—ñ–≤-–£–∫—Ä–∞—ó–Ω–∏", "–ø—ñ–≤-–£–∫—Ä–∞—ó–Ω–∏/[–ø—ñ–≤-–£–∫—Ä–∞—ó–Ω–∏]noun:f:v_dav|–ø—ñ–≤-–£–∫—Ä–∞—ó–Ω–∏/[–ø—ñ–≤-–£–∫—Ä–∞—ó–Ω–∏]noun:f:v_mis|–ø—ñ–≤-–£–∫—Ä–∞—ó–Ω–∏/[–ø—ñ–≤-–£–∫—Ä–∞—ó–Ω–∏]noun:f:v_naz|–ø—ñ–≤-–£–∫—Ä–∞—ó–Ω–∏/[–ø—ñ–≤-–£–∫—Ä–∞—ó–Ω–∏]noun:f:v_oru|–ø—ñ–≤-–£–∫—Ä–∞—ó–Ω–∏/[–ø—ñ–≤-–£–∫—Ä–∞—ó–Ω–∏]noun:f:v_rod|–ø—ñ–≤-–£–∫—Ä–∞—ó–Ω–∏/[–ø—ñ–≤-–£–∫—Ä–∞—ó–Ω–∏]noun:f:v_zna", tokenizer, tagger);

    TestTools.myAssert("–∫–∞–≤–∞-–µ—?–ø—Ä–µ—?–æ", "–∫–∞–≤–∞-–µ—?–ø—Ä–µ—?–æ/[–∫–∞–≤–∞-–µ—?–ø—Ä–µ—?–æ]noun:f:v_naz", tokenizer, tagger);
    TestTools.myAssert("–∫–∞–≤–∏-–µ—?–ø—Ä–µ—?–æ", "–∫–∞–≤–∏-–µ—?–ø—Ä–µ—?–æ/[–∫–∞–≤–∞-–µ—?–ø—Ä–µ—?–æ]noun:f:v_rod", tokenizer, tagger);
    TestTools.myAssert("–µ—?–ø—Ä–µ—?–æ-–º–∞—à–∏–Ω–∞", "–µ—?–ø—Ä–µ—?–æ-–º–∞—à–∏–Ω–∞/[–µ—?–ø—Ä–µ—?–æ-–º–∞—à–∏–Ω–∞]noun:f:v_naz", tokenizer, tagger);
    TestTools.myAssert("–ø—Ä–æ–≥—Ä–∞–º–æ—é-–º–∞–∫—?–∏–º—É–º", "–ø—Ä–æ–≥—Ä–∞–º–æ—é-–º–∞–∫—?–∏–º—É–º/[–ø—Ä–æ–≥—Ä–∞–º–∞-–º–∞–∫—?–∏–º—É–º]noun:f:v_oru", tokenizer, tagger);

    TestTools.myAssert("–ü–µ–Ω—?–∏–ª—å–≤–∞–Ω—ñ—?-–∞–≤–µ–Ω—é", "–ü–µ–Ω—?–∏–ª—å–≤–∞–Ω—ñ—?-–∞–≤–µ–Ω—é/[–ü–µ–Ω—?–∏–ª—å–≤–∞–Ω—ñ—?-–∞–≤–µ–Ω—é]noun:f:nv", tokenizer, tagger);

    TestTools.myAssert("–ø–∞—Ç–æ–ª–æ–≥–æ-–∞–Ω–∞—Ç–æ–º—ñ—á–Ω–∏–π", "–ø–∞—Ç–æ–ª–æ–≥–æ-–∞–Ω–∞—Ç–æ–º—ñ—á–Ω–∏–π/[–ø–∞—Ç–æ–ª–æ–≥–æ-–∞–Ω–∞—Ç–æ–º—ñ—á–Ω–∏–π]adj:m:v_naz|–ø–∞—Ç–æ–ª–æ–≥–æ-–∞–Ω–∞—Ç–æ–º—ñ—á–Ω–∏–π/[–ø–∞—Ç–æ–ª–æ–≥–æ-–∞–Ω–∞—Ç–æ–º—ñ—á–Ω–∏–π]adj:m:v_zna", tokenizer, tagger);
    TestTools.myAssert("–ø–∞—Ç–∞–ª–æ–≥–æ-–∞–Ω–∞—Ç–æ–º—ñ—á–Ω–∏–π", "–ø–∞—Ç–∞–ª–æ–≥–æ-–∞–Ω–∞—Ç–æ–º—ñ—á–Ω–∏–π/[null]null", tokenizer, tagger);
    //TODO: fix this case (now works like –±—Ä–∞—Ç—ñ–≤-–ø—Ä–∞–≤–æ—?–ª–∞–≤–Ω–∏—Ö)
//    TestTools.myAssert("–ø–∞—Ç–æ–ª–æ–≥–∞-–∞–Ω–∞—Ç–æ–º—ñ—á–Ω–∏–π", "–ø–∞—Ç–æ–ª–æ–≥–∞-–∞–Ω–∞—Ç–æ–º—ñ—á–Ω–∏–π/[null]null", tokenizer, tagger);
    TestTools.myAssert("–ø–∞—Ç–æ–ª–æ–≥–æ-–≥–º–∫–Ω—Ö", "–ø–∞—Ç–æ–ª–æ–≥–æ-–≥–º–∫–Ω—Ö/[null]null", tokenizer, tagger);
    TestTools.myAssert("–ø–∞—Ç–æ–ª–æ–≥–æ-–≥–æ–ª–æ–≤–∞", "–ø–∞—Ç–æ–ª–æ–≥–æ-–≥–æ–ª–æ–≤–∞/[null]null", tokenizer, tagger);
    //TODO: remove :compb ?
    TestTools.myAssert("–æ—?–≤—ñ—Ç–Ω—å–æ-–∫—É–ª—å—Ç—É—Ä–Ω–∏–π", "–æ—?–≤—ñ—Ç–Ω—å–æ-–∫—É–ª—å—Ç—É—Ä–Ω–∏–π/[–æ—?–≤—ñ—Ç–Ω—å–æ-–∫—É–ª—å—Ç—É—Ä–Ω–∏–π]adj:m:v_naz:compb|–æ—?–≤—ñ—Ç–Ω—å–æ-–∫—É–ª—å—Ç—É—Ä–Ω–∏–π/[–æ—?–≤—ñ—Ç–Ω—å–æ-–∫—É–ª—å—Ç—É—Ä–Ω–∏–π]adj:m:v_zna:compb", tokenizer, tagger);
    TestTools.myAssert("–±—ñ—Ä–º—é–∫–æ–≤–æ-–±–ª–∞–∫–∏—Ç–Ω–∏–π", "–±—ñ—Ä–º—é–∫–æ–≤–æ-–±–ª–∞–∫–∏—Ç–Ω–∏–π/[null]null", tokenizer, tagger);
    TestTools.myAssert("—?–ª—ñ–ø—É—á–µ-—?—?–∫—Ä–∞–≤–æ–≥–æ", "—?–ª—ñ–ø—É—á–µ-—?—?–∫—Ä–∞–≤–æ–≥–æ/[—?–ª—ñ–ø—É—á–µ-—?—?–∫—Ä–∞–≤–∏–π]adj:m:v_rod:compb|—?–ª—ñ–ø—É—á–µ-—?—?–∫—Ä–∞–≤–æ–≥–æ/[—?–ª—ñ–ø—É—á–µ-—?—?–∫—Ä–∞–≤–∏–π]adj:m:v_zna:compb|—?–ª—ñ–ø—É—á–µ-—?—?–∫—Ä–∞–≤–æ–≥–æ/[—?–ª—ñ–ø—É—á–µ-—?—?–∫—Ä–∞–≤–∏–π]adj:n:v_rod:compb", tokenizer, tagger);
    TestTools.myAssert("–¥–≤–æ-—Ç—Ä–∏–º–µ—Ç—Ä–æ–≤–∏–π", "–¥–≤–æ-—Ç—Ä–∏–º–µ—Ç—Ä–æ–≤–∏–π/[–¥–≤–æ-—Ç—Ä–∏–º–µ—Ç—Ä–æ–≤–∏–π]adj:m:v_naz|–¥–≤–æ-—Ç—Ä–∏–º–µ—Ç—Ä–æ–≤–∏–π/[–¥–≤–æ-—Ç—Ä–∏–º–µ—Ç—Ä–æ–≤–∏–π]adj:m:v_zna", tokenizer, tagger);
    TestTools.myAssert("—É–∫—Ä–∞—ó–Ω–æ-–±–æ–ª–≥–∞—Ä—?—å–∫–∏–π", "—É–∫—Ä–∞—ó–Ω–æ-–±–æ–ª–≥–∞—Ä—?—å–∫–∏–π/[—É–∫—Ä–∞—ó–Ω–æ-–±–æ–ª–≥–∞—Ä—?—å–∫–∏–π]adj:m:v_naz|—É–∫—Ä–∞—ó–Ω–æ-–±–æ–ª–≥–∞—Ä—?—å–∫–∏–π/[—É–∫—Ä–∞—ó–Ω–æ-–±–æ–ª–≥–∞—Ä—?—å–∫–∏–π]adj:m:v_zna", tokenizer, tagger);

//    TestTools.myAssert("–∞–º–µ—Ä–∏–∫–∞–Ω–æ-–±–ª–∞–∫–∏—Ç–Ω–∏–π", "–±—ñ—Ä–º—é–∫–æ–≤–æ-–±–ª–∞–∫–∏—Ç–Ω–∏–π/[–±—ñ—Ä–º—é–∫–æ–≤–æ-–±–ª–∞–∫–∏—Ç–Ω–∏–π]adj:m:v_naz|–±—ñ—Ä–º—é–∫–æ–≤–æ-–±–ª–∞–∫–∏—Ç–Ω–∏–π/[–±—ñ—Ä–º—é–∫–æ–≤–æ-–±–ª–∞–∫–∏—Ç–Ω–∏–π]adj:m:v_zna", tokenizer, tagger);

    TestTools.myAssert("–î—ñ–≤—á–∏–Ω–∫–∞-–ø–µ—Ä—à–æ–∫–ª–∞—?–Ω–∏—Ü—?", "–î—ñ–≤—á–∏–Ω–∫–∞-–ø–µ—Ä—à–æ–∫–ª–∞—?–Ω–∏—Ü—?/[–¥—ñ–≤—á–∏–Ω–∫–∞-–ø–µ—Ä—à–æ–∫–ª–∞—?–Ω–∏—Ü—?]noun:f:v_naz:anim", tokenizer, tagger);

    // —ñ—?—Ç–æ—Ç–∞-–Ω–µ—ñ—?—Ç–æ—Ç–∞
    //TODO:
    // –ø—Ä–æ –º—ñ—?—?—Ü—?-–º—ñ—?—?—á–µ–Ω—å–∫–∞
    // –±–∞–±—Ü—ñ-–?–≤—?—Ç—Ä—ñ—ó
    // –∑–º–∞–≥–∞–Ω–Ω—? –∑—ñ —?–ª–∞–ª–æ–º—É-–≥—ñ–≥–∞–Ω—Ç—É
    // –≥–æ–ª–æ—?—É–≤–∞—Ç–∏ –∑–∞ –¢–∏–º–æ—à–µ–Ω–∫–æ-–ø—Ä–µ–º‚Äô—î—Ä–∞
  }

}
