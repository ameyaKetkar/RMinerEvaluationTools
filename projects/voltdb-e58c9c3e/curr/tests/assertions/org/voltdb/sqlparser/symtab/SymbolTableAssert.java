package org.voltdb.sqlparser.symtab;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import org.voltdb.sqlparser.semantics.symtab.SymbolTable;
import org.voltdb.sqlparser.semantics.symtab.Type;

/**
 * {@link SymbolTable} specific assertions - Generated by CustomAssertionGenerator.
 */
public class SymbolTableAssert extends
        AbstractAssert<SymbolTableAssert, SymbolTable> {

    /**
     * Creates a new </code>{@link SymbolTableAssert}</code> to make assertions on actual SymbolTable.
     * @param actual the SymbolTable we want to make assertions on.
     */
    public SymbolTableAssert(SymbolTable actual) {
        super(actual, SymbolTableAssert.class);
    }

    /**
     * An entry point for SymbolTableAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one's can write directly : <code>assertThat(mySymbolTable)</code> and get specific assertion with code completion.
     * @param actual the SymbolTable we want to make assertions on.
     * @return a new </code>{@link SymbolTableAssert}</code>
     */
    public static SymbolTableAssert assertThat(SymbolTable actual) {
        return new SymbolTableAssert(actual);
    }

    /**
     * Verifies that the actual SymbolTable is empty.
     * @return this assertion object.
     * @throws AssertionError - if the actual SymbolTable is not empty.
     */
    public SymbolTableAssert isEmpty() {
    	return hasSize(0);
    }
    
    public SymbolTableAssert hasSize(int size) {
        // check that actual SymbolTable we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format(
                "Expected actual SymbolTable to be have size %d, but was %d.",
                size, actual.getSize());

        // check symbol table size.
        if (actual.getSize() != size) {
            throw new AssertionError(errorMessage);
        }
        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual SymbolTable is not empty.
     * @return this assertion object.
     * @throws AssertionError - if the actual SymbolTable is empty.
     */
    public SymbolTableAssert isNotEmpty() {
        // check that actual SymbolTable we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format(
                "Expected actual SymbolTable not to be empty but was.", actual);

        // check
        if (actual.isEmpty())
            throw new AssertionError(errorMessage);

        // return the current assertion for method chaining
        return this;
    }
    
    public TypeAssert definesType(String aTypeName) {
        isNotNull();
        Type t = actual.getType(aTypeName);
        if (t == null) {
            failWithMessage("Expected type <%s> to be defined", aTypeName);
        }
        return new TypeAssert(t);
    }
}
