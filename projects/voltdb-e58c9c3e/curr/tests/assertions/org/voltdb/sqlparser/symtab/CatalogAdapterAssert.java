package org.voltdb.sqlparser.symtab;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Condition;
import org.voltdb.sqlparser.semantics.symtab.CatalogAdapter;
import org.voltdb.sqlparser.semantics.symtab.Table;

/**
 * {@link CatalogAdapter} specific assertions - Generated by CustomAssertionGenerator.
 */
public class CatalogAdapterAssert extends
        AbstractAssert<CatalogAdapterAssert, CatalogAdapter> {

    /**
     * Creates a new </code>{@link CatalogAdapterAssert}</code> to make assertions on actual CatalogAdapter.
     * @param actual the CatalogAdapter we want to make assertions on.
     */
    public CatalogAdapterAssert(CatalogAdapter actual) {
        super(actual, CatalogAdapterAssert.class);
    }

    /**
     * An entry point for CatalogAdapterAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one's can write directly : <code>assertThat(myCatalogAdapter)</code> and get specific assertion with code completion.
     * @param actual the CatalogAdapter we want to make assertions on.
     * @return a new </code>{@link CatalogAdapterAssert}</code>
     */
    public static CatalogAdapterAssert assertThat(CatalogAdapter actual) {
        return new CatalogAdapterAssert(actual);
    }

    @SafeVarargs
	public final CatalogAdapterAssert hasTableNamed(String aTableName,
			 									    Condition<Table> ...conditions) {
        isNotNull();
        Table tbl = actual.getTableByName(aTableName);
        if (tbl == null) {
            failWithMessage("Expected to find a table named <%s>", aTableName);
        }
        for (Condition<Table> cond : conditions) {
            org.voltdb.sqlparser.symtab.TableAssert.assertThat(tbl).has(cond);
        }
        return this;
    }

}
