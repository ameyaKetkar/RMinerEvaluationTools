package org.hsqldb_voltpatches;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.api.Condition;

import java.util.Map;
import org.hsqldb_voltpatches.VoltXMLElement.VoltXMLDiff;

/**
 * {@link VoltXMLElement} specific assertions - Generated by CustomAssertionGenerator.
 */
public class VoltXMLElementAssert extends AbstractAssert<VoltXMLElementAssert, VoltXMLElement> {

	/**
	 * Creates a new </code>{@link VoltXMLElementAssert}</code> to make assertions on actual VoltXMLElement.
	 * @param actual the VoltXMLElement we want to make assertions on.
	 */
	public VoltXMLElementAssert(VoltXMLElement actual) {
		super(actual, VoltXMLElementAssert.class);
	}

	/**
	 * An entry point for VoltXMLElementAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly : <code>assertThat(myVoltXMLElement)</code> and get specific assertion with code completion.
	 * @param actual the VoltXMLElement we want to make assertions on.
	 * @return a new </code>{@link VoltXMLElementAssert}</code>
	 */
	public static VoltXMLElementAssert assertThat(VoltXMLElement actual) {
		return new VoltXMLElementAssert(actual);
	}

	public VoltXMLElementAssert hasName(String name) {
		isNotNull();
		if (name == null) {
			failWithMessage("Expected null name");
		}
		if (!name.equals(actual.getUniqueName())) {
			failWithMessage("Expected name to be:\n    <%s>\nnot:\n    <%s>",
						    name, actual.getUniqueName());
		}
		return this;
	}
	
	public VoltXMLElementAssert hasAttribute(String attributeName,
			                                 String attributeValue) {
		// check that actual VoltXMLElement we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected attribute named <%s> to be:\n  <%s>\n but was:\n  <%s>", actual,
								     attributeValue,
								     actual.attributes.get(attributeName));
		if (!actual.attributes.get(attributeName).equals(attributeValue)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	public VoltXMLElementAssert hasChildNamed(String childName,
											  Condition<VoltXMLElement> ... conditions) {
		isNotNull();
		VoltXMLElement child = actual.findChild(childName);
		if (child == null) {
			failWithMessage(String.format("Can't find child named: <%s>", childName));
		}
		for (Condition<VoltXMLElement> cond : conditions) {
			assertThat(actual).has(cond);
		}
		return this;
	}
}
