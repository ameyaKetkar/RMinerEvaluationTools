
µRename Variable moduleDescriptors : List<ErlangFileDescriptor> to fileDescriptors : List<ErlangFileDescriptor> in method private getErlangModulePaths(target ErlangTarget, context CompileContext, dirtyFilePaths List<String>, isTest boolean) : List<String> in class org.intellij.erlang.jps.builder.ErlangBuilder
„Change Parameter Type nodes : List<String> to nodes : Collection<String> in method private getNodesByName(nodes Collection<String>) : List<Node> in class org.intellij.erlang.jps.builder.ErlangBuilder.SortedModuleDependencyGraph
îRename Variable dirtyErlangModulePaths : List<String> to dirtyErlangFilePaths : List<String> in method private buildSources(target ErlangTarget, context CompileContext, compilerOptions ErlangCompilerOptions, holder DirtyFilesHolder<ErlangSourceRootDescriptor,ErlangTarget>, outputConsumer BuildOutputConsumer, outputDir File, isTests boolean) : void in class org.intellij.erlang.jps.builder.ErlangBuilder
∂Rename Variable modulesCollector : Processor<VirtualFile> to filesCollector : Processor<VirtualFile> in method private addErlangFiles(module Module, onlyTestModules boolean, erlangModules Collection<ErlangFile>, type ErlangFileType) : Collection<ErlangFile> in class org.intellij.erlang.utils.ErlangModulesUtilœChange Parameter Type expected : T to module : Module in method protected addIncludeRoot(module Module, sourceRootName String) : VirtualFile in class org.intellij.erlang.compilation.ErlangCompilationTestBaseõRename Parameter nodesName : Collection<String> to erlangModuleNames : Collection<String> in method private getPathsFromNames(erlangModuleNames Collection<String>) : List<String> in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphËRename Parameter node : Node to virtualFile : VirtualFile in method private getErlangFile(virtualFile VirtualFile) : ErlangFile in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraph‡Change Return Type List<Node> to List<String> in method private getDeclaredIncludePaths(file ErlangFile) : List<String> in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraph˚Rename Parameter modules : Collection<ErlangFile> to erlangModules : Collection<VirtualFile> in method private ErlangFilesDependencyGraph(erlangModules Collection<VirtualFile>, erlangHeaders Collection<VirtualFile>, globalParseTransforms List<String>, psiManager PsiManager) in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraph◊Change Return Type List<Node> to List<String> in method public getDependencies(filePath String) : List<String> in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraph’Rename Parameter pt : String to filePath : String in method public getIn(filePath String) : Iterator<String> in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphÄChange Parameter Type modules : Collection<ErlangFile> to erlangModules : Collection<VirtualFile> in method private ErlangFilesDependencyGraph(erlangModules Collection<VirtualFile>, erlangHeaders Collection<VirtualFile>, globalParseTransforms List<String>, psiManager PsiManager) in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphÌChange Parameter Type node : Node to virtualFile : VirtualFile in method private getErlangFile(virtualFile VirtualFile) : ErlangFile in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGrapháRename Parameter moduleFile : ErlangFile to erlangFile : ErlangFile in method public fun(erlangFile ErlangFile) : String in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraph.getDeclaredIncludePaths.ContainerUtilÙChange Variable Type dep : Node to erlangModule : VirtualFile in method private buildNamesMap(erlangModules Collection<VirtualFile>) : void in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphÔRename Variable node : Node to erlangFile : ErlangFile in method private buildForHeaders(erlangHeaders Collection<VirtualFile>) : void in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphäRename Parameter deps : Collection<Node> to erlangModules : Collection<VirtualFile> in method private buildNamesMap(erlangModules Collection<VirtualFile>) : void in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphûRename Parameter globalParseTransforms : List<String> to onlyTestModules : boolean in method private getTopologicallySortedErlangFilesPaths(module Module, onlyTestModules boolean) : List<ErlangFileDescriptor> in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTaskÀChange Attribute Type myModules : Collection<ErlangFile> to myNamesToPathsMap : Map<String,String> in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphïRename Parameter modules : Collection<ErlangFile> to erlangHeaders : Collection<VirtualFile> in method private buildForHeaders(erlangHeaders Collection<VirtualFile>) : void in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphèChange Parameter Type deps : Collection<Node> to erlangModules : Collection<VirtualFile> in method private buildNamesMap(erlangModules Collection<VirtualFile>) : void in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraph°Rename Parameter globalParseTransforms : List<String> to onlyTestModules : boolean in method public createSemiGraph(module Module, onlyTestModules boolean) : ErlangFilesDependencyGraph in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraph Rename Parameter expected : T to module : Module in method protected addIncludeRoot(module Module, sourceRootName String) : VirtualFile in class org.intellij.erlang.compilation.ErlangCompilationTestBaseöChange Parameter Type modules : Collection<ErlangFile> to erlangHeaders : Collection<VirtualFile> in method private buildForHeaders(erlangHeaders Collection<VirtualFile>) : void in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphÄRename Variable moduleNames : Set<String> to dependencies : Set<String> in method private buildForHeaders(erlangHeaders Collection<VirtualFile>) : void in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphÀRename Attribute myOrderedErlangModulePaths : List<ErlangFileDescriptor> to myOrderedErlangFilePaths : List<ErlangFileDescriptor> in class org.intellij.erlang.jps.builder.ErlangModuleBuildOrderDescriptor‰Change Parameter Type fileNames : String... to fileNames : List<String> in method protected assertContains(parentPath VirtualFile, fileNames List<String>) : void in class org.intellij.erlang.compilation.ErlangCompilationTestBaseêRename Parameter isTestSourceRoot : boolean to rootType : JpsModuleSourceRootType<?> in method private addSourceRoot(module Module, sourceRootName String, rootType JpsModuleSourceRootType<?>) : VirtualFile in class org.intellij.erlang.compilation.ErlangCompilationTestBase”Rename Attribute myOrderedErlangTestModulePaths : List<ErlangFileDescriptor> to myOrderedErlangTestFilePaths : List<ErlangFileDescriptor> in class org.intellij.erlang.jps.builder.ErlangModuleBuildOrderDescriptorïChange Parameter Type isTestSourceRoot : boolean to rootType : JpsModuleSourceRootType<?> in method private addSourceRoot(module Module, sourceRootName String, rootType JpsModuleSourceRootType<?>) : VirtualFile in class org.intellij.erlang.compilation.ErlangCompilationTestBase2(e3b84c8753a21b1b15cfc9aa90b5e0c56d290f41