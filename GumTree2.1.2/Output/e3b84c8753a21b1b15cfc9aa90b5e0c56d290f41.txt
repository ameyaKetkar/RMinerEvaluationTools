
„Change Parameter Type nodes : List<String> to nodes : Collection<String> in method private getNodesByName(nodes Collection<String>) : List<Node> in class org.intellij.erlang.jps.builder.ErlangBuilder.SortedModuleDependencyGraphúRename Variable dirtyErlangModulePaths : List<String> to dirtyErlangFilePaths : List<String> in method private package buildSources(target ErlangTarget, context CompileContext, compilerOptions ErlangCompilerOptions, holder DirtyFilesHolder<ErlangSourceRootDescriptor,ErlangTarget>, outputConsumer BuildOutputConsumer, outputDir File, isTests boolean) : void in class org.intellij.erlang.jps.builder.ErlangBuilderõRename Parameter nodesName : Collection<String> to erlangModuleNames : Collection<String> in method private getPathsFromNames(erlangModuleNames Collection<String>) : List<String> in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphæRename Variable modulesCollector : Processor<VirtualFile> to filesCollector : Processor<VirtualFile> in method private package addErlangFiles(module Module, onlyTestModules boolean, erlangModules Collection<ErlangFile>, type ErlangFileType) : Collection<ErlangFile> in class org.intellij.erlang.utils.ErlangModulesUtil›Move And Rename Method package getModuleName() : String from class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangModulesSorter.Node to private getPathsFromNames(erlangModuleNames Collection<String>) : List<String> from class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphËRename Parameter node : Node to virtualFile : VirtualFile in method private getErlangFile(virtualFile VirtualFile) : ErlangFile in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraph–Rename Method private package assertSameErlangModules(moduleDescriptors List<ErlangFileDescriptor>, expectedModules String...) : void renamed to private package assertSameErlangFiles(moduleDescriptors List<ErlangFileDescriptor>, expectedModules String...) : void in class org.intellij.erlang.compilation.ErlangDependenciesResolutionTest´Rename Method public testRebuildWithNewFile() : void renamed to public testRebuildWithInclude() : void in class org.intellij.erlang.compilation.ErlangModuleCompilationTest˚Rename Parameter modules : Collection<ErlangFile> to erlangModules : Collection<VirtualFile> in method private ErlangFilesDependencyGraph(erlangModules Collection<VirtualFile>, erlangHeaders Collection<VirtualFile>, globalParseTransforms List<String>, psiManager PsiManager) in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraph◊Change Return Type List<Node> to List<String> in method public getDependencies(filePath String) : List<String> in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraph’Rename Parameter pt : String to filePath : String in method public getIn(filePath String) : Iterator<String> in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphÄChange Parameter Type modules : Collection<ErlangFile> to erlangModules : Collection<VirtualFile> in method private ErlangFilesDependencyGraph(erlangModules Collection<VirtualFile>, erlangHeaders Collection<VirtualFile>, globalParseTransforms List<String>, psiManager PsiManager) in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraph©Rename Parameter globalParseTransforms : List<String> to onlyTestModules : boolean in method public package createSemiGraph(module Module, onlyTestModules boolean) : ErlangFilesDependencyGraph in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphÌChange Parameter Type node : Node to virtualFile : VirtualFile in method private getErlangFile(virtualFile VirtualFile) : ErlangFile in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraph«Move And Rename Method public package sort(erlangModules Collection<ErlangFile>, globalParseTransforms List<String>) : List<ErlangFileDescriptor> from class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangModulesSorter to public package createSemiGraph(module Module, onlyTestModules boolean) : ErlangFilesDependencyGraph from class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphΩRename Variable moduleDescriptors : List<ErlangFileDescriptor> to fileDescriptors : List<ErlangFileDescriptor> in method private package getErlangModulePaths(target ErlangTarget, context CompileContext, dirtyFilePaths List<String>, isTest boolean) : List<String> in class org.intellij.erlang.jps.builder.ErlangBuilderÎRename Method private package getErlangModuleDescriptorFromConfig(target ErlangTarget, context CompileContext, isTests boolean) : List<ErlangFileDescriptor> renamed to private package getErlangFileDescriptorFromConfig(target ErlangTarget, context CompileContext, isTests boolean) : List<ErlangFileDescriptor> in class org.intellij.erlang.jps.builder.ErlangBuilder≥Move And Rename Method public ErlangModulesDependencyGraph(modules Collection<ErlangFile>, globalParseTransforms List<String>) from class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangModulesSorter.ErlangModulesDependencyGraph to private buildForHeaders(erlangHeaders Collection<VirtualFile>) : void from class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphÙMove And Rename Method private ErlangModulesSorter(modules Collection<ErlangFile>, globalParseTransforms List<String>) from class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangModulesSorter to private ErlangFilesDependencyGraph(erlangModules Collection<VirtualFile>, erlangHeaders Collection<VirtualFile>, globalParseTransforms List<String>, psiManager PsiManager) from class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraph»Rename Method private package addErlangModules(module Module, onlyTestModules boolean, erlangModules Collection<ErlangFile>) : Collection<ErlangFile> renamed to private package collectFiles(module Module, onlyTestModules boolean, filesCollector Processor<VirtualFile>) : void in class org.intellij.erlang.utils.ErlangModulesUtil§Move And Rename Method private buildDependencies(globalParseTransforms List<String>) : void from class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangModulesSorter.ErlangModulesDependencyGraph to private addDeclaredDependencies(erlangModule ErlangFile, dependencies Set<String>) : void from class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGrapháRename Parameter moduleFile : ErlangFile to erlangFile : ErlangFile in method public fun(erlangFile ErlangFile) : String in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraph.getDeclaredIncludePaths.ContainerUtilÙChange Variable Type dep : Node to erlangModule : VirtualFile in method private buildNamesMap(erlangModules Collection<VirtualFile>) : void in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphÊMove And Rename Method public addDependencies(deps Collection<Node>) : void from class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangModulesSorter.Node to private buildNamesMap(erlangModules Collection<VirtualFile>) : void from class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphÔRename Variable node : Node to erlangFile : ErlangFile in method private buildForHeaders(erlangHeaders Collection<VirtualFile>) : void in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphäRename Parameter deps : Collection<Node> to erlangModules : Collection<VirtualFile> in method private buildNamesMap(erlangModules Collection<VirtualFile>) : void in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphèMove And Rename Method private getModuleNodes(nodesName Collection<String>) : List<Node> from class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangModulesSorter.ErlangModulesDependencyGraph to private package getDeclaredIncludePaths(file ErlangFile) : List<String> from class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphÀChange Attribute Type myModules : Collection<ErlangFile> to myNamesToPathsMap : Map<String,String> in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphÅRename Method private package getTopologicallySortedErlangModulePaths(erlangModules Collection<ErlangFile>, globalParseTransforms List<String>) : List<ErlangFileDescriptor> renamed to private package getTopologicallySortedErlangFilesPaths(module Module, onlyTestModules boolean) : List<ErlangFileDescriptor> in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask“Rename Parameter expected : T to module : Module in method protected package addIncludeRoot(module Module, sourceRootName String) : VirtualFile in class org.intellij.erlang.compilation.ErlangCompilationTestBaseïRename Parameter modules : Collection<ErlangFile> to erlangHeaders : Collection<VirtualFile> in method private buildForHeaders(erlangHeaders Collection<VirtualFile>) : void in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphèChange Parameter Type deps : Collection<Node> to erlangModules : Collection<VirtualFile> in method private buildNamesMap(erlangModules Collection<VirtualFile>) : void in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraph¶Rename Parameter globalParseTransforms : List<String> to onlyTestModules : boolean in method private package getTopologicallySortedErlangFilesPaths(module Module, onlyTestModules boolean) : List<ErlangFileDescriptor> in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTaskËChange Return Type List<Node> to List<String> in method private package getDeclaredIncludePaths(file ErlangFile) : List<String> in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphöChange Parameter Type modules : Collection<ErlangFile> to erlangHeaders : Collection<VirtualFile> in method private buildForHeaders(erlangHeaders Collection<VirtualFile>) : void in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraph⁄Move And Rename Method private package getErlangFilePath(node Node) : String from class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangModulesSorter to private getErlangFile(virtualFile VirtualFile) : ErlangFile from class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraphÄRename Variable moduleNames : Set<String> to dependencies : Set<String> in method private buildForHeaders(erlangHeaders Collection<VirtualFile>) : void in class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangFilesDependencyGraph◊Change Parameter Type expected : T to module : Module in method protected package addIncludeRoot(module Module, sourceRootName String) : VirtualFile in class org.intellij.erlang.compilation.ErlangCompilationTestBaseÀRename Attribute myOrderedErlangModulePaths : List<ErlangFileDescriptor> to myOrderedErlangFilePaths : List<ErlangFileDescriptor> in class org.intellij.erlang.jps.builder.ErlangModuleBuildOrderDescriptor€Rename Method private getErlangModuleDescriptorFromConfig(target ErlangTarget, context CompileContext, isTests boolean) : List<ErlangFileDescriptor> renamed to private getErlangFileDescriptorFromConfig(target ErlangTarget, context CompileContext, isTests boolean) : List<ErlangFileDescriptor> in class org.intellij.erlang.jps.builder.ErlangBuilder‡Rename Method private addErlangModules(module Module, onlyTestModules boolean, erlangModules Collection<ErlangFile>) : Collection<ErlangFile> renamed to private addErlangFiles(module Module, onlyTestModules boolean, erlangModules Collection<ErlangFile>, type ErlangFileType) : Collection<ErlangFile> in class org.intellij.erlang.utils.ErlangModulesUtil¿Rename Method private assertSameErlangModules(moduleDescriptors List<ErlangFileDescriptor>, expectedModules String...) : void renamed to private assertSameErlangFiles(moduleDescriptors List<ErlangFileDescriptor>, expectedModules String...) : void in class org.intellij.erlang.compilation.ErlangDependenciesResolutionTest˘Move And Rename Method private getSortedModules() : List<ErlangFileDescriptor> from class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTask.ErlangModulesSorter to private getTopologicallySortedErlangFilesPaths(module Module, onlyTestModules boolean) : List<ErlangFileDescriptor> from class org.intellij.erlang.compilation.ErlangPrepareDependenciesCompileTaskêRename Parameter isTestSourceRoot : boolean to rootType : JpsModuleSourceRootType<?> in method private addSourceRoot(module Module, sourceRootName String, rootType JpsModuleSourceRootType<?>) : VirtualFile in class org.intellij.erlang.compilation.ErlangCompilationTestBase”Rename Attribute myOrderedErlangTestModulePaths : List<ErlangFileDescriptor> to myOrderedErlangTestFilePaths : List<ErlangFileDescriptor> in class org.intellij.erlang.jps.builder.ErlangModuleBuildOrderDescriptor∂Rename Variable modulesCollector : Processor<VirtualFile> to filesCollector : Processor<VirtualFile> in method private addErlangFiles(module Module, onlyTestModules boolean, erlangModules Collection<ErlangFile>, type ErlangFileType) : Collection<ErlangFile> in class org.intellij.erlang.utils.ErlangModulesUtilïChange Parameter Type isTestSourceRoot : boolean to rootType : JpsModuleSourceRootType<?> in method private addSourceRoot(module Module, sourceRootName String, rootType JpsModuleSourceRootType<?>) : VirtualFile in class org.intellij.erlang.compilation.ErlangCompilationTestBase‰Change Parameter Type fileNames : String... to fileNames : List<String> in method protected assertContains(parentPath VirtualFile, fileNames List<String>) : void in class org.intellij.erlang.compilation.ErlangCompilationTestBaseµRename Variable moduleDescriptors : List<ErlangFileDescriptor> to fileDescriptors : List<ErlangFileDescriptor> in method private getErlangModulePaths(target ErlangTarget, context CompileContext, dirtyFilePaths List<String>, isTest boolean) : List<String> in class org.intellij.erlang.jps.builder.ErlangBuilderîRename Variable dirtyErlangModulePaths : List<String> to dirtyErlangFilePaths : List<String> in method private buildSources(target ErlangTarget, context CompileContext, compilerOptions ErlangCompilerOptions, holder DirtyFilesHolder<ErlangSourceRootDescriptor,ErlangTarget>, outputConsumer BuildOutputConsumer, outputDir File, isTests boolean) : void in class org.intellij.erlang.jps.builder.ErlangBuilder2(e3b84c8753a21b1b15cfc9aa90b5e0c56d290f41