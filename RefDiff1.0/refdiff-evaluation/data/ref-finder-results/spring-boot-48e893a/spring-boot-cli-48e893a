extract_method("org.springframework.boot.cli%.SpringCli#main()","org.springframework.boot.cli%.SpringCli#runner()","CommandRunnerrunner=newCommandRunner(spring)runner.addCommand(newHelpCommand(runner))addServiceLoaderCommands(runner)runner.addCommand(newShellCommand())runner.addCommand(newHintCommand(runner))runner.setOptionCommands(HelpCommand.class,VersionCommand.class)runner.setHiddenCommands(HintCommand.class)runner","org.springframework.boot.cli%.SpringCli")
extract_method("org.springframework.boot.cli.command.test%.TestRunner#RunThread#run()","org.springframework.boot.cli.command.test%.TestRunner#RunThread#verify()","ClassLoadercontextClassLoader=Thread.currentThread().getContextClassLoader()Class<?>delegateClass=contextClassLoader.loadClass(DelegateTestRunner.class.getName())Class<?>resultClass=contextClassLoader.loadClass(org.junit.runner.Result)MethodrunMethod=delegateClass.getMethod(run,Class[].class,resultClass)Objectresult=resultClass.newInstance()runMethod.invoke(null,this.testClasses,result)booleanwasSuccessful=(Boolean)resultClass.getMethod(wasSuccessful).invoke(result)wasSuccessful","org.springframework.boot.cli.command.test%.TestRunner#RunThread")
