<?xml version="1.0" encoding="UTF-8"?>
<refactoringsession>
<refactoring name="RenamedClasses"> 
<parameter name= "new element">clojure.lang.Variable</parameter><parameter name= "old element">clojure.lang.Var</parameter></refactoring><refactoring name="RenamedClasses"> 
<parameter name= "new element">clojure.lang.Reference</parameter><parameter name= "old element">clojure.lang.Ref</parameter></refactoring><refactoring name="RenamedClasses"> 
<parameter name= "new element">clojure.lang.ClojureObject</parameter><parameter name= "old element">clojure.lang.Obj</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.lang.APersistentSet.isEquivalent(Object)</parameter><parameter name= "old element">clojure.lang.APersistentSet.equiv(Object)</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.asm.commons.GeneratorAdapter.popLongDouble()</parameter><parameter name= "old element">clojure.asm.commons.GeneratorAdapter.pop2()</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.lang.PersistentQueue.isEquivalent(Object)</parameter><parameter name= "old element">clojure.lang.PersistentQueue.equiv(Object)</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.lang.PersistentTreeMap.getMeta()</parameter><parameter name= "old element">clojure.lang.PersistentTreeMap.meta()</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.lang.ASeq.isEquivalent(Object)</parameter><parameter name= "old element">clojure.lang.ASeq.equiv(Object)</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.lang.PersistentStructMap.getMeta()</parameter><parameter name= "old element">clojure.lang.PersistentStructMap.meta()</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.lang.PersistentHashMap.getMeta()</parameter><parameter name= "old element">clojure.lang.PersistentHashMap.meta()</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.lang.LazySeq.isEquivalent(Object)</parameter><parameter name= "old element">clojure.lang.LazySeq.equiv(Object)</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.lang.PersistentTreeSet.getMeta()</parameter><parameter name= "old element">clojure.lang.PersistentTreeSet.meta()</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.lang.AFunction.getMeta()</parameter><parameter name= "old element">clojure.lang.AFunction.meta()</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.lang.PersistentArrayMap.getMeta()</parameter><parameter name= "old element">clojure.lang.PersistentArrayMap.meta()</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.lang.APersistentVector.isEquivalent(Object)</parameter><parameter name= "old element">clojure.lang.APersistentVector.equiv(Object)</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.lang.Symbol.getMeta()</parameter><parameter name= "old element">clojure.lang.Symbol.meta()</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.lang.APersistentMap.isEquivalent(Object)</parameter><parameter name= "old element">clojure.lang.APersistentMap.equiv(Object)</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.lang.PersistentHashSet.getMeta()</parameter><parameter name= "old element">clojure.lang.PersistentHashSet.meta()</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.lang.PersistentVector.getMeta()</parameter><parameter name= "old element">clojure.lang.PersistentVector.meta()</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.lang.ClojureObject.getMeta()</parameter><parameter name= "old element">clojure.lang.Obj.meta()</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.lang.AReference.getMeta()</parameter><parameter name= "old element">clojure.lang.AReference.meta()</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">clojure.lang.FnLoaderThunk.getMeta()</parameter><parameter name= "old element">clojure.lang.FnLoaderThunk.meta()</parameter></refactoring><refactoring name="PulledUpMethods"> 
<parameter name= "new element">clojure.asm.ObjectVisitor.visit(String, Object)</parameter><parameter name= "old element">clojure.asm.AnnotationVisitor.visit(String, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.ClojureBigInteger.equals(Object)</parameter><parameter name= "old element">clojure.lang.BigInt.equals(Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke()</parameter><parameter name= "old element">clojure.lang.IFn.invoke()</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.IFn.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.interfaces.IFn.applyTo(ISeq)</parameter><parameter name= "old element">clojure.lang.IFn.applyTo(ISeq)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.IClojureObject.withMeta(IPersistentMap)</parameter><parameter name= "old element">clojure.lang.IObj.withMeta(IPersistentMap)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.ClojureBigInteger.hashCode()</parameter><parameter name= "old element">clojure.lang.BigInt.hashCode()</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.ClojureBigInteger.fromBigInteger(BigInteger)</parameter><parameter name= "old element">clojure.lang.BigInt.fromBigInteger(BigInteger)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.ClojureBigInteger.fromLong(long)</parameter><parameter name= "old element">clojure.lang.BigInt.fromLong(long)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.ClojureBigInteger.toBigInteger()</parameter><parameter name= "old element">clojure.lang.BigInt.toBigInteger()</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.ClojureBigInteger.intValue()</parameter><parameter name= "old element">clojure.lang.BigInt.intValue()</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.ClojureBigInteger.longValue()</parameter><parameter name= "old element">clojure.lang.BigInt.longValue()</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.ClojureBigInteger.floatValue()</parameter><parameter name= "old element">clojure.lang.BigInt.floatValue()</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.ClojureBigInteger.doubleValue()</parameter><parameter name= "old element">clojure.lang.BigInt.doubleValue()</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.ClojureBigInteger.byteValue()</parameter><parameter name= "old element">clojure.lang.BigInt.byteValue()</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.ClojureBigInteger.shortValue()</parameter><parameter name= "old element">clojure.lang.BigInt.shortValue()</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">clojure.lang.ClojureBigInteger.reduceBigInt(ClojureBigInteger)</parameter><parameter name= "old element">clojure.lang.Numbers.reduceBigInt(BigInt)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.FnLoaderThunk.FnLoaderThunk(Variable, String)</parameter><parameter name= "old element">clojure.lang.FnLoaderThunk.FnLoaderThunk(Var, String)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke()</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke()</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Variable.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Var.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Namespace.refer(Symbol, Variable)</parameter><parameter name= "old element">clojure.lang.Namespace.refer(Symbol, Var)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.compareTo(Reference)</parameter><parameter name= "old element">clojure.lang.Ref.compareTo(Ref)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke()</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke()</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke()</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke()</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke()</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke()</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">clojure.lang.Reference.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</parameter><parameter name= "old element">clojure.lang.Ref.invoke(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[])</parameter></refactoring></refactoringsession>