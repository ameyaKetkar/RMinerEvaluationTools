<?xml version="1.0" encoding="UTF-8"?>
<refactoringsession>
<refactoring name="RenamedClasses"> 
<parameter name= "new element">org.atmosphere.websocket.protocol.ProtocolStreamingHttp</parameter><parameter name= "old element">org.atmosphere.websocket.protocol.StreamingHttpProtocol</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">org.atmosphere.util.Utils.getPathInfo(AtmosphereRequest)</parameter><parameter name= "old element">org.atmosphere.util.Utils.pathInfo(AtmosphereRequest)</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">org.atmosphere.util.uri.UriTemplate.matchURIAndTemplate(CharSequence, Map<String,String>)</parameter><parameter name= "old element">org.atmosphere.util.uri.UriTemplate.match(CharSequence, List<String>)</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">org.atmosphere.util.uri.UriTemplate.matchURIAndTemplate(CharSequence, Map<String,String>)</parameter><parameter name= "old element">org.atmosphere.util.uri.UriTemplate.match(CharSequence, Map<String,String>)</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">org.atmosphere.util.IOUtils.readEntirelyBody(AtmosphereResource)</parameter><parameter name= "old element">org.atmosphere.util.IOUtils.readEntirely(AtmosphereResource)</parameter></refactoring><refactoring name="RenamedMethods"> 
<parameter name= "new element">org.atmosphere.util.IOUtils.readEntirelyBodyAsString(AtmosphereResource)</parameter><parameter name= "old element">org.atmosphere.util.IOUtils.readEntirelyAsString(AtmosphereResource)</parameter></refactoring><refactoring name="PulledUpMethods"> 
<parameter name= "new element">org.atmosphere.config.AtmosphereConfigurationManager.getParamName()</parameter><parameter name= "old element">org.atmosphere.config.FrameworkConfiguration.getParamName()</parameter></refactoring><refactoring name="PulledUpMethods"> 
<parameter name= "new element">org.atmosphere.config.AtmosphereConfigurationManager.getParamValue()</parameter><parameter name= "old element">org.atmosphere.config.FrameworkConfiguration.getParamValue()</parameter></refactoring><refactoring name="PulledUpMethods"> 
<parameter name= "new element">org.atmosphere.config.AtmosphereConfigurationManager.getParamName()</parameter><parameter name= "old element">org.atmosphere.config.ApplicationConfiguration.getParamName()</parameter></refactoring><refactoring name="PulledUpMethods"> 
<parameter name= "new element">org.atmosphere.config.AtmosphereConfigurationManager.getParamValue()</parameter><parameter name= "old element">org.atmosphere.config.ApplicationConfiguration.getParamValue()</parameter></refactoring><refactoring name="PulledUpMethods"> 
<parameter name= "new element">org.atmosphere.cpr.AsynchronousProcessor.suspend(Action, AtmosphereRequest, AtmosphereResponse)</parameter><parameter name= "old element">org.atmosphere.container.BlockingIOCometSupport.suspend(Action, AtmosphereRequest, AtmosphereResponse)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.util.annotation.iterator.FileIterator.isRootFile()</parameter><parameter name= "old element">org.atmosphere.util.annotation.FileIterator.isRootFile()</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.cpr.AsynchronousProcessor.properProtocol(HttpServletRequest)</parameter><parameter name= "old element">org.atmosphere.util.Utils.properProtocol(HttpServletRequest)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.inject.InjectableObjectFactory.getInheritedPrivateMethod(Class<?>)</parameter><parameter name= "old element">org.atmosphere.util.Utils.getInheritedPrivateMethod(Class<?>)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.util.tools.IntrospectionUtils.setProperty(Object, String)</parameter><parameter name= "old element">org.atmosphere.util.IntrospectionUtils.setProperty(Object, String)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.websocket.protocol.ProtocolEcho.onMessage(WebSocket, byte[], int, int)</parameter><parameter name= "old element">org.atmosphere.websocket.protocol.EchoProtocol.onMessage(WebSocket, byte[], int, int)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.websocket.protocol.ProtocolSimpleHttp.onMessage(WebSocket, String)</parameter><parameter name= "old element">org.atmosphere.websocket.protocol.SimpleHttpProtocol.onMessage(WebSocket, String)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.util.tools.StringEscapeUtils.escapeJavaScript(String)</parameter><parameter name= "old element">org.atmosphere.util.StringEscapeUtils.escapeJavaScript(String)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.util.tools.IntrospectionUtils.setProperty(Object, String, String)</parameter><parameter name= "old element">org.atmosphere.util.IntrospectionUtils.setProperty(Object, String, String)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.util.tools.IntrospectionUtils.addProperty(Object, String, String)</parameter><parameter name= "old element">org.atmosphere.util.IntrospectionUtils.addProperty(Object, String, String)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.config.managed.ManagedAtmosphereHandler.deliver(Object, DeliverTo, DeliverTo.DELIVER_TO, AtmosphereResource)</parameter><parameter name= "old element">org.atmosphere.util.IOUtils.deliver(Object, DeliverTo, DeliverTo.DELIVER_TO, AtmosphereResource)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.cpr.ContainerInitializer.isAtmosphere(String)</parameter><parameter name= "old element">org.atmosphere.util.IOUtils.isAtmosphere(String)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.util.tools.StringEscapeUtils.escapeJavaScript(Writer, String)</parameter><parameter name= "old element">org.atmosphere.util.StringEscapeUtils.escapeJavaScript(Writer, String)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.websocket.DefaultWebSocketProcessor.firefoxWebSocketEnabled(HttpServletRequest)</parameter><parameter name= "old element">org.atmosphere.util.Utils.firefoxWebSocketEnabled(HttpServletRequest)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.util.annotation.iterator.FileIterator.getFile()</parameter><parameter name= "old element">org.atmosphere.util.annotation.FileIterator.getFile()</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.util.annotation.iterator.InputStreamIterator.next()</parameter><parameter name= "old element">org.atmosphere.util.annotation.FileIterator.next()</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.util.annotation.iterator.FileIterator.next()</parameter><parameter name= "old element">org.atmosphere.util.annotation.FileIterator.next()</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.util.annotation.iterator.InputStreamIterator.next()</parameter><parameter name= "old element">org.atmosphere.util.annotation.InputStreamIterator.next()</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.util.annotation.iterator.FileIterator.next()</parameter><parameter name= "old element">org.atmosphere.util.annotation.InputStreamIterator.next()</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.websocket.protocol.ProtocolEcho.onMessage(WebSocket, String)</parameter><parameter name= "old element">org.atmosphere.websocket.protocol.EchoProtocol.onMessage(WebSocket, String)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.websocket.protocol.ProtocolEcho.onError(WebSocket, WebSocketProcessor.WebSocketException)</parameter><parameter name= "old element">org.atmosphere.websocket.protocol.EchoProtocol.onError(WebSocket, WebSocketProcessor.WebSocketException)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.websocket.protocol.ProtocolSimpleHttp.onError(WebSocket, WebSocketProcessor.WebSocketException)</parameter><parameter name= "old element">org.atmosphere.websocket.protocol.EchoProtocol.onError(WebSocket, WebSocketProcessor.WebSocketException)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.websocket.protocol.ProtocolStreamingHttp.onError(WebSocket, WebSocketProcessor.WebSocketException)</parameter><parameter name= "old element">org.atmosphere.websocket.protocol.EchoProtocol.onError(WebSocket, WebSocketProcessor.WebSocketException)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.websocket.protocol.ProtocolSimpleHttp.configure(AtmosphereConfig)</parameter><parameter name= "old element">org.atmosphere.websocket.protocol.SimpleHttpProtocol.configure(AtmosphereConfig)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.websocket.protocol.ProtocolSimpleHttp.onMessage(WebSocket, byte[], int, int)</parameter><parameter name= "old element">org.atmosphere.websocket.protocol.SimpleHttpProtocol.onMessage(WebSocket, byte[], int, int)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.websocket.protocol.ProtocolEcho.onError(WebSocket, WebSocketProcessor.WebSocketException)</parameter><parameter name= "old element">org.atmosphere.websocket.protocol.SimpleHttpProtocol.onError(WebSocket, WebSocketProcessor.WebSocketException)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.websocket.protocol.ProtocolSimpleHttp.onError(WebSocket, WebSocketProcessor.WebSocketException)</parameter><parameter name= "old element">org.atmosphere.websocket.protocol.SimpleHttpProtocol.onError(WebSocket, WebSocketProcessor.WebSocketException)</parameter></refactoring><refactoring name="MovedMethods"> 
<parameter name= "new element">org.atmosphere.websocket.protocol.ProtocolStreamingHttp.onError(WebSocket, WebSocketProcessor.WebSocketException)</parameter><parameter name= "old element">org.atmosphere.websocket.protocol.SimpleHttpProtocol.onError(WebSocket, WebSocketProcessor.WebSocketException)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">org.atmosphere.util.uri.UriTemplate.matchURIAndTemplate(CharSequence, Map<String,String>)</parameter><parameter name= "old element">org.atmosphere.util.uri.UriTemplate.match(CharSequence, List<String>)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">org.atmosphere.websocket.protocol.ProtocolStreamingHttp.onMessage(WebSocket, byte[], int, int)</parameter><parameter name= "old element">org.atmosphere.websocket.protocol.StreamingHttpProtocol.onMessage(WebSocket, String)</parameter></refactoring><refactoring name="ChangedMethodSignatures"> 
<parameter name= "new element">org.atmosphere.websocket.protocol.ProtocolStreamingHttp.onMessage(WebSocket, String)</parameter><parameter name= "old element">org.atmosphere.websocket.protocol.StreamingHttpProtocol.onMessage(WebSocket, byte[], int, int)</parameter></refactoring></refactoringsession>