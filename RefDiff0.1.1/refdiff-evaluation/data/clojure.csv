clojure.lang.DoubleNum.add(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_inc(long)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.max(Object,double)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.ArrayNode.find(int,int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.StaticFieldExpr.emitAssign(C,ObjExpr,GeneratorAdapter,Expr)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ConstantExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.registerLocal(Symbol,Symbol,Expr,boolean)	false	false	false	0	0	8	8	null	null
clojure.asm.commons.InstructionAdapter.tconst(Type)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHashMap2.HashCollisionNode.find(int,int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.NumberExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.main(String[])	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArray.doSet(int,Object)	false	false	true	0	0	0	1	null	null
clojure.asm.commons.InstructionAdapter.ifeq(Label)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RT.list(Object,Object,Object,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.SeqEnumeration.hasMoreElements()	false	false	false	0	0	0	0	null	null
clojure.asm.ClassReader.readCode(MethodVisitor,Context,int)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RestFn0.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassWriter.newFieldItem(String,String,String)	false	false	false	0	0	2	2	null	null
clojure.lang.BytecodeCompiler.analyzeSeq(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.asm.commons.LocalVariablesSorter.newLocalMapping(Type)	false	false	false	0	0	2	2	null	null
clojure.lang.BigInt.add(BigInt)	false	false	false	0	0	1	1	null	null
clojure.lang.Murmur3.fixCollHash(int,int)	false	false	true	0	0	0	2	null	null
clojure.lang.AMapEntry.valAt(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.EnumerationSeq.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.Keyword.intern(String)	false	false	false	0	0	3	3	null	null
clojure.lang.Num.quotient(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.DynamicClassLoader.addBytecode(String,byte[])	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.invokeInsn(int,Type,Method)	false	false	false	0	0	4	4	null	null
clojure.asm.commons.GeneratorAdapter.push(Handle)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.replace(Node,Object,Object)	false	false	true	0	0	0	3	null	null
clojure.lang.PersistentArray.load()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.BlackBranchVal.val()	false	false	true	0	0	0	0	null	null
clojure.lang.IteratorSeq.first()	false	false	false	0	0	1	1	null	null
clojure.lang.LazySeq.lastIndexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.Type.getType(char[],int)	false	false	false	0	0	5	5	null	null
clojure.lang.Numbers.divide(double,double)	false	false	false	0	0	0	6	null	null
clojure.lang.PersistentHashMap.create(IPersistentMap,Object[])	true	true	false	1	1	1	1	[296da9b329a1a7f07a8a8baeed2c59439e24e889]	public
clojure.asm.MethodVisitor.visitMethodInsn(int,String,String,String)	false	false	false	0	0	18	18	null	null
clojure.asm.Label.toString()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.EmptyNode.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.KeywordExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RatioNum.equivTo(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashSet.createWithCheck(List)	false	false	false	0	0	2	2	null	null
clojure.lang.Obj.removeAttr(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.var(String,String,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LispReader.SetReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.TRef.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LockingTransaction.runInTransaction(IFn)	false	false	true	0	0	0	5	null	null
clojure.lang.Numbers.addP(long,long)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.fourth(Object)	false	false	false	0	0	2	3	null	null
org.clojure.runtime.PersistentArray.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.HostClassExpr.getHostType()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Var.pushDynamicBinding(ThreadLocalData,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassWriter.addType(String)	false	false	false	0	0	21	21	null	null
clojure.lang.PersistentQueue.pop()	false	false	false	0	0	0	2	null	null
clojure.lang.Numbers.not(int)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.store(int,Type)	false	false	false	0	0	5	5	null	null
clojure.lang.BigNum.gt(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.InvokeInstanceMemberExpr.emitHostExpr()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gte(float,float)	false	false	true	0	0	0	4	null	null
clojure.lang.LazyTransformer.listIterator(int)	false	false	false	0	0	0	0	null	null
clojure.lang.RatioNum.divide(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListMap.Tail.key()	false	false	true	0	0	0	0	null	null
clojure.asm.Frame.execute(int,int,ClassWriter,Item)	false	false	false	0	0	12	12	null	null
org.clojure.runtime.PersistentArrayMap.count()	false	false	true	0	0	0	1	null	null
clojure.lang.RestFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
org.clojure.runtime.RBSet.remove(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.TRef.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.Label.getOffset()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Reflector.invokeInstanceMember(String,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentTreeSet.withMeta(IPersistentMap)	false	false	false	0	0	0	1	null	null
clojure.lang.APersistentVector.RSeq.index()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Namespace.intern(String,String)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentQueue.iterator()	false	false	false	0	0	0	0	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.booleans(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Var.invoke(ThreadLocalData,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.visitLdcInsn(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.Attribute.getLabels()	false	false	false	0	0	1	1	null	null
clojure.lang.ThreadLocalData.getValues()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.alength(double[])	false	false	false	0	0	0	0	null	null
clojure.lang.LineNumberingPushbackReader.read()	false	false	false	0	0	1	1	null	null
clojure.lang.BytecodeCompiler.StaticMethodExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_add(long,long)	false	false	false	0	0	0	0	null	null
clojure.lang.TObj.attrs()	false	false	true	0	0	0	0	null	null
clojure.api.API.asSym(Object)	false	false	true	0	0	0	3	null	null
clojure.lang.Compiler.DefExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.min(double,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHybridMap.createHashtableMap(int)	false	false	true	0	0	0	1	null	null
clojure.asm.commons.InstructionAdapter.ushr(Type)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.BigIntOps.inc(Number)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.RestFn0.invoke(ThreadLocalData,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.RedBranch.balanceRight(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.applyTo(ISeq)	false	false	false	0	0	0	0	null	null
clojure.lang.LazyTransformer.remove(int)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentMap.containsAll(Collection)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.set(Object[])	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RBSet.Black.removeLeft(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_char.next()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.push(float)	false	false	false	0	0	0	0	null	null
clojure.lang.BigInt.multiply(BigInt)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentListMap.Tail.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongBitOps.bitOpsWith(BigIntBitOps)	false	false	true	0	0	0	0	null	null
clojure.lang.LazilyPersistentVector.ChunkedSeq.next()	false	false	true	0	0	0	0	null	null
clojure.lang.LazySeq.containsAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.emitConstant(GeneratorAdapter,int)	false	false	true	0	0	0	3	null	null
clojure.lang.Numbers.IntegerBitOps.bitOpsWith(IntegerBitOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.MapExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	1	null	null
clojure.lang.Agent.releasePendingSends()	true	true	false	1	1	1	1	[c29ccf985770f751a41f7e5728938af0316b5dfe]	public
clojure.lang.MapEntry.iterator()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnLoaderThunk.loadFn()	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentTreeMap.seq(boolean)	false	false	false	0	0	1	1	null	null
clojure.asm.commons.GeneratorAdapter.ifZCmp(int,Label)	false	false	false	0	0	6	8	null	null
org.clojure.runtime.PersistentHashtableMap.create(int,PersistentArray)	false	false	true	0	0	0	2	null	null
clojure.lang.Compiler.UnresolvedVarExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.createListMap(Object,Object)	false	false	true	0	0	0	2	null	null
clojure.lang.Num.add(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.getRootClassLoader()	false	false	true	0	0	0	3	null	null
clojure.lang.FixNum.shiftRight(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.doubleCast(int)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.IfExpr.emitStatement()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.CaseExpr.emitExpr(ObjExpr,GeneratorAdapter,Expr,boolean)	false	false	false	0	0	6	6	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.negate(Number)	false	false	false	0	0	0	0	null	null
clojure.asm.ClassReader.getItemCount()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.max(long,double)	false	false	false	0	0	0	0	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.count()	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.addP(long,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.nth(Object,int)	true	false	false	1	5	7	7	[f81e612cc9ff91ddefc1d86e270cd7f018701802, f79e724224f86d938cd6ed287355808233c899e9]	public
clojure.lang.PersistentHashMap.BitmapIndexedNode.Seq.first()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArrayMap.Iter.remove()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.quotient(Object,Object)	false	false	false	0	0	4	4	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.Node.left()	true	true	true	1	15	0	51	[7e7516821258dd51e411b51a8851c54320f64dc3]	package
clojure.lang.Compiler.VectorExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.FullNode.find(int,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Tail.put(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.CodeSizeEvaluator.visitMultiANewArrayInsn(String,int)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RatioNum.truncateBy(int)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderParser.mismatch(IntStream,int,BitSet)	false	false	true	0	0	0	0	null	null
clojure.lang.Obj.meta()	false	false	false	0	0	21	54	null	null
clojure.lang.IteratorStream.next()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.LocalVariablesSorter.remap(int,int)	false	false	true	0	0	0	2	null	null
clojure.lang.Keyword.hashCode()	false	false	false	0	0	0	0	null	null
clojure.lang.ArgVector.contains(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.AFn.throwArity()	false	false	true	0	0	0	68	null	null
clojure.lang.Delay.force()	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.equiv(double,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.AdviceAdapter.visitInvokeDynamicInsn(String,String,Handle,Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.lte(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.StringSeq.create(String)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.RBSet.RedBranchVal.val()	false	false	true	0	0	0	0	null	null
clojure.lang.Keyword.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.FixNum.divide(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.float_array(int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Reflector.invokeInstanceMember(Object,String)	false	false	false	0	0	0	1	null	null
clojure.lang.Num.gt(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Keyword.invoke(Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.TransactionalHashMap.putAll(Map)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.FnExpr.emitKeyword(GeneratorAdapter,Keyword)	false	false	true	0	0	0	1	null	null
clojure.asm.MethodVisitor.visitTypeInsn(int,String)	false	false	false	0	0	12	12	null	null
clojure.lang.FixNum.shiftLeftBy(IntegerNum)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.equiv(double,long)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.AFn.invoke(Object,Object)	false	false	true	0	0	0	3	null	null
org.clojure.runtime.PersistentListIdentityMap.Link.val()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.max(long,long)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RT.isLineNumberingReader(Reader)	false	false	true	0	0	0	1	null	null
clojure.lang.ArraySeq.ArraySeq_int.first()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.char_array(int,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.NodeIterator.hasNext()	false	false	true	0	0	0	2	null	null
clojure.lang.Compiler.QuoteExpr.hasJavaClass()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.subvec(IPersistentVector,int,int)	false	false	false	0	0	5	5	null	null
clojure.lang.Intrinsics.oa(Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerBitOps.shiftLeft(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.InstanceExpr.parse(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.num(float)	false	false	false	0	0	5	5	null	null
clojure.lang.PersistentHashtableMap.Iter.hasNext()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedByteCast(double)	false	false	false	0	0	0	0	null	null
clojure.lang.Num.truncateBigints(BigInteger,BigInteger)	false	false	true	0	0	0	3	null	null
clojure.asm.commons.AnalyzerAdapter.visitTableSwitchInsn(int,int,Label,Label[])	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.testBit(long,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object)	false	false	false	0	0	19	19	null	null
clojure.lang.Ref.validate(IFn,Object)	false	false	true	0	0	0	3	null	null
clojure.lang.BytecodeCompiler.RecurExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentQueue.Seq.count()	false	false	false	0	0	0	0	null	null
clojure.lang.LockingTransaction.doCommute(Ref,IFn,ISeq)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.compile1(GeneratorAdapter,FnExpr,Object)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.PersistentHybridIdentityMap.create(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.shortCast(byte)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.registerProtocolCallsite(Var)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.FloatOps.opsWith(DoubleOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Symbol.meta()	false	false	false	0	0	5	5	null	null
clojure.lang.PersistentVector.Seq.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.FixNum.gcd(int,int)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.gt(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerOps.isPos(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.minKey()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.supportsMeta()	false	false	false	0	0	6	6	null	null
clojure.lang.Numbers.BigIntegerOps.negate(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.index()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.methods()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentList.peek()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.gte(long,float)	false	false	true	0	0	0	0	null	null
clojure.lang.MapEntry.toString()	false	false	true	0	0	0	0	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LazilyPersistentVector.cons(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.ArrayNode.fold(IFn,IFn,IFn,IFn,IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.IntegerOps.gcd(int,int)	false	false	true	0	0	0	1	null	null
clojure.lang.BytecodeCompiler.NumExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.find(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lt(long,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.DoubleNum.gt(int)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassWriter.visitEnd()	false	false	false	0	0	0	0	null	null
clojure.asm.Frame.pop(int)	false	false	false	0	0	25	25	null	null
clojure.lang.Symbol.getNamespace()	false	false	false	0	0	7	7	null	null
clojure.lang.PersistentTree.RedBranch.balanceRight(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassReader.getItem(int)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.containsKey(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnMethod.locals()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Keyword.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.remainder(long,double)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.IfExpr.emitUnboxed(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.asm.ClassWriter.visitInnerClass(String,String,String,int)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.emitUnboxedLocal(GeneratorAdapter,LocalBinding)	false	false	true	0	0	0	3	null	null
clojure.lang.Numbers.isNeg(long)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Var.getBinding(ThreadLocalData)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.NewInstanceMethod.findMethodsWithNameAndArity(String,int,Map)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.LiteralExpr.emitExpression()	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_char.first()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.rightBalance(Object,Object,Node,Node)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.or(Object,long)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.DoubleOps.gte(Number,Number)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.max()	false	false	true	0	0	0	1	null	null
org.clojure.runtime.PersistentTree.KeyIterator.hasNext()	false	false	true	0	0	0	0	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ArrayStream.ArrayStream_long.invoke()	false	false	true	0	0	0	0	null	null
clojure.asm.MethodVisitor.visitLookupSwitchInsn(Label,int[],Label[])	false	false	false	0	0	8	8	null	null
org.clojure.runtime.RBTree.find(Object)	false	false	true	0	0	0	2	null	null
clojure.lang.RT.uncheckedShortCast(float)	false	false	false	0	0	0	0	null	null
clojure.lang.BigNum.shiftRight(int)	false	false	true	0	0	0	0	null	null
clojure.lang.LockingTransaction.doCommute(Ref,IFn)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentListIdentityMap.add(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Red.removeRight(Node)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.FixNum.divideBy(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.AFn.call()	false	false	false	0	0	0	0	null	null
clojure.lang.Accessor.invoke()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitAttribute(Attribute)	false	false	true	0	0	0	0	null	null
clojure.lang.Num.from(Object)	false	false	true	0	0	0	38	null	null
org.clojure.runtime.RT.length(Cons)	false	false	true	0	0	0	1	null	null
clojure.lang.LazySeq.isEmpty()	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.TryFinallyExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.LineNumberingPushbackReader.getColumnNumber()	false	false	false	0	0	15	15	null	null
clojure.lang.BytecodeCompiler.InstanceMethodExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.divide(float,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderLexer.mT31()	false	false	true	0	0	0	1	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Ratio.hashCode()	false	false	false	0	0	0	0	null	null
clojure.lang.XMLHandler.characters(char[],int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.Keyword.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.MapEntry.find(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.RedBranchVal.blacken()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lte(float,double)	false	false	true	0	0	0	0	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.RatioOps.opsWith(BigIntOps)	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderLexer.mCOMMENT()	false	false	true	0	0	0	1	null	null
clojure.asm.MethodWriter.readInt(byte[],int)	false	false	false	0	0	13	13	null	null
clojure.lang.PersistentVector.MutableVector.pop()	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Transaction.doCommute(TRef,IFn)	true	false	true	1	0	0	2	[32ed38ea8f0dde2b8d3ac5b489510ebd359da979]	package
clojure.lang.IteratorStream.invoke()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Reflector.getStaticField(String,String)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.MonitorExitExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.Ref.invoke(Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.shl(Type)	false	false	false	0	0	2	2	null	null
clojure.lang.BigNum.truncateBy(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unsignedShiftRight(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.RecurExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentQueue.add(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.alength(char[])	false	false	false	0	0	0	0	null	null
clojure.lang.RT.uncheckedCharCast(byte)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Link.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LetFnExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.Var.swapRoot(Object)	false	false	false	0	0	0	1	null	null
clojure.asm.commons.AnalyzerAdapter.set(int,Object)	false	false	false	0	0	6	6	null	null
clojure.lang.Compiler.LetFnExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_double.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.registerFn(FnExpr)	false	false	true	0	0	0	1	null	null
clojure.asm.MethodAdapter.visitFrame(int,int,Object[],int,Object[])	false	false	true	0	0	0	0	null	null
clojure.asm.FieldVisitor.visitEnd()	false	false	false	0	0	3	3	null	null
clojure.lang.PersistentArrayMap.valAt(Object,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.Var.internPrivate(String,String)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.add(int,double)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn1.invoke(Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.TRef.getCurrentTVal()	false	false	true	0	0	0	7	null	null
org.clojure.runtime.RBTree.remove(Node,Object,Box)	false	false	true	0	0	0	3	null	null
clojure.lang.Namespace.removeAlias(Symbol)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.Seq.reduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.invoke(Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
clojure.lang.Numbers.gt(float,long)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.isZero(long)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.TransientArrayMap.doAssoc(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.CodeSizeEvaluator.visitJumpInsn(int,Label)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Keyword.invoke(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.IntegerBitOps.andNot(Number,Number)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.RedVal.val()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.indexOf(Object)	false	false	false	0	0	6	6	null	null
clojure.lang.PersistentVector.newPath(AtomicReference,int,Node)	false	false	false	0	0	5	5	null	null
clojure.lang.ATransientMap.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.HashCollisionNode.find(int,int,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArray.iterator()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.swap()	false	false	false	0	0	1	1	null	null
clojure.asm.Type.getArgumentTypes(Method)	false	false	false	0	0	5	5	null	null
clojure.lang.Compiler.ClassExpr.hasJavaClass()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.registerVarCallsite(Var)	false	false	false	0	0	0	1	null	null
clojure.lang.Numbers.BigIntBitOps.andNot(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LocalBinding.getExpr()	false	false	true	0	0	0	2	null	null
clojure.lang.Cons.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Num.divide(BigInteger,BigInteger)	false	false	true	0	0	0	6	null	null
clojure.lang.PersistentListIdentityMap.Tail.first()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Var.getBinding()	false	false	true	0	0	0	1	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Agent.dispatch(IFn,ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.black(Object,Object,Node,Node)	false	false	false	0	0	22	22	null	null
org.clojure.runtime.PersistentTree.Black.removeRight(Node)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.Red.blacken()	false	false	true	0	0	0	0	null	null
clojure.lang.LazyTransformer.empty()	false	false	false	0	0	0	0	null	null
org.clojure.tools.TypeDump.visitField(int,String,String,String,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Util.runtimeException(Throwable)	false	false	true	0	0	0	52	null	null
org.clojure.runtime.DoubleNum.add(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.Agent.get()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.SerialVersionUIDAdder.hasSVUID()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.InstanceExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Var.getValue(ThreadLocalData)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn5.applyTo(ThreadLocalData,Cons)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.listStar(Object,Cons)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.subtract(Number,Number)	false	false	true	0	0	0	1	null	null
clojure.lang.SeqIterator.hasNext()	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.RatioOps.inc(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.AssignExpr.eval()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.remove(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.StaticInvokeExpr.getReturnType()	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentListIdentityMap.Iter.hasNext()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.dupX2()	false	false	false	0	0	5	5	null	null
clojure.lang.Var.setTag(Symbol)	false	false	false	0	0	0	1	null	null
clojure.lang.PersistentTree.KeyIterator.remove()	false	false	true	0	0	0	0	null	null
clojure.lang.LazyTransformer.containsAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentArray.valAt(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.IntegerOps.opsWith(DoubleArrayOps)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.contains(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.ReaderLexer.mDotDot()	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentHashMap2.TransientHashMap.doCount()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.Black.replace(Object,Object,Node,Node)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Node.balanceRight(Node)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.ThrowExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.Repl.main(String[])	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.CaseExpr.emitUnboxed(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RT.peekChar(Reader)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Keyword.invoke(ThreadLocalData)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.assoc(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Var.run()	false	false	false	0	0	0	0	null	null
clojure.lang.FixNum.bitNot()	false	false	true	0	0	0	0	null	null
clojure.asm.ClassAdapter.visitEnd()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListMap.remove(Object)	false	false	true	0	0	0	1	null	null
clojure.asm.Label.resolve(MethodWriter,int,byte[])	false	false	false	0	0	2	2	null	null
clojure.lang.Compiler.InstanceFieldExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.StaticMethodExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.ASeq.containsAll(Collection)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Symbol.intern(String)	false	false	true	0	0	0	1	null	null
clojure.lang.LazyTransformer.first()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.MapExpr.eval()	false	false	false	0	0	0	1	null	null
clojure.lang.IntegerNum.bitOr(Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn1.invoke(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.matchSymbol(String)	false	false	false	0	0	1	1	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.add(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.set(int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.AFn.applyTo(ISeq)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.minus(int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.arrayToList(Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.ArgVector.length()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.remove(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.box(int)	false	false	false	0	0	0	1	null	null
clojure.lang.BigInt.quotient(BigInt)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.Accessor.toString()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerBitOps.flipBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.LeafNode.key()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.Node.key()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.referenceLocal(Symbol)	false	false	false	0	0	3	3	null	null
clojure.lang.Compiler.LocalBindingExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_remainder(long,long)	false	false	true	0	0	0	0	null	null
clojure.asm.Type.getType(Method)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.equiv(long,long)	false	false	false	0	0	0	2	null	null
clojure.lang.PersistentHashMap.main(String[])	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.Black.addRight(Node)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.Black.addLeft(Node)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Keyword.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Keyword.invoke(ThreadLocalData,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Reflector.boxArgs(Class[],Object[])	false	false	true	0	0	0	4	null	null
clojure.lang.Numbers.FloatArrayOps.opsWith(BigIntegerOps)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn3.invoke(ThreadLocalData,Object,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.TransactionalHashMap.persistentMap()	false	false	true	0	0	0	15	null	null
clojure.lang.Compiler.ClassExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_byte.next()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentHybridMap.createHashtableMap(int)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.unsignedShiftRight(Object,long)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.multiply(Object,double)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentListIdentityMap.Link.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.MultiFn.isA(Object,Object)	false	false	false	0	0	2	2	null	null
clojure.lang.RatioNum.minusp()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.Black.removeRight(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.setBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.toString()	false	false	false	0	0	0	0	null	null
clojure.lang.DynamicVar.intern(Symbol)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.RBSet.Node.right()	false	false	true	0	0	0	51	null	null
clojure.asm.ClassReader.readClass(InputStream)	true	false	true	3	0	0	1	[c8d3ef3929e8049a84957002bc7e2071844bfb53]	private
clojure.lang.ChunkedCons.first()	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderParser.synpred1_fragment()	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.BigIntegerOps.divide(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.IdenticalExpr.eval()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.Iter.next()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.listIterator(int)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.iterator()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.AMap.put(Indexer,Object)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.RatioNum.longValue()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.RedBranchVal.blacken()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lte(float,float)	false	false	true	0	0	0	4	null	null
clojure.asm.commons.InstructionAdapter.invokespecial(String,String,String)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.NewInstanceExpr.msig(Method)	false	false	false	0	0	1	1	null	null
clojure.lang.RT.hashCombine(int,int)	false	false	true	0	0	0	9	null	null
clojure.lang.Numbers.DoubleOps.multiply(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.HostStaticFieldExpr.getHostType()	false	false	true	0	0	0	0	null	null
clojure.lang.BigNum.bitNot()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.mark()	false	false	false	0	0	34	34	null	null
clojure.lang.Numbers.lt(double,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LispReader.isWhitespace(int)	false	false	false	0	0	7	7	null	null
org.clojure.runtime.PersistentArray.Entry.rest()	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentTreeMap.RedBranchVal.val()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.multiply(long,float)	false	false	true	0	0	0	0	null	null
clojure.lang.ArgVector.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.StringSeq.count()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.tableSwitch(int[],TableSwitchGenerator)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableMap.Seq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.seq()	false	false	false	0	0	1	1	null	null
clojure.lang.KeywordLookupSite.install(Object)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RatioNum.plusp()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.add(int,float)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.minus(double,int)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.aset(Object,int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedByteCast(short)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.iterator()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.astore(Type)	false	false	false	0	0	8	8	null	null
clojure.lang.RT.uncheckedShortCast(long)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.Seq.first()	false	false	true	0	0	0	0	null	null
clojure.asm.FieldWriter.visitAttribute(Attribute)	false	false	false	0	0	0	0	null	null
org.clojure.tools.TypeDump.visitInnerClass(String,String,String,int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.NodeIterator.hasNext()	false	false	false	0	0	2	2	null	null
clojure.lang.BigNum.divide(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArray.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.remainder(Object,long)	false	false	false	0	0	0	0	null	null
clojure.lang.AMapEntry.asVector()	false	false	false	0	0	3	9	null	null
org.clojure.runtime.ThreadLocalData.setValues(Object[])	false	false	true	0	0	0	1	null	null
clojure.asm.commons.InstructionAdapter.iflt(Label)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentTreeMap.find(Object)	false	false	true	0	0	0	2	null	null
clojure.lang.Compiler.ObjExpr.emitListAsObjectArray(Object,GeneratorAdapter)	false	false	false	0	0	4	4	null	null
org.clojure.runtime.PersistentTree.append(Node,Node)	false	false	true	0	0	0	5	null	null
org.clojure.runtime.RBTree.iterator()	false	false	true	0	0	0	2	null	null
org.clojure.runtime.RBSet.Black.redden()	false	false	true	0	0	0	0	null	null
clojure.lang.ASeq.hasheq()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Node.getKey()	false	false	false	0	0	0	0	null	null
clojure.lang.LockingTransaction.getReadPoint()	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.shiftRight(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_short.remove()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.Link.key()	false	false	true	0	0	0	0	null	null
clojure.lang.Util.equiv(Object,double)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.namespaceFor(Symbol)	true	false	false	1	4	5	6	[edf6f303654ae113d733ee7347200143c7fdd2de]	private
clojure.lang.Numbers.category(Object)	false	false	false	0	0	2	2	null	null
clojure.lang.LazyTransformer.count()	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RatioNum.divide(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.RedVal.blacken()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.andNot(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnMethod.numParams()	false	false	false	0	0	1	3	null	null
clojure.lang.PersistentHashMap.ArrayNode.Seq.next()	false	false	false	0	0	0	0	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.aclone(short[])	false	false	false	0	0	0	0	null	null
clojure.lang.RatioNum.multiply(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.AnExpr.emitExpressionString()	false	false	true	0	0	0	4	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.MetaExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.asm.MethodAdapter.visitParameterAnnotation(int,String,boolean)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceMethod.tagClass(Object)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.Reflector.invokeInstanceMember(String,Object,Object,Object,Object,Object,Cons)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.unchecked_long_multiply(long,long)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.InstanceMethodExpr.emitUnboxed(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.MonitorEnterExpr.Parser.parse(C,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentArray.has(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnMethod.maxLocal()	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object)	false	false	false	0	0	22	22	null	null
org.clojure.runtime.PersistentTree.Seq.first()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableMap.Seq.first()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.StaticMethodExpr.emitUnboxed(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.HostExpr.maybeClass(Object,boolean)	false	false	false	0	0	8	9	null	null
clojure.lang.Compiler.StaticMethodExpr.canEmitIntrinsicPredicate()	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RT.box(float)	false	false	true	0	0	0	1	null	null
clojure.lang.BytecodeCompiler.QuoteExpr.parse(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.min(double,long)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.intValue()	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.multiply(BigInteger)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableIdentityMap.Iter.remove()	false	false	true	0	0	0	0	null	null
clojure.lang.BigInt.intValue()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.closeOver(LocalBinding,ObjMethod)	false	false	false	0	0	2	2	null	null
clojure.lang.TRef.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.RedBranch.balanceRight(Node)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.FnExpr.emitLocal(GeneratorAdapter,LocalBinding)	false	false	true	0	0	0	2	null	null
clojure.lang.APersistentSet.clear()	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_double.indexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.uncheckedIntCast(char)	false	false	false	0	0	0	0	null	null
clojure.lang.ThreadLocalData.setValues(Object[])	false	false	true	0	0	0	1	null	null
clojure.lang.BigNum.toString()	false	false	true	0	0	0	0	null	null
clojure.asm.Label.inSameSubroutine(Label)	false	false	false	0	0	1	1	null	null
clojure.lang.MultiFn.removeMethod(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.CachedSeq.first()	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.minus(Object,long)	false	false	false	0	0	1	1	null	null
clojure.asm.commons.AnalyzerAdapter.visitFrame(int,int,Object[],int,Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.create(Map)	false	false	false	0	0	0	0	null	null
clojure.lang.LazyTransformer.hasheq()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.FullNode.without(AtomicReference,int,Object,Box)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.isNeg(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.val()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.analyzeFn(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.LispReader.garg(int)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.RBSet.keys()	false	false	true	0	0	0	2	null	null
clojure.lang.Compiler.registerLocal(LocalBinding)	false	false	true	0	0	0	5	null	null
clojure.lang.Numbers.BigDecimalOps.isZero(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.DoubleNum.equivTo(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Atom.swap(IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.IntegerNum.bitXor(Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.Link.create(Object,Object,PersistentListIdentityMap)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.RT.box(short)	false	false	true	0	0	0	1	null	null
clojure.lang.ASeq.get(int)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentHybridMap.put(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.Attribute.isUnknown()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentArrayMap.Iter.hasNext()	false	false	true	0	0	0	0	null	null
clojure.lang.Agent.getQueueCount()	false	false	false	0	0	0	0	null	null
clojure.asm.MethodVisitor.visitVarInsn(int,int)	false	false	false	0	0	21	21	null	null
clojure.lang.PersistentArrayMap.contains(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Symbol.create(String)	false	false	false	0	0	0	13	null	null
org.clojure.runtime.BigNum.add(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.dec(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.BodyExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.asm.MethodWriter.visitFrame(Frame)	false	false	false	0	0	4	4	null	null
clojure.lang.Compiler.analyze(C,Object,String)	false	false	false	0	0	6	6	null	null
clojure.lang.ASeq.retainAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.LeafNode.without(AtomicReference,int,Object,Box)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.equiv(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	9	9	null	null
clojure.lang.PersistentTreeMap.RedVal.blacken()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.first()	false	false	true	0	0	0	0	null	null
clojure.asm.ClassWriter.visitField(int,String,String,String,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.minus(float)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentSet.hasheq()	false	false	false	0	0	0	0	null	null
clojure.lang.Keyword.compareTo(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Tail.add(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_boolean.hasNext()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.Red.replace(Object,Object,Node,Node)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.createAsIfByAssoc(Object[])	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.Red.addLeft(Node)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.divide(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.getTag()	false	false	false	0	0	1	1	null	null
clojure.lang.RT.meta(Object)	false	false	false	0	0	34	34	null	null
org.clojure.runtime.PersistentListIdentityMap.Link.next()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.Link.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.baseSymbol(Symbol)	false	false	true	0	0	0	6	null	null
clojure.lang.Numbers.FloatOps.equiv(Number,Number)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Tail.next()	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.AMapEntry.peek()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.aconst(Object)	false	false	false	0	0	2	2	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.create(ISeq)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.aset(boolean[],int,boolean)	false	false	false	0	0	0	0	null	null
clojure.lang.FnLoaderThunk.getRequiredArity()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.minus(double,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.BindingInit.init()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.isPrimitive(String)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.InstanceFieldExpr.emitUnboxed(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentSet.addAll(Collection)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableMap.createListMap(Object,Object)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.PersistentHashtableMap.get(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.getValue()	false	false	true	0	0	0	25	null	null
clojure.lang.PersistentTree.BlackVal.redden()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceExpr.gatherMethods(Class,Map,Map)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentTreeMap.meta()	false	false	false	0	0	6	6	null	null
clojure.lang.Keyword.applyTo(ISeq)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RatioNum.hashCode()	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderParser.expressions()	false	false	true	0	0	0	2	null	null
clojure.lang.Compiler.StaticMethodExpr.canEmitPrimitive()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.without(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.MethodExpr.emitTypedArgs(ObjExpr,GeneratorAdapter,Class[],IPersistentVector)	false	false	false	0	0	8	8	null	null
clojure.java.api.Clojure.var(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.aset(short[],int,short)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.getLineNumber(Reader)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.valAt(Object,Object)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.DoubleNum.multiply(int)	false	false	true	0	0	0	0	null	null
org.clojure.tools.TypeDump.visitAttribute(Attribute)	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.addTo(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.Ref.invoke(Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitAnnotation(String,String)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_double.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.xor(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.RatioOps.combine(Ops)	false	false	false	0	0	0	0	null	null
clojure.lang.Ref.run()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.emitStatics(ClassVisitor)	false	false	false	0	0	1	1	null	null
clojure.lang.AFn.run()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.StringExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.balanceRightDel(Object,Object,Node,Node)	false	false	true	0	0	0	2	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnMethod.emit(ObjExpr,ClassVisitor)	false	false	false	0	0	0	0	null	null
clojure.lang.TRef.hashCode()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Red.replace(Object,Object,Node,Node)	false	false	false	0	0	0	0	null	null
clojure.lang.ChunkBuffer.count()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.arrayLength()	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderParser.synpred29_fragment()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.HostExpr.emitBoxReturn(ObjExpr,GeneratorAdapter,Class)	false	false	false	0	0	10	10	null	null
clojure.lang.Tuple.length()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayList.grow()	false	false	true	0	0	0	1	null	null
clojure.lang.LispReader.CommentReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LazyTransformer.size()	false	false	false	0	0	0	0	null	null
clojure.lang.Keyword.call()	false	false	false	0	0	0	0	null	null
clojure.lang.Transaction.getNextPoint()	false	false	true	0	0	0	2	null	null
clojure.lang.RT.booleanCast(Object)	false	false	false	0	0	38	38	null	null
clojure.lang.PersistentListMap.Link.remove(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.FloatArrayOps.opsWith(IntegerOps)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.invoke(Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
clojure.asm.commons.InstructionAdapter.putstatic(String,String,String)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.createParamBinding(Symbol)	false	false	true	0	0	0	4	null	null
clojure.lang.PersistentTree.Black.replace(Object,Object,Node,Node)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RatioNum.multiply(BigInteger)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentArrayMap.Seq.getValue()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LocalBindingExpr.emitUnboxed(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	3	3	null	null
clojure.lang.PersistentVector.MutableVector.assoc(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderLexer.mT30()	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.gt(long,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHashSet.withMeta(IPersistentMap)	false	false	false	0	0	1	1	null	null
clojure.asm.MethodVisitor.visitAnnotationDefault()	false	false	false	0	0	2	2	null	null
clojure.asm.ClassReader.readInt(int)	false	false	false	0	0	50	50	null	null
clojure.lang.TRef.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.LocalVariablesSorter.newLocal(Type)	true	false	false	1	0	0	0	[c8d3ef3929e8049a84957002bc7e2071844bfb53]	public
clojure.lang.EdnReader.readToken(PushbackReader,char)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.RestFn1.applyTo(ThreadLocalData,Cons)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.Black.addRight(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.equivTo(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.setMeta(IPersistentMap)	false	false	false	0	0	4	4	null	null
clojure.lang.Numbers.unchecked_minus(double)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.box(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LocalBinding.emitDeclaration(String)	false	false	true	0	0	0	4	null	null
clojure.lang.DynamicVar.popThreadBindings()	false	false	true	0	0	0	9	null	null
clojure.lang.Numbers.divide(Object,Object)	false	false	false	0	0	6	8	null	null
clojure.lang.RatioNum.toString()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayIdentityMap.create(Object[])	true	true	true	2	0	0	0	[ae623590ccb2fd017d67637b2f52e747b9b4ad73]	package
clojure.lang.Numbers.LongBitOps.shiftRight(Number,int)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.MonitorEnterExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.remainder(double,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListMap.key()	false	false	true	0	0	0	0	null	null
clojure.asm.ClassReader.readMethod(ClassVisitor,Context,int)	false	false	false	0	0	1	1	null	null
clojure.lang.ReaderLexer.reportError(RecognitionException)	false	false	true	0	0	0	0	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.compile(Reader,String,String)	true	false	false	1	1	1	1	[dbb85aafafc90a9b6021ef58c5cd4bd8a20600fc]	public
clojure.asm.MethodAdapter.visitTryCatchBlock(Label,Label,Label,String)	false	false	true	0	0	0	4	null	null
clojure.asm.commons.Method.toString()	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentSet.isEmpty()	false	false	false	0	0	0	0	null	null
clojure.lang.Keyword.invoke(Object,Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RestFn0.invoke(ThreadLocalData,Object,Object,Object,Object,Object,Cons)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassVisitor.visitAnnotation(String,boolean)	true	true	false	1	3	3	3	[c8d3ef3929e8049a84957002bc7e2071844bfb53]	public
clojure.lang.ArgVector.cons(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListMap.Tail.rest()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.maxKey()	false	false	true	0	0	0	2	null	null
org.clojure.runtime.RT.box(int)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentHashtableMap.assoc(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListMap.Link.val()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gte(Object,double)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RatioNum.toString()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Black.removeLeft(Node)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.isNeg(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.flipBit(long,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.and(int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.getCompilerOption(Keyword)	false	false	false	0	0	1	1	null	null
clojure.lang.TRef.popThreadBinding()	false	false	true	0	0	0	14	null	null
clojure.lang.RestFn1.invoke(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassWriter.visitAnnotation(String,boolean)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.and(Object,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceMethod.numParams()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.LocalBindingExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedLongCast(float)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.DoubleArrayOps.opsWith(RatioOps)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.BlackBranchVal.val()	false	false	true	0	0	0	0	null	null
clojure.lang.Reflector.isCongruent(Class[],Object[])	false	false	false	0	0	2	2	null	null
clojure.lang.TRef.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	10	null	null
clojure.lang.Util.equiv(char,char)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.ops(Object)	false	false	false	0	0	42	42	null	null
clojure.lang.PersistentArray.main(String[])	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.TransientHashMap.doValAt(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnMethod.getReturnType()	false	false	false	0	0	5	5	null	null
clojure.lang.PersistentArrayMap.create(Object[])	false	false	false	0	0	3	3	null	null
clojure.lang.Compiler.NilExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	3	3	null	null
clojure.asm.Type.getArgumentTypes(String)	false	false	false	0	0	13	13	null	null
clojure.lang.Numbers.setBit(long,long)	false	false	false	0	0	3	3	null	null
clojure.lang.PersistentVector.remove(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.minus(int,float)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerOps.multiply(Number,Number)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.DefExpr.includesExplicitMetadata(MapExpr)	false	false	false	0	0	0	2	null	null
clojure.lang.Util.hasheq(Object)	true	false	false	1	8	3	9	[93505932f782f6de94b7b9a06a5b6dfd884c7d8b]	public
clojure.lang.Numbers.inc(int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.BlackBranch.right()	false	false	true	0	0	0	0	null	null
clojure.lang.MultiFn.reset()	false	false	false	0	0	0	0	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.CaseExpr.Parser.parse(C,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.add(int,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Var.invoke(Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitIincInsn(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.aset(byte[],int,byte)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RT.setValues(Object[])	false	false	true	0	0	0	9	null	null
clojure.lang.ReaderLexer.mMethodIdentifier()	false	false	true	0	0	0	1	null	null
clojure.asm.ClassVisitor.visitInnerClass(String,String,String,int)	false	false	false	0	0	2	2	null	null
clojure.lang.AFn.invoke()	false	false	false	0	0	2	5	null	null
clojure.lang.LazySeq.listIterator(int)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.TransientHashMap.doPersistent()	false	false	true	0	0	0	0	null	null
clojure.lang.AMapEntry.setValue(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.IteratorSeq.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.BigNum.doubleValue()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.resourceAsStream(ClassLoader,String)	false	false	false	0	0	2	2	null	null
clojure.lang.Util.ret1(Object,Object)	false	false	false	0	0	3984	3984	null	null
clojure.asm.MethodAdapter.visitTypeInsn(int,String)	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.UnquoteReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LockingTransaction.doGet(Ref)	false	false	false	0	0	2	2	null	null
clojure.lang.LazySeq.contains(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHybridMap.createArrayMap()	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentVector.meta()	false	false	false	0	0	8	8	null	null
clojure.lang.Util.equivPred(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.FnMethod.doEmitStatic(ObjExpr,ClassVisitor)	false	false	false	0	0	1	1	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.put(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Ref.invoke(Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Var.meta()	false	false	true	0	0	0	2	null	null
clojure.lang.Ref.pushThreadBinding(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.RedBranch.blacken()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArray.Seq.first()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.HashCollisionNode.editAndSet(AtomicReference,int,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.LispReader.ArgVectorReader.invoke(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.AReference.resetMeta(IPersistentMap)	false	false	false	0	0	1	1	null	null
clojure.lang.RatioNum.oneMinus()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.ifNull(Label)	false	false	false	0	0	1	2	null	null
clojure.lang.Numbers.unchecked_multiply(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.TRef.pushThreadBinding(T)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.TransientVector.arrayFor(int)	false	false	false	0	0	1	2	null	null
clojure.lang.PersistentHashMap2.entryAt(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LineNumberingPushbackReader.atLineStart()	false	false	false	0	0	0	0	null	null
clojure.lang.TVal.push(Object,Info)	false	false	true	0	0	0	2	null	null
clojure.lang.Compiler.AnExpr.getHostType()	false	false	true	0	0	0	1	null	null
clojure.lang.APersistentSet.get(Object)	false	false	false	0	0	1	1	null	null
clojure.asm.Type.getMethodType(Type,Type[])	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Transaction.tref(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.LispReader.QuoteReader.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.test.ReflectorTryCatchFixture.failWithCause(Double)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.Seq.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.RatioOps.isZero(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.longs(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LispReader.readToken(PushbackReader,char)	true	false	false	1	2	3	3	[91b5515ecf44af1140d4d8293b8b55cd73a9336a]	private
clojure.lang.Compiler.IfExpr.emitReturn()	false	false	true	0	0	0	0	null	null
clojure.asm.MethodAdapter.visitMaxs(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.Node.val()	false	false	true	0	0	0	48	null	null
clojure.lang.PersistentListIdentityMap.Tail.next()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.add(long,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.LispReader.CtorReader.readRecord(PushbackReader,Symbol)	false	false	false	0	0	1	1	null	null
clojure.lang.RT.readRet(int)	false	false	false	0	0	2	2	null	null
clojure.lang.Compiler.CharExpr.val()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.getAndIncLocalNum()	false	false	false	0	0	7	7	null	null
clojure.lang.Compiler.IdenticalExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigDecimalOps.lte(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigDecimalOps.opsWith(FloatArrayOps)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitLookupSwitchInsn(Label,int[],Label[])	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ConstantExpr.Parser.parse(C,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_byte.first()	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.removeAll(Collection)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Num.from(Object)	false	false	true	0	0	0	22	null	null
clojure.lang.Compiler.ObjExpr.cachedVarName(int)	false	false	false	0	0	0	3	null	null
org.clojure.runtime.PersistentListIdentityMap.find(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Reflector.getStaticField(String,String)	true	false	false	1	0	0	1	[36868a7734f15c51eb1831aa9d72a14544496987]	public
clojure.lang.Compiler.BodyExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.BitmapIndexedNode.nodeSeq()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedIntCast(short)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.registerKeywordCallsite(Keyword)	false	false	false	0	0	1	1	null	null
clojure.lang.StringSeq.index()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.lt(int,float)	false	false	true	0	0	0	0	null	null
clojure.lang.MapEntry.containsKey(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Seq.create(Node,boolean,int)	false	false	false	0	0	3	3	null	null
clojure.lang.Compiler.lookupVar(Symbol,boolean)	true	false	false	1	3	3	4	[d69c32394d06f75e32bdbeafd37e7b1b5b6da351, 4c38b36cfb0fef594f06484cfaf99fb6a0b676de]	package
clojure.lang.RT.list(Object,Object)	false	false	false	0	0	19	19	null	null
clojure.asm.ClassReader.readUnsignedShort(int)	false	false	false	0	0	103	103	null	null
clojure.lang.Numbers.divide(int,float)	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayStream.ArrayStream_byte.next()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.without(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentHashMap.LeafNode.without(int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.BooleanExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.lt(long,double)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.aget(long[],int)	false	false	false	0	0	0	0	null	null
clojure.lang.EdnReader.UnmatchedDelimiterReader.invoke(Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.TransientHashMap.ensureEditable()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.valAt(Object,Object)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentListMap.Link.create(Object,Object,PersistentListMap)	false	false	true	0	0	0	2	null	null
clojure.lang.BigInt.shortValue()	false	false	false	0	0	0	0	null	null
clojure.lang.LazilyPersistentVector.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.asm.MethodVisitor.visitMaxs(int,int)	false	false	false	0	0	7	7	null	null
clojure.lang.PersistentArray.set(int,Object)	false	false	true	0	0	0	6	null	null
org.clojure.runtime.RBTree.KeyIterator.hasNext()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RatioNum.equals(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.rest()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.Red.removeLeft(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_byte.reduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Ratio.toString()	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_byte.reduce(IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.floatValue()	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderParser.listExpression()	false	false	true	0	0	0	2	null	null
org.clojure.runtime.FixNum.addTo(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.Ref.deref()	false	false	false	0	0	9	9	null	null
clojure.lang.Numbers.add(Number,Number)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.Transaction.set2(TRef,Object)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.Symbol.toString()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashtableIdentityMap.Iter.next()	false	false	true	0	0	0	0	null	null
clojure.lang.Ref.setValidator(IFn)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.quotient(Object,double)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.VarExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.longCast(int)	false	false	false	0	0	1	1	null	null
clojure.lang.RT.list()	false	false	false	0	0	0	0	null	null
clojure.lang.LispReader.isUnquote(Object)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentTree.replace(Node,Object,Object)	false	false	true	0	0	0	3	null	null
clojure.lang.PersistentQueue.withMeta(IPersistentMap)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.StaticInvokeExpr.emitUnboxed(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	1	1	null	null
clojure.java.api.Clojure.var(Object,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.RestFn0.invoke(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.vals()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.remove(int)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.TheVarExpr.Parser.parse(C,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Actor.send(IFn,ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArray.ValIter.hasNext()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.charCast(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.alength(boolean[])	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.BooleanExpr.val()	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.lastIndexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.create(AtomicReference,int,INode,int,Object,Object,Box)	false	false	true	0	0	0	4	null	null
clojure.lang.Compiler.ThrowExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.assoc(Object,Object,Object)	false	false	false	0	0	14	16	null	null
clojure.lang.ArraySeq.ArraySeq_short.lastIndexOf(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentArrayMap.find(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.ensureEditable(AtomicReference)	false	false	false	0	0	3	3	null	null
clojure.lang.Compiler.NewInstanceExpr.emitMethods(ClassVisitor)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.invokeVirtual(Type,Method)	false	false	false	0	0	17	17	null	null
org.clojure.runtime.PersistentHashtableMap.doPut(int,Object,Object,PersistentArray)	false	false	true	0	0	0	3	null	null
clojure.lang.EdnReader.read1(Reader)	false	false	false	0	0	15	15	null	null
clojure.lang.EdnReader.nonConstituent(int)	false	false	false	0	0	2	2	null	null
clojure.lang.ASeq.hashCode()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.emitListAsObjectArray(Object,GeneratorAdapter)	false	false	true	0	0	0	3	null	null
clojure.api.API.read(String)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.emitConstants(GeneratorAdapter)	true	false	true	1	2	0	2	[9723a7b5d693bec38dc57269b423094ababa9dd1]	package
clojure.lang.Compiler.LocalBinding.needsBox()	false	false	true	0	0	0	7	null	null
clojure.lang.Compiler.registerVar(TRef)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.RatioOps.normalizeRet(Number,Number,Number)	false	false	false	0	0	5	5	null	null
clojure.asm.MethodWriter.visitFrame(int,int,Object[],int,Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.Var.doReset(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.AnalyzerAdapter.visitMaxs(int,int)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.Red.addLeft(Node)	true	true	true	1	0	0	0	[7e7516821258dd51e411b51a8851c54320f64dc3]	package
clojure.lang.LazySeq.rest()	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentArray.Seq.first()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.iinc(int,int)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.analyzeLetStar(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.LocalBindingExpr.emitAssign(C,ObjExpr,GeneratorAdapter,Expr)	false	false	false	0	0	0	0	null	null
clojure.lang.ArrayStream.ArrayStream_double.next()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.doInit()	true	false	false	2	0	0	0	[5c97b610426556b6d032084f1dc601e85000f829]	package
clojure.lang.RT.loadResourceScript(String)	true	false	false	1	0	0	5	[5c97b610426556b6d032084f1dc601e85000f829, ab789fc2a395d19c1a8670765578fcda736e121c]	public
clojure.asm.commons.InstructionAdapter.lcmp()	false	false	false	0	0	1	1	null	null
org.clojure.runtime.FixNum.multiply(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.find(int,int,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.dupX1()	false	false	false	0	0	1	1	null	null
org.clojure.runtime.BigNum.equiv(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.IntegerNum.bitAnd(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.reduce(long)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentList.EmptyList.add(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Link.get(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.boolean_array(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentArrayMap.Seq.first()	false	false	true	0	0	0	0	null	null
clojure.asm.MethodVisitor.visitLineNumber(int,Label)	false	false	false	0	0	24	24	null	null
clojure.lang.BytecodeCompiler.DefExpr.eval()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.AnExpr.emitReturn()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.IfExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.Method.getMethod(String,boolean)	false	false	false	0	0	1	1	null	null
clojure.lang.ArraySeq.ArraySeq_short.next()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListMap.find(Object)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.DoubleNum.hashCode()	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberSymbol.invoke()	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_double.remove()	false	false	false	0	0	0	0	null	null
clojure.lang.LispReader.BackquoteReader.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.AdviceAdapter.popValue()	false	false	false	0	0	33	48	null	null
clojure.lang.PersistentHashMap2.asTransient()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListMap.equalKey(Object,Object)	false	false	true	0	0	0	8	null	null
clojure.lang.RT.isLineNumberingReader(Reader)	false	false	false	0	0	1	1	null	null
clojure.lang.TRef.compareTo(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RatioNum.addTo(int)	false	false	true	0	0	0	3	null	null
clojure.lang.RT.intCast(char)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitLabel(Label)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.TryFinallyExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnMethod.classChar(Object)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.Reflector.getMethods(Class,int,String,boolean)	false	false	true	0	0	0	2	null	null
clojure.lang.Ref.invoke()	false	false	false	0	0	2	2	null	null
clojure.lang.BytecodeCompiler.BodyExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Seq.count()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.cons(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.TryFinallyExpr.Parser.parse(C,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.EdnReader.isMacro(int)	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.add(long,double)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.AHostExpr.emitExpression()	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_long.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.MapEntry.Iter.next()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerOps.opsWith(DoubleArrayOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Module.findRef(String)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.BitmapIndexedNode.editAndSet(AtomicReference,int,Object)	false	false	true	0	0	0	3	null	null
clojure.lang.PersistentVector.pushTail(int,Node,Node)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.BigNum.equivTo(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.hasTag(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.AnalyzerAdapter.execute(int,int,String)	false	false	false	0	0	10	10	null	null
clojure.lang.Numbers.IntegerBitOps.or(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.MonitorEnterExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.cloneAndSet(Object[],int,Object)	false	false	false	0	0	4	4	null	null
clojure.lang.Compiler.AssignExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Module.findModule(String)	false	false	true	0	0	0	2	null	null
clojure.lang.AMapEntry.nth(int)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.gt(float,double)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.Node.balanceLeft(Node)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.AMap.get(Indexer)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.Var.setThreadBinding(Binding)	false	false	true	0	0	0	2	null	null
clojure.lang.RT.intCast(short)	false	false	false	0	0	0	0	null	null
clojure.lang.AMapEntry.cons(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.createNode(AtomicReference,int,Object,Object,int,Object,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.DynamicVar.create()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.object_array(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.quotient(Number,Number)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.create(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentHashMap2.empty()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.IntegerOps.isNeg(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.AndExpr.emitStatement()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.count()	false	false	false	0	0	39	58	null	null
clojure.lang.RT.first(Object)	false	false	false	0	0	37	37	null	null
clojure.lang.DoubleNum.addTo(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.remainder(long,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.AGenerator.get()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lte(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.ArrayNode.kvreduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.RatioOps.opsWith(BigIntegerOps)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	11	11	null	null
clojure.lang.LineNumberingPushbackReader.unread(int)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentStructMap.createSlotMap(ISeq)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.aget(Object,int)	false	false	true	0	0	0	0	null	null
clojure.asm.MethodWriter.visitVarInsn(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.without(AtomicReference,int,Object,Box)	false	false	true	0	0	0	0	null	null
clojure.lang.ExceptionInfo.getData()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.SerialVersionUIDAdder.writeItems(Collection,DataOutputStream,boolean)	false	false	true	0	0	0	3	null	null
clojure.lang.RT.list(Object,Object,Object,Object)	false	false	false	0	0	0	2	null	null
clojure.lang.LazyTransformer.createMulti(IFn,Object[])	false	false	false	0	0	0	0	null	null
org.clojure.runtime.BigNum.plusp()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.constants()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.rrest(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.ArraySeq.ArraySeq_float.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_multiply(long,long)	false	false	false	0	0	0	0	null	null
clojure.lang.Reflector.getMethods(Class,int,String,boolean)	false	false	false	0	0	8	8	null	null
clojure.lang.Compiler.NewInstanceExpr.considerMethod(Method,Map)	false	false	false	0	0	2	2	null	null
clojure.asm.commons.GeneratorAdapter.endMethod()	false	false	false	0	0	22	22	null	null
clojure.lang.LazyTransformer.hashCode()	false	false	false	0	0	0	0	null	null
clojure.lang.RT.aget(double[],int)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.KeyIterator.hasNext()	false	false	false	0	0	0	0	null	null
clojure.lang.KeywordLookupSite.fault(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.visitInsn(int)	false	false	false	0	0	0	0	null	null
clojure.lang.ArrayChunk.dropFirst()	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn1.invoke(Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.call()	false	false	false	0	0	0	0	null	null
clojure.lang.DynamicVar.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.dec(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.FloatOps.isNeg(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Link.key()	false	false	true	0	0	0	0	null	null
clojure.asm.AnnotationVisitor.visitArray(String)	false	false	false	0	0	3	3	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.without(int,Object)	true	false	true	1	0	0	0	[eedcf35479737ab1136e3b8a00b2759190a73fdb]	public
clojure.lang.Numbers.lte(Object,double)	false	false	false	0	0	0	0	null	null
clojure.asm.ClassAdapter.visitInnerClass(String,String,String,int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentQueue.count()	false	false	false	0	0	2	5	null	null
clojure.lang.Numbers.reduce(Number)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentListIdentityMap.Link.first()	false	false	true	0	0	0	0	null	null
clojure.lang.LazilyPersistentVector.assocN(int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHybridMap.remove(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gt(double,double)	false	false	false	0	0	0	6	null	null
org.clojure.runtime.BigNum.multiply(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.RSeq.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_double.reduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderParser.synpred1()	false	false	true	0	0	0	18	null	null
clojure.lang.LazyTransformer.removeAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.TryFinallyExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LetExpr.emit(C,ObjExpr,GeneratorAdapter)	true	false	false	1	0	0	0	[c37c15c81a299c617779bff738480b1a2fb45524]	public
clojure.lang.PersistentHashMap.ArrayNode.pack(AtomicReference,int)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentTreeMap.RedBranch.blacken()	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentMap.toArray()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.InstanceMethodExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.SyntaxQuoteReader.syntaxQuote(Object)	false	false	false	0	0	3	3	null	null
clojure.lang.Compiler.LocalBindingExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	5	5	null	null
clojure.lang.Compiler.registerKeyword(Keyword)	false	false	false	0	0	1	3	null	null
clojure.lang.ATransientSet.count()	false	false	false	0	0	0	0	null	null
clojure.asm.ClassReader.readField(ClassVisitor,Context,int)	false	false	false	0	0	1	1	null	null
clojure.lang.BytecodeCompiler.FnExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.Seq.first()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.emitTypedArgs(Class[],PersistentArrayList,boolean)	false	false	true	0	0	0	3	null	null
clojure.lang.ArraySeq.ArraySeq_byte.next()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.seq()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.findIndex(Object)	false	false	false	0	0	6	6	null	null
clojure.lang.ArraySeq.ArraySeq_int.reduce(IFn)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.RedBranch.right()	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderLexer.mT33()	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentListMap.Link.key()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.HashCollisionNode.assoc(AtomicReference,int,int,Object,Object,Box)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.minus(double,double)	false	false	false	0	0	5	6	null	null
clojure.asm.commons.InstructionAdapter.tableswitch(int,int,Label,Label[])	false	false	false	0	0	1	1	null	null
clojure.lang.Range.stream()	false	false	true	0	0	0	0	null	null
clojure.asm.MethodWriter.writeFrame()	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHashMap.fold(long,IFn,IFn,IFn,IFn,IFn,IFn)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.FixNum.truncateDivide(ThreadLocalData,Num)	false	false	true	0	0	0	0	null	null
clojure.lang.LazyTransformer.create(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntOps.remainder(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.gcd(long,long)	false	false	false	0	0	1	1	null	null
clojure.lang.ArrayStream.ArrayStream_short.invoke()	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayStream.ArrayStream_boolean.next()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArray.get(int)	false	false	true	0	0	0	15	null	null
clojure.asm.Type.getDescriptor(Class)	false	false	false	0	0	3	3	null	null
clojure.lang.BytecodeCompiler.InstanceFieldExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	12	null	null
clojure.lang.BytecodeCompiler.registerKeyword(Keyword)	false	false	true	0	0	0	1	null	null
clojure.asm.MethodVisitor.visitEnd()	false	false	false	0	0	4	4	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.IntegerBitOps.xor(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.ThreadLocalData.main(String[])	false	false	true	0	0	0	0	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.formatAesthetic(Writer,Object)	false	false	false	0	0	1	1	null	null
clojure.asm.Item.set(int,int)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.minus(Object,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Ref.getMaxHistory()	false	false	false	0	0	0	0	null	null
clojure.lang.Num.multiply(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Reflector.invokeInstanceMember(String,Object,Object,Object,Object,Object,Object[])	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentVector.ChunkedSeq.chunkedMore()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.AnalyzerAdapter.visitJumpInsn(int,Label)	false	false	false	0	0	0	0	null	null
clojure.lang.LazilyPersistentVector.nth(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.findSingleConstructor(Class,PersistentArrayList)	false	false	true	0	0	0	1	null	null
clojure.lang.ChunkedCons.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.aclone(float[])	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.IntegerOps.opsWith(BigIntegerOps)	false	false	true	0	0	0	0	null	null
clojure.asm.MethodAdapter.visitJumpInsn(int,Label)	false	false	true	0	0	0	6	null	null
clojure.asm.Item.set(int,String,String,String)	false	false	false	0	0	14	14	null	null
org.clojure.runtime.PersistentArrayMap.get(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LazySeq.addAll(Collection)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RestFn4.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.HostExpr.parse(C,ISeq)	true	false	true	1	1	0	1	[b6cdf89042b44d0665ea760e8ab596c26817827e]	public
clojure.asm.commons.EmptyVisitor.visitMethodInsn(int,String,String,String)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.AFn.invoke(ThreadLocalData,Object,Object,Object,Object,Object,Cons)	false	false	true	0	0	0	1	null	null
clojure.lang.LazyTransformer.contains(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.IntegerOps.lt(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.InstanceFieldExpr.canEmitPrimitive()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Iter.next()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArray.load()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.FloatOps.opsWith(RatioOps)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.oneMinus()	false	false	true	0	0	0	0	null	null
clojure.asm.MethodAdapter.visitEnd()	false	false	true	0	0	0	0	null	null
clojure.lang.DynamicClassLoader.defineClass(String,byte[])	false	false	true	0	0	0	3	null	null
clojure.lang.DoubleNum.floatValue()	false	false	true	0	0	0	0	null	null
clojure.lang.Transaction.statusTransition(TStamp,Status)	false	false	true	0	0	0	5	null	null
clojure.lang.Numbers.IntegerOps.isZero(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.AMapEntry.seq()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.Seq.index()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.emitLocal(GeneratorAdapter,LocalBinding)	false	false	true	0	0	0	4	null	null
clojure.lang.TRef.commute(IFn)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArray.RSeq.index()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.Black.removeRight(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.CharacterReader.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.LeafNode.assoc(AtomicReference,int,int,Object,Object,Box)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.invoke()	true	false	false	1	0	2	2	[8a628fcd1b1e015ef61272df128cf4cbfa323259]	public
org.clojure.runtime.PersistentListMap.val()	false	false	true	0	0	0	0	null	null
clojure.asm.ClassReader.accept(ClassVisitor,Attribute[],int)	true	false	false	4	1	1	1	[c8d3ef3929e8049a84957002bc7e2071844bfb53]	public
clojure.asm.commons.AdviceAdapter.visitMethodInsn(int,String,String,String)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.quotient(long,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableMap.bucketFor(Object,PersistentArray)	false	false	true	0	0	0	5	null	null
clojure.lang.RT.doubleCast(double)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.createNode(int,Object,Object,int,Object,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.XMLHandler.ignorableWhitespace(char[],int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHybridIdentityMap.createHashtableMap(Object[])	false	false	true	0	0	0	0	null	null
org.clojure.tools.TypeDump.internalName(Type)	false	false	true	0	0	0	3	null	null
clojure.lang.Numbers.OpsP.addP(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeSet.seq(boolean)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.box(float)	false	false	false	0	0	0	1	null	null
clojure.lang.Compiler.CompilerException.toString()	false	false	false	0	0	0	0	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.Black.addLeft(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentStructMap.makeNew(IPersistentMap,Def,Object[],IPersistentMap)	false	false	false	0	0	4	4	null	null
clojure.lang.RT.getFrom(Object,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHashMap2.BitmapIndexedNode.without(AtomicReference,int,int,Object,Box)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.opsWith(DoubleOps)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.classForName(String)	false	false	false	0	0	10	13	null	null
org.clojure.runtime.RBTree.Node.left()	false	false	true	0	0	0	51	null	null
clojure.lang.PersistentArrayMap.TransientArrayMap.indexOf(Object)	false	false	false	0	0	3	3	null	null
clojure.lang.Compiler.HostExpr.tagToClass(Symbol)	false	false	true	0	0	0	4	null	null
clojure.lang.RT.listStar(Object,ISeq)	false	false	false	0	0	0	1	null	null
clojure.lang.Numbers.FloatOps.divide(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.TRef.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.RT.compile(String)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.unchecked_divide(long,long)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongBitOps.clearBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Keyword.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Namespace.referenceClass(Symbol,Class)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RT.listStar(Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	2	null	null
clojure.lang.ArraySeq.ArraySeq_byte.lastIndexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.gt(Object,Object)	false	false	false	0	0	3	8	null	null
org.clojure.tools.TypeDump.visit(int,int,String,String,String,String[])	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.shiftLeft(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LazilyPersistentVector.createOwning(Object[])	false	false	false	0	0	4	4	null	null
clojure.lang.Symbol.hashCode()	false	false	false	0	0	1	2	null	null
clojure.lang.Compiler.ObjMethod.emitClearLocalsOld(GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntOps.negate(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.BigNum.bitOrBy(IntegerNum)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.NodeIterator.remove()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.loadInsn(Type,int)	false	false	false	0	0	4	4	null	null
clojure.lang.BytecodeCompiler.registerLocal(LocalBinding)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.RBSet.BlackBranch.left()	false	false	true	0	0	0	0	null	null
clojure.lang.LockingTransaction.abort()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.ensureEditable(AtomicReference)	false	false	false	0	0	5	5	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object,Object,Object[])	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.RedBranch.blacken()	false	false	true	0	0	0	0	null	null
clojure.lang.Var.setValidator(IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.TransientHashMap.doPersistent()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigDecimalOps.equiv(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntBitOps.shiftRight(Number,int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.BlackBranch.right()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.add(long,long)	false	false	false	0	0	1	2	null	null
clojure.lang.Compiler.getLookupThunk(Object,Keyword)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.vals()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.mask(int,int)	false	false	true	0	0	0	1	null	null
clojure.asm.Type.getType(String)	false	false	false	0	0	8	8	null	null
clojure.lang.Ref.fn()	false	false	false	0	0	22	22	null	null
clojure.lang.ProxyHandler.invoke(Object,Method,Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.SubVector.empty()	false	false	false	0	0	0	0	null	null
clojure.asm.MethodAdapter.visitCode()	false	false	true	0	0	0	21	null	null
clojure.lang.Atom.swap(IFn,Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.remove(Object)	false	false	true	0	0	0	1	null	null
clojure.asm.commons.InstructionAdapter.ificmpeq(Label)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHashMap2.BitmapIndexedNode.find(int,int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.SubVector.nth(int)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.RedBranch.left()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_multiply(long,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.BigNum.equals(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LazyTransformer.indexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Tail.remove(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Stream.tap()	false	false	true	0	0	0	2	null	null
org.clojure.runtime.PersistentHybridIdentityMap.createHashtableMap(Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.EmptyExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.tailoff()	false	false	false	0	0	4	4	null	null
clojure.lang.PersistentVector.nth(int,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.Red.redden()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.key()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.RedBranch.right()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.red(Object,Object,Node,Node)	false	false	true	0	0	0	27	null	null
clojure.lang.Compiler.NewInstanceMethod.getArgTypes()	false	false	false	0	0	1	1	null	null
org.clojure.runtime.Var.invoke(ThreadLocalData,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.RedBranch.left()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.DoubleArrayOps.opsWith(DoubleArrayOps)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderParser.otherThanDotExpression()	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.BigDecimalOps.dec(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListMap.Link.put(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ASeq.isEmpty()	false	false	false	0	0	0	0	null	null
clojure.lang.LineNumberingPushbackReader.getLineNumber()	false	false	false	0	0	17	17	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjMethod.emit(ObjExpr,ClassVisitor)	true	false	false	1	2	2	2	[b7281364e3f9cfeca365d7884f1f4765660cc756]	public
clojure.lang.RestFn3.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_boolean.indexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.min(long,double)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.leftBalance(Object,Object,Node,Node)	false	false	true	0	0	0	2	null	null
clojure.asm.ClassReader.readShort(int)	false	false	false	0	0	5	5	null	null
clojure.lang.PersistentHashMap2.valAt(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.equiv(long,double)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.DoubleOps.dec(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.SeqIterator.next()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Var.invoke(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitOuterClass(String,String,String)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.FixNum.addTo(BigInteger)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.find(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.CaseExpr.emit(C,ObjExpr,GeneratorAdapter)	true	false	false	1	0	0	0	[34489bddcceb2c1102c30e6b3e417d981097453c]	public
clojure.lang.PersistentHashMap2.removePair(Object[],int)	false	false	true	0	0	0	3	null	null
clojure.lang.PersistentHybridMap.capacity()	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.FnReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.keys(NodeIterator)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentHybridIdentityMap.createHashtableMap(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.OrExpr.emitStatement()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.SetExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.KeywordExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentMap.put(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RatioNum.truncateBy(ThreadLocalData,BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.multiply(Object,long)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.add(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.incP(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.KeywordInvokeExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.UntypedExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_long.remove()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.LeafNode.setValue(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.Red.addRight(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayList.count()	false	false	true	0	0	0	37	null	null
clojure.asm.commons.InstructionAdapter.visitVarInsn(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.Tuple.equalKey(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.asm.commons.GeneratorAdapter.newArray(Type)	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.BigIntegerOps.opsWith(BigDecimalOps)	false	false	true	0	0	0	0	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.invoke(Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
clojure.lang.RT.loadClassForName(String)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.ObjExpr.name()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.RSeq.first()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.BigNum.truncateBy(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListMap.count()	false	false	true	0	0	0	1	null	null
clojure.lang.Var.validate(IFn,Object)	false	false	true	0	0	0	7	null	null
clojure.lang.IteratorIter.get()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.aload(Type)	false	false	false	0	0	8	8	null	null
clojure.asm.AnnotationVisitor.visit(String,Object)	false	false	false	0	0	16	16	null	null
clojure.lang.PersistentListIdentityMap.Link.val()	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentSet.removeAll(Collection)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.FixNum.multiply(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.byteCast(Object)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentHybridMap.contains(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArray.RSeq.count()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.fold(IFn,IFn,IFn,IFn,IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.readChar(Reader)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.short_array(int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.ctorTypes()	false	false	false	0	0	7	7	null	null
clojure.lang.Num.remainder(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.andNot(Object,long)	false	false	false	0	0	0	0	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Num.lte(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.TObj.hasAttr(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Ref.commute(IFn,ISeq)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentQueue.Seq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.TransientHashMap.entryAt(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.BytecodeCompiler.createParamBinding(Symbol)	false	false	true	0	0	0	2	null	null
clojure.lang.BigNum.truncateDivide(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.black(Object,Object,Node,Node)	false	false	true	0	0	0	22	null	null
clojure.lang.PersistentTree.seq()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableMap.contains(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.AMapEntry.hashCode()	false	false	true	0	0	0	0	null	null
clojure.java.api.Clojure.read(String)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentMap.get(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LockingTransaction.doTouch(Ref)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.PersistentTree.add(Node,Object,Object,Box)	false	false	true	0	0	0	3	null	null
clojure.lang.PersistentHashMap2.ArrayNode.Seq.first()	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderLexer.DFA24.getDescription()	false	false	true	0	0	0	0	null	null
clojure.lang.ASeq.removeAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.uncheckedFloatCast(short)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentStructMap.withMeta(IPersistentMap)	true	false	false	1	0	0	0	[a8e7ec162fb395bd5d1a4f29a106dfc98333e85c]	public
clojure.lang.PersistentList.EmptyList.containsAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.dup()	false	false	false	0	0	1	1	null	null
clojure.lang.BigNum.divide(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.isPos(double)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.min(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.LetExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.VarExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.FloatArrayOps.opsWith(DoubleOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Ref.applyTo(ISeq)	false	false	false	0	0	0	0	null	null
clojure.asm.MethodWriter.visitInsn(int)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn3.invoke(Object,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentArrayMap.createHT(Object[])	false	false	false	0	0	2	2	null	null
clojure.lang.Compiler.DefExpr.Parser.parse(C,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.uncheckedFloatCast(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_short.index()	false	false	false	0	0	0	0	null	null
clojure.lang.Atom.reset(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.MapEntry.Seq.count()	false	false	true	0	0	0	0	null	null
compilation.TestDispatch.someMethod(int,long)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Reflector.invokeInstanceMember(String,Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.RatioNum.addTo(int)	false	false	true	0	0	0	3	null	null
clojure.lang.RestFn3.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Num.lt(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.XMLHandler.endPrefixMapping(String)	false	false	false	0	0	0	0	null	null
clojure.lang.AFunction.meta()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.TransientHashMap.doCount()	false	false	false	0	0	0	0	null	null
clojure.lang.StreamSeq.next()	false	false	true	0	0	0	1	null	null
clojure.lang.Var.releaseThreadBindings()	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_char.reduce(IFn,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RestFn0.invoke()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.minus(float,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Reflector.invokeInstanceMember(String,Object)	false	false	true	0	0	0	1	null	null
clojure.asm.commons.EmptyVisitor.visitMaxs(int,int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.BigNum.addTo(int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.empty()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.Black.addRight(Node)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.truncateDivide(ThreadLocalData,Num)	false	false	true	0	0	0	0	null	null
clojure.lang.MultiFn.assoc(Object,IFn)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn0.invoke(Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Ref.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ArgVector.entryAt(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_int.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Var.invoke(ThreadLocalData,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.dupX2()	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.multiply(int,double)	false	false	true	0	0	0	0	null	null
clojure.asm.MethodWriter.readShort(byte[],int)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentStructMap.without(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.put(Object,Object)	true	false	true	1	1	0	1	[ae623590ccb2fd017d67637b2f52e747b9b4ad73]	public
clojure.lang.Numbers.gt(double,long)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.HostExpr.maybeClassName(Object)	false	false	true	0	0	0	6	null	null
clojure.lang.RestFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
clojure.lang.RT.longCast(float)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.IfExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.lang.Util.equals(Object,Object)	true	true	false	1	16	22	31	[8f0a24409ce9e905222b03377175533e1cab3be6]	public
clojure.lang.PersistentHashMap2.BitmapIndexedNode.ensureEditable(AtomicReference)	false	false	true	0	0	0	5	null	null
clojure.lang.ASeq.empty()	false	false	false	0	0	0	0	null	null
clojure.lang.ASeq.reduce(IFn)	false	false	true	0	0	0	0	null	null
clojure.lang.ASeq.add(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.reduce(BigInteger)	false	false	true	0	0	0	13	null	null
clojure.lang.RT.alength(short[])	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.put(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.minus(int,long)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassReader.accept(ClassVisitor,int)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.lt(int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArray.equals(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.loadResourceScript(Class,String,boolean)	false	false	false	0	0	2	7	null	null
clojure.lang.APersistentMap.equiv(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Cons.seq()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArrayMap.indexOf(Object)	false	false	true	0	0	0	5	null	null
clojure.lang.PersistentArray.create(Master,int,int,BitSet)	false	false	true	0	0	0	2	null	null
clojure.lang.MethodImplCache.findFnFor(Class)	false	false	false	0	0	1	1	null	null
clojure.lang.ASeq.more()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.cons(Object)	false	false	false	0	0	27	30	null	null
clojure.lang.Numbers.and(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Reflector.getAsMethodOfPublicBase(Class,Method)	false	false	false	0	0	3	3	null	null
clojure.lang.LazyTransformer.seq()	false	false	false	0	0	16	16	null	null
clojure.lang.BigNum.gt(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.asm.Item.set(long)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.AFn.invoke(ThreadLocalData,Object,Object,Object,Object)	false	false	true	0	0	0	2	null	null
clojure.lang.APersistentSet.size()	false	false	false	0	0	1	1	null	null
clojure.lang.ReaderLexer.mNullToken()	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.IntegerBitOps.shiftLeft(Number,int)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.BigDecimalOps.gte(Number,Number)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.Tail.seq()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.gt(int)	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.VectorReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.add(double,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.InstanceMemberSymbol.invoke()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn3.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.count()	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.isZero(int)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.seq()	false	false	false	0	0	3	7	null	null
clojure.lang.ChunkBuffer.add(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LazySeq.indexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.DoubleNum.doubleValue()	false	false	true	0	0	0	0	null	null
clojure.lang.IteratorSeq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.without(AtomicReference,int,int,Object,Box)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.mask(int,int)	false	false	false	0	0	9	9	null	null
org.clojure.runtime.RestFn0.applyTo(ThreadLocalData,Cons)	false	false	true	0	0	0	0	null	null
clojure.lang.Namespace.intern(String,String)	false	false	true	0	0	0	2	null	null
clojure.lang.RatioNum.hashCode()	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.analyzeSeq(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.LazyTransformer.add(int,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Var.invoke(Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.emitVar(GeneratorAdapter,Var)	false	false	false	0	0	4	6	null	null
org.clojure.runtime.Namespace.find(String)	false	false	true	0	0	0	1	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object[])	false	false	false	0	0	0	0	null	null
clojure.asm.ClassWriter.newConst(Object)	false	false	false	0	0	1	1	null	null
clojure.asm.Item.set(double)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.find(int,int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.TRef.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Iter.remove()	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.NumExpr.emitBigInteger(GeneratorAdapter,Num)	false	false	true	0	0	0	3	null	null
clojure.lang.Numbers.dec(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHashMap2.create(ISeq)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.count()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.errorMsg(String,int,int,String)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.MapExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.FnMethod.emit(FnExpr,ClassVisitor)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.NumExpr.getJavaClass()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.minusP(Object,long)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_dec(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.quotient(long,double)	false	false	false	0	0	0	0	null	null
clojure.lang.TransactionalHashMap.putIfAbsent(K,V)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.fold(IFn,IFn,IFn,IFn,IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.Delay.isRealized()	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn4.invoke(Object,Object,Object,Object,Object,Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.InvokeExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.chars(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.tableSwitch(int[],TableSwitchGenerator,boolean)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.andNot(long,long)	false	false	false	0	0	3	3	null	null
clojure.lang.RT.isReduced(Object)	false	false	false	0	0	18	18	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.MutableVector.popTail(int,Node)	false	false	true	0	0	0	2	null	null
clojure.lang.ArrayIter.ArrayIter_float.next()	false	false	false	0	0	0	0	null	null
clojure.asm.MethodWriter.visitSwitchInsn(Label,Label[])	false	false	false	0	0	2	2	null	null
clojure.lang.LockingTransaction.doEnsure(Ref)	false	false	false	0	0	1	1	null	null
clojure.lang.RT.stream(Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.loadArg(int)	false	false	false	0	0	8	8	null	null
clojure.lang.PersistentArrayMap.Seq.key()	false	false	true	0	0	0	1	null	null
org.clojure.runtime.RBTree.Node.balanceLeft(Node)	false	false	true	0	0	0	1	null	null
clojure.lang.LazilyPersistentVector.ChunkedSeq.first()	false	false	true	0	0	0	0	null	null
clojure.asm.ClassWriter.newMethodTypeItem(String)	false	false	false	0	0	2	2	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Ref.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.StaticInvokeExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.Link.first()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.Iter.hasNext()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedIntCast(byte)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RT.eql(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentArray.rseq()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn0.invoke(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.KeywordExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayList.capacity()	false	false	true	0	0	0	0	null	null
clojure.lang.StreamSeq.first()	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderLexer.mT32()	false	false	true	0	0	0	1	null	null
clojure.lang.Range.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Symbol.equals(Object)	false	false	false	0	0	10	11	null	null
org.clojure.runtime.PersistentTree.Black.redden()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeSet.cons(Object)	false	false	false	0	0	2	3	null	null
clojure.lang.StreamSeq.rest()	false	false	true	0	0	0	1	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LockingTransaction.run(Callable)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.unchecked_add(Object,double)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.compile()	true	false	true	1	1	0	1	[240969a3af34ff0661238d03c006cc5a74dc1698]	private
clojure.lang.MultiFn.findAndCacheBestMethod(Object)	true	false	false	1	2	2	2	[4b47829f59992f7de22a859fd32306bb512747de]	private
clojure.lang.Numbers.unchecked_minus(Object,long)	false	false	false	0	0	0	0	null	null
clojure.lang.Transaction.getEx()	false	false	true	0	0	0	3	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	12	12	null	null
org.clojure.runtime.RatioNum.multiply(int)	false	false	true	0	0	0	2	null	null
clojure.asm.MethodWriter.visitAnnotationDefault()	false	false	false	0	0	0	0	null	null
clojure.lang.LazyCons.rest()	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentVector.rangedIterator(int,int)	false	false	false	0	0	1	2	null	null
clojure.lang.LazyTransformer.equiv(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.TRef.invoke(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.remove(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Ref.touch()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RatioNum.truncateBy(ThreadLocalData,int)	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.divide(int)	false	false	true	0	0	0	0	null	null
clojure.lang.ASeq.remove(int)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentQueue.addAll(Collection)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.gt(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.AnalyzerAdapter.visitLdcInsn(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.BigNum.zerop()	false	false	true	0	0	0	0	null	null
clojure.lang.Tuple.set(int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.lineDeref()	false	false	false	0	0	17	17	null	null
clojure.lang.PersistentHashMap.TransientHashMap.doAssoc(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.FnMethod.isVariadic()	false	false	true	0	0	0	3	null	null
clojure.lang.PersistentVector.MutableVector.editableTail(Object[])	false	false	true	0	0	0	1	null	null
clojure.lang.Util.runtimeException(String)	false	false	false	0	0	101	101	null	null
clojure.lang.FixNum.gt(int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.NodeSeq.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.LazilyPersistentVector.ChunkedSeq.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.MapEntry.entryAt(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LocalBindingExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Var.cloneThreadBindingFrame()	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderLexer.mKeywordIdentifier()	false	false	true	0	0	0	1	null	null
clojure.lang.RT.uncheckedByteCast(long)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.MethodExpr.emitTypedArgs(FnExpr,GeneratorAdapter,Class[],IPersistentVector)	false	false	true	0	0	0	5	null	null
clojure.lang.PersistentList.EmptyList.pop()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerBitOps.setBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_multiply(Object,double)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_minus(long)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.and(Object,Object)	false	false	false	0	0	0	2	null	null
clojure.lang.PersistentHashtableMap.create(int,PersistentArray)	false	false	true	0	0	0	2	null	null
clojure.lang.Compiler.addAnnotation(Object,IPersistentMap)	false	false	false	0	0	3	3	null	null
clojure.lang.Reflector.prepRet(Object)	false	false	true	0	0	0	15	null	null
clojure.lang.FixNum.toString()	false	false	true	0	0	0	0	null	null
clojure.lang.ATransientSet.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.BigNum.add(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.main(String[])	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_boolean.reduce(IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.TRef.getCurrentVal()	false	false	true	0	0	0	1	null	null
org.clojure.runtime.DoubleNum.toRational()	false	false	true	0	0	0	3	null	null
clojure.lang.Numbers.shiftLeftInt(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.LazilyPersistentVector.ChunkedSeq.chunkedMore()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Num.truncateBigints(ThreadLocalData,BigInteger,BigInteger)	false	false	true	0	0	0	3	null	null
org.clojure.runtime.PersistentHashtableIdentityMap.Iter.hasNext()	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.FullNode.Seq.first()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerOps.add(Number,Number)	false	false	true	0	0	0	1	null	null
clojure.lang.ReaderParser.args()	false	false	true	0	0	0	1	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.maybeJavaClass(Collection)	false	false	false	0	0	1	1	null	null
clojure.lang.LazySeq.cons(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.BigNum.equivTo(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.bitAnd(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.typeHint(Symbol)	false	false	true	0	0	0	6	null	null
clojure.lang.FixNum.bitXor(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_double.count()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentStructMap.meta()	false	false	false	0	0	0	0	null	null
clojure.lang.Agent.createThreadFactory(String,AtomicLong)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.find(int,int,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.equiv(int,long)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.find(Object)	false	false	true	0	0	0	2	null	null
clojure.lang.APersistentMap.ValSeq.first()	false	false	false	0	0	0	0	null	null
clojure.lang.Range.count()	false	false	false	0	0	0	0	null	null
clojure.lang.Num.truncate(Object,Object)	false	false	true	0	0	0	7	null	null
clojure.asm.ByteVector.putByteArray(byte[],int,int)	false	false	false	0	0	26	26	null	null
clojure.lang.PersistentHashMap.EmptyNode.nodeSeq()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.checkcast(Type)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.DoubleOps.combine(Ops)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentMap.ValSeq.next()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.reify()	false	false	false	0	0	4	4	null	null
clojure.lang.BytecodeCompiler.eval(Object)	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.DoubleOps.opsWith(IntegerOps)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.storeInsn(Type,int)	false	false	false	0	0	3	3	null	null
org.clojure.runtime.RBTree.add(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.MapEntry.getKey()	false	false	false	0	0	0	1	null	null
clojure.lang.RT.list(Object)	false	false	false	0	0	7	7	null	null
clojure.lang.Compiler.StaticInvokeExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.count()	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.main(String[])	false	false	true	0	0	0	0	null	null
clojure.lang.Util.compare(Object,Object)	false	false	false	0	0	2	2	null	null
clojure.asm.Type.hashCode()	false	false	false	0	0	0	0	null	null
clojure.lang.LazySeq.remove(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.ByteVector.put11(int,int)	false	false	false	0	0	6	6	null	null
clojure.lang.Compiler.CharExpr.getJavaClass()	false	false	true	0	0	0	0	null	null
clojure.lang.ATransientSet.conj(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.CodeSizeEvaluator.visitLdcInsn(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_long_dec(long)	false	false	true	0	0	0	0	null	null
clojure.lang.MethodImplCache.fnFor(Class)	true	false	false	1	0	0	0	[e660e467789ccc8e9922948b3498939e0239fc7c]	public
clojure.lang.LispReader.registerArg(int)	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.IntegerOps.add(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedFloatCast(int)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.UnresolvedVarExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.asm.Type.getElementType()	false	false	false	0	0	1	1	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.isPos(int)	false	false	true	0	0	0	0	null	null
clojure.lang.ATransientSet.get(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Var.invoke()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashSet.TransientHashSet.persistent()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.MetaExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.compile1(GeneratorAdapter,ObjExpr,Object)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.unchecked_int_dec(int)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.main(String[])	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn2.applyTo(ThreadLocalData,Cons)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.get()	true	false	false	1	0	24	122	[f1daffdbae886dab563f5653ffd78db40403115c]	public
clojure.lang.PersistentHashMap.meta()	false	false	false	0	0	5	5	null	null
clojure.lang.Compiler.StaticMethodExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.black(Object,Object,Node,Node)	false	false	true	0	0	0	22	null	null
clojure.lang.Compiler.MapExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableMap.iterator()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.without(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.SeqIterator.remove()	false	false	false	0	0	0	0	null	null
clojure.lang.RT.longCast(long)	false	false	false	0	0	0	0	null	null
clojure.asm.Label.put(MethodWriter,ByteVector,int,boolean)	false	false	false	0	0	6	6	null	null
org.clojure.runtime.RT.box(char)	false	false	true	0	0	0	2	null	null
clojure.lang.RT.uncheckedIntCast(float)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.MutableVector.conj(Object)	false	false	true	0	0	0	4	null	null
clojure.lang.Compiler.getMatchingParams(ArrayList,IPersistentVector)	false	false	true	0	0	0	3	null	null
clojure.lang.Numbers.lte(int,double)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentMap.putAll(Map)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.iterator()	false	false	true	0	0	0	0	null	null
clojure.lang.Agent.setErrorHandler(IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.Seq.val()	false	false	true	0	0	0	1	null	null
clojure.lang.BigInt.equals(Object)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RatioNum.truncateBy(ThreadLocalData,RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.peekChar(Reader)	false	false	false	0	0	0	0	null	null
clojure.lang.Reflector.noMethodReport(String,Object)	false	false	false	0	0	2	3	null	null
clojure.lang.DoubleNum.equivTo(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Tail.seq()	false	false	true	0	0	0	0	null	null
clojure.asm.MethodWriter.endFrame()	false	false	false	0	0	4	4	null	null
clojure.lang.PersistentVector.popTail(int,Node)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.lte(Object,long)	false	false	false	0	0	1	1	null	null
clojure.lang.ReaderParser.synpred29()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.LocalBinding.typeDeclaration()	false	false	true	0	0	0	2	null	null
clojure.asm.commons.GeneratorAdapter.pop()	false	false	false	0	0	37	46	null	null
clojure.lang.Numbers.IntegerOps.add(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.NumberExpr.val()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.athrow()	false	false	false	0	0	1	1	null	null
org.clojure.runtime.FixNum.truncateBy(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.intern(Symbol,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.TRef.invoke(Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedDoubleCast(int)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.depth(Node)	false	false	true	0	0	0	3	null	null
clojure.asm.MethodWriter.visitLabel(Label)	false	false	false	0	0	3	3	null	null
clojure.lang.RT.seqToPassedArray(ISeq,Object[])	false	false	false	0	0	6	6	null	null
clojure.lang.PersistentArrayList.nth(int)	false	false	true	0	0	0	18	null	null
clojure.lang.LazySeq.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.ARef.setValidator(IFn)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentArray.set(int,Object)	false	false	true	0	0	0	5	null	null
clojure.lang.RT.uncheckedShortCast(int)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.equiv(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.FixNum.truncateBy(ThreadLocalData,RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.countFrom(Object)	false	false	false	0	0	1	1	null	null
clojure.asm.ClassReader.getClassName()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.RedBranch.blacken()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.constantType(int)	false	false	false	0	0	7	7	null	null
clojure.lang.APersistentArray.get(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Var.pushThreadBinding(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.multiply(float,float)	false	false	true	0	0	0	4	null	null
org.clojure.runtime.PersistentTree.Black.removeLeft(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.LeafNode.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.FnMethod.numParams()	false	false	true	0	0	0	1	null	null
clojure.asm.commons.AnalyzerAdapter.visitIntInsn(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.shiftRight(Object,long)	false	false	false	0	0	0	0	null	null
clojure.lang.Namespace.addAlias(Symbol,Namespace)	false	false	false	0	0	0	0	null	null
clojure.asm.ClassWriter.addUninitializedType(String,int)	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.gte(long,int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.EmptyNode.getHash()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.peek()	false	false	true	0	0	0	1	null	null
clojure.lang.ARef.notifyWatches()	true	true	true	1	9	0	12	[e26c24712a9e0f94e25aa6e9bdadea7835a7bec3]	public
clojure.lang.PersistentArray.count()	false	false	true	0	0	0	3	null	null
clojure.asm.ByteVector.putByte(int)	false	false	false	0	0	49	49	null	null
clojure.asm.MethodVisitor.visitAttribute(Attribute)	false	false	false	0	0	3	3	null	null
clojure.lang.RT.floatCast(int)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_long_remainder(long,long)	false	false	true	0	0	0	0	null	null
clojure.asm.Type.getReturnType()	false	false	false	0	0	0	0	null	null
clojure.lang.Num.lt(Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.truncateDivide(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerOps.opsWith(DoubleOps)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitSource(String,String)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.intCast(byte)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentMap.values()	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHashMap.FullNode.without(int,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.Seq.create(Node,boolean)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.RestFn1.invoke(ThreadLocalData,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.ArraySeq.lastIndexOf(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Accessor.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Transaction.set(TRef,Object)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentVector.doAssoc(int,Node,int,Object)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.PersistentHashtableIdentityMap.create(int,PersistentArray,int)	false	false	true	0	0	0	0	null	null
clojure.lang.LazySeq.equiv(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.Frame.push(int)	false	false	false	0	0	79	79	null	null
clojure.lang.Range.first()	false	false	false	0	0	0	0	null	null
clojure.lang.Var.applyTo(ISeq)	false	false	false	0	0	2	2	null	null
clojure.lang.TRef.valAsOfTime(TRef,long)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Var.setValue(ThreadLocalData,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Tuple.assocN(int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashSet.asTransient()	false	false	false	0	0	6	6	null	null
clojure.lang.RT.floatCast(Object)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentHashtableMap.Iter.nextBucket()	false	false	true	0	0	0	2	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.ValIterator.next()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Transaction.get(TRef)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentHashMap2.ArrayNode.without(int,int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LazilyPersistentVector.ChunkedSeq.chunkedNext()	false	false	true	0	0	0	2	null	null
clojure.lang.ReaderParser.expression()	true	false	true	1	8	0	8	[fc33cf217b1dbfaaee3ca3294a6785df5befdaa1]	public
org.clojure.runtime.PersistentListIdentityMap.Link.count()	false	false	true	0	0	0	1	null	null
clojure.lang.BytecodeCompiler.RecurExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.getCompiledClass()	false	false	false	0	0	3	3	null	null
clojure.lang.AFunction.withMeta(IPersistentMap)	false	false	false	0	0	2	2	null	null
clojure.asm.Type.getDescriptor(StringBuffer)	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.FloatOps.remainder(Number,Number)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArrayMap.add(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Num.gt(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.getThreadBindings()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.BlackBranch.redden()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Num.subtract(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.mark(Label)	false	false	false	0	0	30	43	null	null
clojure.lang.ATransientMap.assoc(Object,Object)	true	true	false	1	3	3	3	[47b571fcf48b18ea59243937fc6ac4cfc6a1cf9d]	public
clojure.lang.PersistentHashMap2.assoc(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.asm.commons.InstructionAdapter.goTo(Label)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RBSet.contains(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitAnnotationDefault()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.vals()	false	false	true	0	0	0	0	null	null
clojure.asm.MethodVisitor.visitInvokeDynamicInsn(String,String,Handle,Object[])	false	false	false	0	0	7	7	null	null
clojure.lang.Compiler.InvokeExpr.emitArgsAndCall(int,C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	2	3	null	null
org.clojure.runtime.BigNum.multiply(BigInteger)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.LineNumberingPushbackReader.getLineNumber()	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.BigDecimalOps.opsWith(LongOps)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentMap.ValSeq.create(ISeq)	false	false	false	0	0	2	2	null	null
clojure.asm.ClassWriter.toByteArray()	false	false	false	0	0	4	5	null	null
clojure.lang.Agent.getError()	false	false	false	0	0	2	2	null	null
org.clojure.runtime.RBTree.Node.right()	false	false	true	0	0	0	51	null	null
clojure.lang.APersistentMap.equals(Object)	true	false	false	1	0	0	0	[ac484ba40cc1d94d42ce59e9df92b13e98ed0b6e]	public
clojure.lang.Reflector.invokeConstructor(Class,Object[])	false	false	false	0	0	4	4	null	null
clojure.asm.commons.InstructionAdapter.lconst(long)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.equiv(Object,float)	false	false	true	0	0	0	0	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.dup2X1()	false	false	false	0	0	1	1	null	null
org.clojure.runtime.Namespace.findOrCreate(String)	false	false	true	0	0	0	2	null	null
clojure.asm.commons.InstructionAdapter.invokedynamic(String,String,Handle,Object[])	false	false	false	0	0	1	1	null	null
clojure.lang.RT.next(Object)	false	false	false	0	0	49	53	null	null
clojure.lang.BigNum.hashCode()	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentMap.contains(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.RT.count(Object)	true	false	false	1	27	34	34	[f81e612cc9ff91ddefc1d86e270cd7f018701802]	public
clojure.lang.Compiler.HostExpr.emitUnboxArg(ObjExpr,GeneratorAdapter,Class)	false	false	false	0	0	6	6	null	null
clojure.lang.APersistentVector.iterator()	false	false	false	0	0	1	2	null	null
clojure.lang.PersistentStructMap.getAccessor(Def,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.incP(long)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ConstantExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.StaticMethodExpr.emitUnboxed(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.BitmapIndexedNode.editAndRemovePair(AtomicReference,int,int)	false	false	true	0	0	0	2	null	null
clojure.lang.Var.setDynamic()	false	false	false	0	0	3	3	null	null
clojure.lang.TRef.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentStructMap.valAt(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.VarExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Num.multiply(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.invokeStatic(Type,Method)	false	false	false	0	0	58	58	null	null
clojure.lang.DynamicClassLoader.findClass(String)	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderLexer.mJavaIDDigit()	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
clojure.lang.Var.intern(Namespace,Symbol,Object,boolean)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.MonitorExitExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.multiply(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.chunkedSeq()	false	false	false	0	0	1	1	null	null
clojure.lang.MapEntry.valAt(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.gt(double,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.analyze(C,Object)	false	false	true	0	0	0	24	null	null
clojure.asm.ClassReader.getAttributes()	false	false	false	0	0	2	2	null	null
org.clojure.runtime.DoubleNum.addTo(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.LazySeq.add(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.QuoteExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListMap.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongBitOps.shiftLeft(Number,int)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.Namespace.internVar(String,String)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.kvreduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.AnalyzerAdapter.pop(String)	false	false	false	0	0	4	4	null	null
clojure.lang.LockingTransaction.Info.running()	false	false	false	0	0	7	8	null	null
clojure.asm.commons.InstructionAdapter.ifne(Label)	false	false	false	0	0	1	1	null	null
clojure.lang.Symbol.invoke(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentMap.hashCode()	true	false	false	1	2	2	3	[ac484ba40cc1d94d42ce59e9df92b13e98ed0b6e]	public
clojure.lang.ReaderLexer.mT29()	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.equal(Number,Number)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.BigIntegerOps.add(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Atom.get()	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentHashMap.seq()	false	false	false	0	0	0	1	null	null
clojure.lang.RT.nextID()	false	false	false	0	0	11	11	null	null
clojure.lang.MapEntry.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.Link.remove(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.ListExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.siteName(int)	false	false	false	0	0	1	2	null	null
org.clojure.runtime.FixNum.add(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.Util.equiv(Object,long)	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_byte.indexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentStructMap.empty()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.BigNum.hashCode()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.multiply(double,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.unchecked_multiply(double,double)	false	false	false	0	0	0	0	null	null
clojure.lang.Transaction.runInTransaction(IFn)	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.BigDecimalOps.add(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.TRef.trimHistoryPriorToTime(long)	false	false	true	0	0	0	0	null	null
clojure.lang.Agent.ThreadPool.Worker.newTask(Runnable)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentTree.NodeIterator.remove()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnMethod.parse(ObjExpr,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.InstanceExpr.hasJavaClass()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.add(Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitTableSwitchInsn(int,int,Label,Label[])	false	false	true	0	0	0	0	null	null
clojure.lang.KeywordLookupSite.install(Object,ILookupHost)	false	false	true	0	0	0	1	null	null
clojure.lang.MapEntry.without(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.EdnReader.isWhitespace(int)	false	false	false	0	0	5	5	null	null
clojure.lang.Numbers.LongBitOps.bitOpsWith(IntegerBitOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lte(long,long)	false	false	false	0	0	0	2	null	null
clojure.lang.Keyword.invoke(Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.lte(Object,float)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.withMeta(IPersistentMap)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.RatioNum.divide(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.XMLHandler.startPrefixMapping(String,String)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.RecurExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.ArrayStream.ArrayStream_int.invoke()	false	false	true	0	0	0	0	null	null
clojure.lang.RatioNum.longValue()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.ints(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.Node.balanceRight(Node)	false	false	true	0	0	0	1	null	null
clojure.lang.BigInt.valueOf(long)	false	false	false	0	0	4	4	null	null
clojure.lang.RT.aclone(char[])	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Link.key()	false	false	true	0	0	0	0	null	null
clojure.lang.KeywordLookupSite.ilookupThunk(Class)	false	false	false	0	0	2	2	null	null
clojure.lang.APersistentSet.seq()	false	false	false	0	0	3	5	null	null
clojure.lang.Numbers.shiftRight(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.AdviceAdapter.visitTryCatchBlock(Label,Label,Label,String)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.emitLocal(GeneratorAdapter,LocalBinding)	false	false	true	0	0	0	3	null	null
org.clojure.runtime.PersistentTree.RedBranch.balanceLeft(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.bitXor(int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.LeafNode.getValue()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.RecurExpr.canEmitPrimitive()	false	false	false	0	0	0	0	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Transaction.abort()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.ChunkedSeq.chunkedNext()	false	false	false	0	0	2	2	null	null
clojure.lang.Compiler.DefExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.asm.MethodAdapter.visitLookupSwitchInsn(Label,int[],Label[])	false	false	true	0	0	0	1	null	null
clojure.lang.BytecodeCompiler.main(String[])	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentStructMap.create(Def,ISeq)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentArrayMap.capacity()	false	false	true	0	0	0	0	null	null
clojure.lang.MapEntry.Seq.rest()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.depth()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.balanceLeftDel(Object,Object,Node,Node)	false	false	true	0	0	0	3	null	null
clojure.lang.ArraySeq.ArraySeq_float.reduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.aget(byte[],int)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceMethod.emit(ObjExpr,ClassVisitor)	false	false	false	0	0	0	0	null	null
clojure.lang.FixNum.zerop()	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.ontoArrayPrepend(Object[],Object[])	false	false	false	0	0	20	20	null	null
clojure.lang.PersistentTree.ValIterator.hasNext()	false	false	true	0	0	0	0	null	null
clojure.lang.DoubleNum.addTo(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.eos()	false	false	true	0	0	0	16	null	null
clojure.lang.Numbers.BigIntOps.lt(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.TRef.trimHistory()	false	false	true	0	0	0	2	null	null
clojure.lang.Reflector.setInstanceField(Object,String,Object)	false	false	false	0	0	1	1	null	null
clojure.asm.FieldWriter.visitAnnotation(String,boolean)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.isZero(float)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.listStar(Object,Object,ISeq)	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.negate(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentMap.ValSeq.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.compileLib(String)	false	false	true	0	0	0	0	null	null
clojure.lang.BigNum.subtractFrom(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongBitOps.bitOpsWith(LongBitOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.IntegerOps.opsWith(DoubleOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnMethod.parse(FnExpr,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.LetExpr.emitUnboxed(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.nthFrom(Object,int)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentTreeMap.Black.removeRight(Node)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableMap.add(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.contains(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.emitTypedArgs(Class[],PersistentVector,boolean)	false	false	true	0	0	0	2	null	null
clojure.lang.Reflector.invokeInstanceMethod(String,Object,Object[])	false	false	true	0	0	0	6	null	null
org.clojure.runtime.Var.invoke(ThreadLocalData,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableMap.remove(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.TransientArrayMap.ensureEditable()	false	false	false	0	0	1	1	null	null
clojure.lang.ArraySeq.ArraySeq_short.first()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Keyword.invoke(ThreadLocalData,Object,Object,Object,Object,Object,Cons)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.LocalVariablesSorter.remap(int,Type)	true	false	false	1	4	4	4	[c8d3ef3929e8049a84957002bc7e2071844bfb53]	private
clojure.asm.MethodWriter.writeFrameTypes(int,int)	false	false	false	0	0	7	7	null	null
clojure.asm.commons.InstructionAdapter.ificmpge(Label)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHashtableIdentityMap.create(int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.NodeSeq.create(Object[])	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.FloatArrayOps.opsWith(RatioOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.emitConvert(Class,Expr)	false	false	true	0	0	0	4	null	null
clojure.lang.ChunkedCons.chunkedFirst()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.RedBranch.right()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.KeywordExpr.emitExpression()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.isZero(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.closes()	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.retainAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn1.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.floats(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Tail.find(Object)	false	false	true	0	0	0	0	null	null
clojure.asm.AnnotationWriter.visitEnum(String,String,String)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.resolveHostClassname(String)	false	false	true	0	0	0	6	null	null
clojure.lang.Compiler.LetExpr.Parser.parse(C,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.LocalVariablesSorter.setLocalType(int,Type)	false	false	false	0	0	2	2	null	null
clojure.lang.ArraySeq.ArraySeq_long.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.isPos(Number)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RT.box(byte)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.divide(Object,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.equiv(double,float)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn2.invoke(Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayIter.hasNext()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.unsignedShiftRight(long,long)	false	false	false	0	0	3	3	null	null
clojure.lang.BytecodeCompiler.StringExpr.val()	false	false	true	0	0	0	0	null	null
clojure.lang.TransactionalHashMap.remove(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceExpr.interfaceNames(IPersistentVector)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentArrayMap.Seq.val()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableMap.count()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.keys(NodeIterator)	false	false	true	0	0	0	1	null	null
clojure.lang.LispReader.MetaReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LazyTransformer.cons(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_boolean.first()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.minusP(double,double)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.multiply(float,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gte(float,long)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.SerialVersionUIDAdder.visitMethod(int,String,String,String,String[])	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.analyze(C,Object)	false	false	false	0	0	38	38	null	null
clojure.lang.ArraySeq.ArraySeq_short.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.uncheckedByteCast(byte)	false	false	false	0	0	0	0	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.arrayStore(Type)	false	false	false	0	0	3	3	null	null
clojure.lang.PersistentTreeMap.BlackBranch.left()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.minus(long,int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.BlackVal.redden()	false	false	true	0	0	0	0	null	null
clojure.lang.AMapEntry.empty()	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.equiv(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.CodeSizeEvaluator.visitIntInsn(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.reduce(IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.registerLocal(Symbol,Symbol,Expr)	false	false	true	0	0	0	5	null	null
clojure.lang.PersistentHashtableMap.Iter.remove()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.balanceLeftDel(Object,Object,Node,Node)	false	false	false	0	0	3	3	null	null
clojure.lang.Reflector.invokeNoArgInstanceMember(Object,String,boolean)	false	false	false	0	0	2	2	null	null
clojure.lang.APersistentVector.isEmpty()	false	false	false	0	0	0	0	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.AFn.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.toArray()	false	false	false	0	0	0	2	null	null
clojure.lang.RT.doubleCast(short)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.BigNum.divide(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.NewExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassWriter.newMethod(String,String,String,boolean)	false	false	false	0	0	1	1	null	null
clojure.lang.Keyword.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.namespaceFor(Namespace,Symbol)	false	false	false	0	0	3	3	null	null
clojure.lang.RestFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
clojure.lang.ArrayStream.ArrayStream_boolean.invoke()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.isZero(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_float.indexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.capacity()	false	false	false	0	0	0	0	null	null
clojure.lang.AMapEntry.assocN(int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.InvokeExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.StaticFieldExpr.evalAssign(Expr)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.putStatic(Type,String,Type)	false	false	false	0	0	8	8	null	null
clojure.lang.Compiler.analyzeSymbol(Symbol,boolean)	false	false	true	0	0	0	2	null	null
clojure.asm.commons.InstructionAdapter.monitorenter()	false	false	false	0	0	1	1	null	null
clojure.lang.APersistentVector.rseq()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.multiplyP(Object,double)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableIdentityMap.createListMap(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_byte.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.valAt(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.FixNum.plusp()	false	false	true	0	0	0	0	null	null
clojure.lang.DynamicVar.unbindRoot()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Link.capacity()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.get(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn2.invoke(Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LockingTransaction.getEx()	false	false	false	0	0	4	6	null	null
clojure.lang.Ref.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.visitFieldInsn(int,String,String,String)	false	false	false	0	0	0	0	null	null
clojure.lang.TRef.touch()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.length(ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.Keyword.invoke(Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.get(Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.LocalVariablesSorter.visitMaxs(int,int)	false	false	false	0	0	0	0	null	null
clojure.asm.Handle.equals(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.MethodVisitor.visitParameterAnnotation(int,String,boolean)	false	false	false	0	0	3	3	null	null
org.clojure.runtime.Reflector.setStaticField(String,String,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHybridIdentityMap.createArrayMap(Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.doPop(int,Object[])	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.RatioOps.opsWith(IntegerOps)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.AFn.applyToHelper(IFn,ThreadLocalData,Cons)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.PersistentTree.leftBalance(Object,Object,Node,Node)	false	false	true	0	0	0	2	null	null
clojure.lang.RT.loadLibrary(String)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerOps.opsWith(LongOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.xor(Object,Object)	false	false	false	0	0	0	2	null	null
clojure.lang.RT.doFormat(Writer,String,ISeq)	false	false	false	0	0	2	2	null	null
clojure.asm.commons.CodeSizeEvaluator.visitTableSwitchInsn(int,int,Label,Label[])	false	false	false	0	0	0	0	null	null
clojure.lang.Agent.getErrorMode()	false	false	false	0	0	0	0	null	null
clojure.asm.ClassReader.readConst(int,char[])	false	false	false	0	0	8	8	null	null
clojure.lang.APersistentVector.nth(int,Object)	true	true	false	1	0	0	0	[f81e612cc9ff91ddefc1d86e270cd7f018701802]	public
clojure.lang.Numbers.minusP(Object,Object)	false	false	false	0	0	3	3	null	null
clojure.asm.commons.InstructionAdapter.fconst(float)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentTree.NodeIterator.push(Node)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.RBSet.depth(Node)	false	false	true	0	0	0	3	null	null
clojure.lang.DoubleNum.negate()	false	false	true	0	0	0	0	null	null
clojure.lang.Accessor.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.Black.removeLeft(Node)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.ret(int)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentMap.withMeta(IPersistentMap)	false	false	true	0	0	0	4	null	null
clojure.lang.RT.aset(char[],int,char)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerOps.remainder(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.variadicMethod()	false	false	false	0	0	0	0	null	null
clojure.lang.InstanceMemberSymbol.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.QuoteExpr.Parser.parse(C,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gt(float,int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.Node.key()	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.loadFile(String)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.KeywordExpr.val()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Tail.rest()	false	false	true	0	0	0	0	null	null
clojure.api.API.var(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Reflector.getField(Class,String,boolean)	false	false	true	0	0	0	4	null	null
clojure.lang.Compiler.InvokeInstanceMemberExpr.getHostType()	false	false	true	0	0	0	0	null	null
clojure.lang.Agent.Action.run()	true	false	false	1	0	0	0	[c2d824b9bf74523156a47ffae27eb2a7c76b3074]	public
clojure.lang.Compiler.ClassExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.MultiFn.prefers(Object,Object)	false	false	false	0	0	4	4	null	null
clojure.lang.Numbers.minus(float,float)	false	false	true	0	0	0	4	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.create(int,INode,int,Object,Object,Box)	false	false	true	0	0	0	2	null	null
clojure.lang.TRef.trimHistoryPriorToPoint(int)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.AdviceAdapter.visitInsn(int)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.equal(Object,Object)	false	false	true	0	0	0	26	null	null
clojure.lang.Numbers.unchecked_inc(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.ByteVector.putInt(int)	false	false	false	0	0	46	46	null	null
clojure.lang.ReaderLexer.mUnicodeEscape()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.TryExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.CodeSizeEvaluator.visitTypeInsn(int,String)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.KeyIterator.remove()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LocalBindingExpr.getHostType()	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.NilExpr.val()	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.CtorReader.invoke(Object,Object)	true	false	false	1	0	0	0	[d3b5665d21457ad27bda702f567ca2f55b14283b]	public
org.clojure.runtime.RestFn2.invoke(ThreadLocalData,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerOps.combine(Ops)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.RecurExpr.Parser.parse(C,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.addAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.asm.Handle.getOwner()	false	false	false	0	0	0	0	null	null
clojure.lang.RT.listStar(Object,Object,Object,ISeq)	false	false	false	0	0	4	4	null	null
org.clojure.runtime.Transaction.reset()	false	false	true	0	0	0	1	null	null
clojure.lang.ArraySeq.ArraySeq_int.next()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.clear()	false	false	true	0	0	0	0	null	null
clojure.lang.BigNum.bitOr(int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.maxKey()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.lastModified(URL,String)	false	false	false	0	0	2	2	null	null
clojure.lang.Compiler.NewInstanceMethod.getReturnType()	false	false	false	0	0	1	1	null	null
clojure.lang.Reflector.invokeInstanceMember(String,Object,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentTreeMap.Node.key()	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentVector.iterator()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Accessor.invoke(ThreadLocalData,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.find(Object)	false	false	true	0	0	0	2	null	null
clojure.lang.BytecodeCompiler.VarExpr.evalAssign(Expr)	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.StringReader.invoke(Object,Object)	false	false	false	0	0	0	1	null	null
clojure.lang.Numbers.gt(Object,float)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentQueue.Seq.first()	false	false	false	0	0	0	0	null	null
clojure.lang.DoubleNum.onePlus()	false	false	true	0	0	0	0	null	null
clojure.lang.LockingTransaction.lock(Ref)	true	false	false	2	1	1	2	[961743446562b6fa7be25f96de02aacd626169da, bd6e6a16c32f15713a351263a07c384a19c2d21d]	package
clojure.lang.PersistentHashMap2.HashCollisionNode.findIndex(Object)	false	false	true	0	0	0	6	null	null
clojure.lang.Util.equiv(long,long)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerOps.equiv(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.EdnReader.CommentReader.invoke(Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.setLocalType(int,Type)	false	false	false	0	0	2	2	null	null
clojure.lang.RatioNum.add(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_boolean.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.MapEntry.setValue(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.compare(Object,Object)	false	false	true	0	0	0	4	null	null
org.clojure.runtime.PersistentTree.Node.right()	false	false	true	0	0	0	53	null	null
clojure.lang.Compiler.ObjExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.LetExpr.emitStatement()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.getHash()	false	false	true	0	0	0	0	null	null
clojure.lang.ARef.validate(IFn,Object)	false	false	false	0	0	10	10	null	null
clojure.asm.commons.GeneratorAdapter.math(int,Type)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHybridMap.createArrayMap(Object[])	false	false	true	0	0	0	1	null	null
clojure.lang.ArrayStream.ArrayStream_float.invoke()	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_short.next()	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_char.index()	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(ISeq)	false	false	true	0	0	0	22	null	null
clojure.lang.RestFn5.invoke(Object,Object,Object,Object,Object,Object[])	false	false	true	0	0	0	0	null	null
clojure.asm.Frame.pop(String)	false	false	false	0	0	4	4	null	null
org.clojure.runtime.RBSet.Red.removeRight(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.IntegerOps.multiply(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.BigNum.divide(int)	false	false	true	0	0	0	0	null	null
clojure.lang.DynamicVar.bindRoot(Object)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.PersistentListIdentityMap.Iter.remove()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.min(long,long)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.max()	false	false	true	0	0	0	1	null	null
clojure.lang.Keyword.throwArity()	false	false	false	0	0	21	22	null	null
clojure.lang.APersistentVector.equals(Object)	true	false	false	1	0	0	0	[7705d1c11ba26627f4889f7b6afceb1e634c7839]	public
org.clojure.runtime.RestFn5.invoke(ThreadLocalData,Object,Object,Object,Object,Object,Cons)	false	false	true	0	0	0	0	null	null
clojure.lang.BigNum.intValue()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.fntype()	false	false	true	0	0	0	0	null	null
clojure.lang.Num.subtract(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.toBigInteger(Object)	false	false	false	0	0	10	46	null	null
clojure.lang.DoubleNum.toString()	false	false	true	0	0	0	0	null	null
clojure.asm.ClassReader.readParameterAnnotations(int,char[],boolean,MethodVisitor)	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.unchecked_minus(double,long)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.AnExpr.emitExpression()	false	false	true	0	0	0	3	null	null
clojure.asm.MethodVisitor.visitIntInsn(int,int)	false	false	false	0	0	12	12	null	null
clojure.lang.PersistentTreeMap.BlackBranch.right()	false	false	false	0	0	0	0	null	null
clojure.lang.BigInt.hashCode()	false	false	false	0	0	0	0	null	null
clojure.lang.EdnReader.interpretToken(String)	false	false	false	0	0	1	1	null	null
clojure.asm.commons.AdviceAdapter.visitTableSwitchInsn(int,int,Label,Label[])	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.equiv(double,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.load(Reader,String,String)	false	false	false	0	0	3	3	null	null
clojure.lang.DynamicVar.intern(Symbol,Object,boolean)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentTree.BlackBranchVal.redden()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gt(Object,double)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.SerialVersionUIDAdder.addSVUID(long)	false	false	false	0	0	1	1	null	null
clojure.lang.ATransientSet.invoke(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object)	false	false	false	0	0	20	20	null	null
clojure.lang.PersistentHashtableMap.Iter.nextBucket()	false	false	true	0	0	0	2	null	null
clojure.lang.APersistentVector.Seq.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.InstanceExpr.Parser.parse(C,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.isMacro()	false	false	false	0	0	2	2	null	null
clojure.lang.StringSeq.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.NodeIterator.next()	false	false	true	0	0	0	2	null	null
clojure.lang.ReaderParser.recoverFromMismatchedSet(IntStream,RecognitionException,BitSet)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentQueue.toArray()	false	false	false	0	0	0	1	null	null
org.clojure.runtime.RBSet.Black.removeRight(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.intern(Namespace,Symbol,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.ATransientMap.valAt(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.FixNum.bitOr(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.intCast(double)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.load(InputStream)	false	false	true	0	0	0	1	null	null
clojure.lang.BytecodeCompiler.InstanceFieldExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderParser.vectorExpression()	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentHashtableIdentityMap.Iter.remove()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gt(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.DoubleOps.opsWith(FloatOps)	false	false	true	0	0	0	0	null	null
clojure.lang.DynamicClassLoader.registerQuotedVal(int,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentVector.ChunkedSeq.first()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.minus(double,long)	false	false	false	0	0	1	1	null	null
clojure.asm.MethodWriter.visitFieldInsn(int,String,String,String)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.get(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.preserveTag(ISeq,Object)	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.isPos(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.ClassReader.copyBootstrapMethods(ClassWriter,Item[],char[])	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.BigDecimalOps.combine(Ops)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.MetaExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderLexer.mLetter()	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentHashtableIdentityMap.Iter.hasNext()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.ArrayNode.assoc(AtomicReference,int,int,Object,Object,Box)	false	false	false	0	0	0	0	null	null
clojure.lang.ATransientMap.invoke(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.cloneAndSet(Object[],int,Object,int,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.RT.suppressRead()	false	false	false	0	0	8	8	null	null
org.clojure.runtime.RBSet.RedBranchVal.blacken()	false	false	true	0	0	0	0	null	null
clojure.lang.MultiFn.resetCache()	false	false	false	0	0	5	5	null	null
clojure.lang.Compiler.emptyVarCallSites()	false	false	false	0	0	2	2	null	null
clojure.lang.FixNum.multiplyBy(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassVisitor.visit(int,int,String,String,String,String[])	false	false	false	0	0	6	6	null	null
clojure.lang.Numbers.equiv(float,double)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.BlackBranch.redden()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayList.create(int,Object,float)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentMap.ValSeq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.IntegerOps.dec(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gte(long,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.MonitorExitExpr.Parser.parse(C,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.Red.redden()	false	false	true	0	0	0	0	null	null
clojure.lang.Tuple.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.divide(double,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.VarExpr.emitExpression()	true	false	true	1	0	0	0	[bb50ab5256b62f29b48a03faca6bfaa116aff2ea]	public
clojure.lang.Var.Frame.clone()	false	false	false	0	0	1	1	null	null
clojure.lang.Transaction.doTouch(TRef)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.gte(int,long)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.testBit(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Util.hash(Object)	false	false	false	0	0	6	23	null	null
clojure.lang.BytecodeCompiler.lookupVar(Symbol)	true	false	true	1	2	0	2	[c894ed9bcc2bb8e45822d48f00b1cb8d90f8c603]	package
clojure.lang.APersistentMap.retainAll(Collection)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentMap.isEmpty()	false	false	false	0	0	0	0	null	null
clojure.lang.TransactionalHashMap.replace(K,V)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_remainder(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.equiv(float,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Agent.addWatch(Object,IFn)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.ifnonnull(Label)	false	false	false	0	0	1	1	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.ValIterator.next()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.compare(Object,Object)	false	false	true	0	0	0	4	null	null
clojure.lang.PersistentTree.vals(NodeIterator)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.SetExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.AFn.invoke(Object)	false	false	false	0	0	0	4	null	null
clojure.lang.Numbers.RatioOps.opsWith(LongOps)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.DoubleOps.isNeg(Number)	false	false	false	0	0	0	0	null	null
clojure.asm.ClassWriter.newClass(String)	false	false	false	0	0	13	13	null	null
clojure.asm.MethodWriter.writeShort(byte[],int,int)	false	false	false	0	0	3	3	null	null
clojure.asm.commons.SerialVersionUIDAdder.Item.equals(Object)	true	true	false	1	0	0	0	[c8d3ef3929e8049a84957002bc7e2071844bfb53]	public
clojure.lang.PersistentVector.seq()	false	false	false	0	0	8	8	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.VectorExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RatioNum.divide(int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.Node.left()	false	false	true	0	0	0	53	null	null
clojure.lang.Compiler.BodyExpr.emitStatement()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.arrayFor(int)	false	false	false	0	0	8	8	null	null
clojure.lang.Numbers.DoubleArrayOps.opsWith(FloatArrayOps)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.getFrom(Object,Object,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.BytecodeCompiler.RecurExpr.parse(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.quotient(double,double)	false	false	false	0	0	3	3	null	null
org.clojure.runtime.PersistentListIdentityMap.Link.capacity()	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberSymbol.invoke(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.NodeIterator.push(Node)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.PersistentListMap.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_float.index()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.SetExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Util.isPrimitive(Class)	false	false	false	0	0	9	9	null	null
clojure.lang.ARef.getValidator()	false	false	false	0	0	7	7	null	null
clojure.lang.BigNum.divideBy(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.TransientVector.popTail(int,Node)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.multiplyP(Object,Object)	false	false	false	0	0	4	4	null	null
clojure.asm.ClassWriter.get(Item)	false	false	false	0	0	16	16	null	null
clojure.lang.BytecodeCompiler.BodyExpr.parse(C,ISeq)	false	false	true	0	0	0	3	null	null
org.clojure.runtime.RT.iter(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.depth()	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.minus(long,float)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.Red.addLeft(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.mask(int,int)	false	false	true	0	0	0	9	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Stream.stream()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.CodeSizeEvaluator.visitInsn(int)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.LetExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.max(double,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.BigNum.equivTo(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Murmur3.hashInt(int)	false	false	false	0	0	1	1	null	null
clojure.asm.ClassAdapter.visitOuterClass(String,String,String)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentSet.iterator()	false	false	false	0	0	0	0	null	null
clojure.lang.RT.charCast(int)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Reflector.invokeInstanceMember(String,Object,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.lt(float,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongBitOps.flipBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.kvreduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ArrayStream.ArrayStream_char.next()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.byte_array(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.withMeta(IPersistentMap)	false	false	true	0	0	0	2	null	null
clojure.lang.FixNum.equivTo(int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.FixNum.equivTo(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Keyword.toString()	false	false	false	0	0	1	1	null	null
clojure.lang.Compile.main(String[])	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.equalKey(Object,Object)	false	false	false	0	0	6	7	null	null
clojure.lang.EdnReader.readString(String,IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.checkCast(Type)	false	false	false	0	0	23	26	null	null
clojure.lang.Numbers.multiplyP(long,long)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.max(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.ArrayNode.find(int,int,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.Item.isEqualTo(Item)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentTree.Red.addLeft(Node)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.divideBy(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.add(double,double)	false	false	false	0	0	3	6	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	3	null	null
clojure.lang.RatioNum.gt(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.LockingTransaction.barge(Info)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.Num.divide(BigInteger,BigInteger)	false	false	true	0	0	0	4	null	null
clojure.lang.PersistentHashtableMap.Seq.rest()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.longValue()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.loadLocal(int,Type)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.get(Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.pop()	false	false	false	0	0	1	1	null	null
clojure.asm.MethodAdapter.visitIntInsn(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_subtract(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.minus(double,float)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.pushNSandLoader(ClassLoader)	false	false	false	0	0	0	0	null	null
clojure.lang.Namespace.warnOrFailOnReplace(Symbol,Object,Object)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentArrayMap.Iter.next()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.index(int)	false	false	false	0	0	6	6	null	null
clojure.asm.commons.GeneratorAdapter.newLabel()	false	false	false	0	0	32	45	null	null
org.clojure.runtime.Obj.get(Comparable)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.Node.balanceRight(Node)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.Accessor.invoke(ThreadLocalData,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gte(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentQueue.equiv(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.AnExpr.emitStatement()	false	false	true	0	0	0	0	null	null
clojure.asm.ClassReader.getSuperName()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceExpr.compileStub(String,NewInstanceExpr,String[])	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentListIdentityMap.iterator()	false	false	true	0	0	0	0	null	null
clojure.lang.Namespace.toString()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.OpsP.decP(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Util.equiv(boolean,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Util.sneakyThrow(Throwable)	false	false	false	0	0	28	53	null	null
clojure.lang.Numbers.BigIntBitOps.flipBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.BodyExpr.emitUnboxed(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.uncheckedDoubleCast(long)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn3.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.catchException(Label,Label,Type)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentMap.entrySet()	false	false	false	0	0	0	0	null	null
clojure.lang.BigNum.shiftLeftBy(IntegerNum)	false	false	true	0	0	0	0	null	null
clojure.lang.Agent.validate(IFn,Object)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentHashMap2.ArrayNode.find(int,int,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.StreamSeq.create(IStream)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.closeOver(LocalBinding,FnMethod)	false	false	true	0	0	0	2	null	null
clojure.lang.Compiler.FnMethod.doEmit(ObjExpr,ClassVisitor)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.IteratorIter.iterate()	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.UnreadableReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.AnalyzerAdapter.visitLookupSwitchInsn(Label,int[],Label[])	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceExpr.build(IPersistentVector,IPersistentVector,Symbol,String,Symbol,ISeq)	true	false	true	1	2	0	2	[6362e0f2522c4f7b2b2e626016b291d4832bb58a]	package
clojure.lang.KeywordLookupSite.fault(Object,ILookupHost)	true	false	true	1	0	0	0	[2e7e41c9788b9cc02fe070d8e5319929d996ee32]	public
clojure.lang.Numbers.BigIntBitOps.shiftLeft(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.create(Object[])	false	false	false	0	0	214	218	null	null
clojure.lang.Numbers.addP(Object,Object)	false	false	false	0	0	3	3	null	null
clojure.lang.FnLoaderThunk.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.add(Object)	true	false	true	1	1	0	1	[7e7516821258dd51e411b51a8851c54320f64dc3]	public
clojure.asm.ByteVector.put12(int,int)	false	false	false	0	0	41	41	null	null
clojure.lang.PersistentHashMap2.NodeSeq.create(Object[])	false	false	true	0	0	0	2	null	null
clojure.lang.Compiler.loadFile(String)	true	false	false	1	4	1	4	[914c26752481ffd380b5e4f8e7754a7a68d27adc]	public
org.clojure.runtime.PersistentArray.resize(int)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.RatioNum.subtractFrom(Num)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.getField(Type,String,Type)	false	false	false	0	0	8	15	null	null
clojure.lang.PersistentTreeMap.comparator()	false	false	false	0	0	0	0	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.FixNum.floatValue()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.FixNum.multiplyBy(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.baseName(Symbol)	false	false	true	0	0	0	1	null	null
clojure.lang.LazyTransformer.listIterator()	false	false	false	0	0	0	0	null	null
clojure.asm.Label.visitSubroutine(Label,long,int)	true	true	false	1	3	3	3	[c8d3ef3929e8049a84957002bc7e2071844bfb53]	package
clojure.lang.MultiFn.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.floatValue()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.loadResourceScript(String,boolean)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.RestFn4.invoke(ThreadLocalData,Object,Object,Object,Object,Object,Cons)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.decP(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.FloatOps.opsWith(BigDecimalOps)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,ISeq)	false	false	true	0	0	0	19	null	null
clojure.lang.Agent.ThreadPool.execute(Runnable)	false	false	true	0	0	0	1	null	null
clojure.lang.APersistentMap.keySet()	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	5	5	null	null
clojure.lang.Agent.setState(Object)	false	false	false	0	0	2	2	null	null
clojure.lang.Compiler.HostExpr.tagToClass(Object)	false	false	false	0	0	13	13	null	null
clojure.asm.MethodWriter.visitLocalVariable(String,String,String,Label,Label,int)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.Tail.val()	false	false	true	0	0	0	0	null	null
clojure.lang.EdnReader.unread(PushbackReader,int)	false	false	false	0	0	7	7	null	null
org.clojure.runtime.Num.from(int)	false	false	true	0	0	0	13	null	null
clojure.lang.Numbers.shiftRightInt(int,int)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.NodeIterator.push(Node)	false	false	true	0	0	0	2	null	null
clojure.lang.Namespace.lookupAlias(Symbol)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.gt(long,long)	false	false	false	0	0	0	2	null	null
clojure.lang.Compiler.FnMethod.emit(FnExpr,ClassVisitor)	false	false	true	0	0	0	1	null	null
clojure.lang.LazyTransformer.remove(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.doCons(int,Object[],Object,Box)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentTreeMap.empty()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.InstanceFieldExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ImportExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.FixNum.divide(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.MutableVector.count()	false	false	true	0	0	0	0	null	null
clojure.lang.DoubleNum.oneMinus()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListMap.val()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Reflector.primBoxTypeMatch(Class,Class)	false	false	true	0	0	0	2	null	null
clojure.lang.RT.uncheckedCharCast(long)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.hasheq()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableMap.entriesFor(Object)	false	false	true	0	0	0	3	null	null
clojure.lang.ATransientMap.valAt(Object,Object)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.FixNum.onePlus()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListMap.Tail.capacity()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.RatioOps.add(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.quotient(long,long)	false	false	false	0	0	0	0	null	null
clojure.lang.Num.posPred(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.DynamicVar.create(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.count()	false	false	false	0	0	0	0	null	null
clojure.lang.Reflector.invokeMatchingMethod(List,Object,Object[])	false	false	true	0	0	0	2	null	null
org.clojure.runtime.PersistentListIdentityMap.Link.contains(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.nth(int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.readUnicodeChar(PushbackReader,int,int,int,boolean)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentArrayMap.Seq.setValue(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayChunk.count()	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentHybridMap.remove(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.iterator()	false	false	true	0	0	0	0	null	null
clojure.lang.TRef.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.SyntaxQuoteReader.sqExpandList(ISeq)	false	false	false	0	0	4	4	null	null
clojure.lang.PersistentStructMap.containsKey(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.LazilyPersistentVector.ChunkedSeq.count()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.DefExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.asm.ByteVector.putUTF8(String)	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.equiv(Object,Object)	false	false	false	0	0	2	9	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
clojure.asm.commons.SerialVersionUIDAdder.writeItems(Collection,DataOutput,boolean)	false	false	false	0	0	3	3	null	null
clojure.lang.Compiler.MapExpr.parse(C,IPersistentMap)	false	false	false	0	0	7	7	null	null
clojure.asm.ClassWriter.newString(String)	false	false	false	0	0	1	1	null	null
clojure.asm.MethodAdapter.visitInsn(int)	false	false	true	0	0	0	27	null	null
org.clojure.runtime.RestFn1.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.InstanceMemberInvoker.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberSymbol.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.create(ISeq)	false	false	false	0	0	0	0	null	null
clojure.lang.Namespace.findOrCreate(Symbol)	false	false	false	0	0	7	7	null	null
clojure.lang.Reflector.invokeInstanceMember(String,Object,Object,Object,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.BytecodeCompiler.analyzeSeq(C,ISeq,String)	false	false	true	0	0	0	1	null	null
clojure.asm.ClassAdapter.visitSource(String,String)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.InstanceFieldExpr.emitAssign(C,FnExpr,GeneratorAdapter,Expr)	false	false	true	0	0	0	0	null	null
clojure.lang.BigInt.remainder(BigInt)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.xor(Object,int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.Red.removeLeft(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.nodeSeq()	false	false	false	0	0	0	0	null	null
clojure.lang.MultiFn.dominates(Object,Object)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.max(Object,long)	false	false	false	0	0	0	0	null	null
clojure.lang.LazySeq.remove(int)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.LetExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.TryExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.ArrayNode.without(AtomicReference,int,int,Object,Box)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Transaction.commutate(TRef,IFn)	false	false	true	0	0	0	1	null	null
clojure.lang.ArgVector.peek()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.getMatchingParams(String,ArrayList,IPersistentVector,List)	false	false	false	0	0	3	3	null	null
clojure.lang.PersistentStructMap.iterator()	false	false	false	0	0	0	0	null	null
clojure.asm.MethodWriter.visitIntInsn(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.emitDeclaration()	false	false	true	0	0	0	1	null	null
clojure.lang.EdnReader.SetReader.invoke(Object,Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.FixNum.oneMinus()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.num(int)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.FixNum.gt(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.thunkNameStatic(int)	false	false	false	0	0	5	5	null	null
clojure.lang.PersistentTreeMap.doCompare(Object,Object)	false	false	false	0	0	5	5	null	null
clojure.lang.Numbers.divide(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.MapEntry.Seq.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.Attribute.read(ClassReader,int,int,char[],int,Label[])	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.unchecked_int_divide(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ObjMethod.locals()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.AHostExpr.isHostExpr()	false	false	true	0	0	0	0	null	null
clojure.lang.Keyword.find(Symbol)	false	false	false	0	0	2	2	null	null
clojure.lang.Compiler.FnExpr.thisName()	false	false	true	0	0	0	0	null	null
clojure.lang.Var.isDynamic()	false	false	false	0	0	1	3	null	null
clojure.lang.Compiler.NewExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.emitClearCloses(GeneratorAdapter)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.Reflector.invokeInstanceMember(String,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.box(long)	false	false	true	0	0	0	21	null	null
clojure.lang.Compiler.UnresolvedVarExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RestFn0.invoke(ThreadLocalData,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.readRet(int)	false	false	true	0	0	0	2	null	null
clojure.lang.LispReader.MapReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.TryFinallyExpr.parse(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	4	null	null
clojure.asm.commons.InstructionAdapter.and(Type)	false	false	false	0	0	2	2	null	null
clojure.lang.RatioNum.equiv(Num)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.Tail.find(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.float_array(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.Type.equals(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.multiply(double,long)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.BigIntegerBitOps.testBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Transaction.touch(TRef)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.opsWith(BigIntOps)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.entryAt(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderLexer.mFloatTypeSuffix()	false	false	true	0	0	0	4	null	null
clojure.lang.PersistentHashMap.containsKey(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.LazyTransformer.more()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceMethod.getMethodName()	false	false	false	0	0	1	1	null	null
clojure.lang.Util.equiv(Object,Object)	true	false	false	1	14	33	33	[ac484ba40cc1d94d42ce59e9df92b13e98ed0b6e]	public
clojure.lang.BigInt.toString()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.LocalVariablesSorter.setFrameLocal(int,Object)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentVector.TransientVector.ensureEditable()	false	false	false	0	0	7	7	null	null
org.clojure.runtime.PersistentListIdentityMap.first()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lte(long,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.FloatArrayOps.opsWith(BigDecimalOps)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableMap.seq()	false	false	true	0	0	0	0	null	null
clojure.asm.Frame.init(ClassWriter,int)	false	false	false	0	0	3	3	null	null
clojure.lang.Compiler.BodyExpr.emitReturn()	false	false	true	0	0	0	0	null	null
clojure.lang.Module.intern(String,String)	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.BigIntBitOps.xor(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Namespace.all()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.or(long,long)	false	false	false	0	0	3	3	null	null
clojure.lang.Compiler.RecurExpr.emitUnboxed(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.subList(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NumExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.CharExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.pop(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.or(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.getLineNumberingReader(Reader)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.remove(int)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.DoubleOps.opsWith(BigDecimalOps)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.editAndSet(AtomicReference,int,Object,int,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.LispReader.CommentReader.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.alength(int[])	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.bytes(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LazySeq.count()	false	false	false	0	0	1	4	null	null
clojure.lang.Compiler.isMacro(Object)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentListMap.add(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.KeywordInvokeExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.clearBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassReader.getImplicitFrame(Context)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RT.box(boolean)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.divide(long,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Iter.hasNext()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.num(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RatioNum.addTo(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.AMapEntry.entryAt(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.containsAll(Collection)	false	false	true	0	0	0	0	null	null
compilation.TestDispatch.someMethod(long,long)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
org.clojure.runtime.Var.getDynamicBinding(ThreadLocalData)	false	false	true	0	0	0	4	null	null
clojure.asm.Type.getArgumentsAndReturnSizes(String)	false	false	false	0	0	6	6	null	null
clojure.lang.PersistentHashMap.ArrayNode.ensureEditable(AtomicReference)	false	false	false	0	0	1	1	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassWriter.newClassItem(String)	false	false	false	0	0	5	5	null	null
clojure.lang.Numbers.unchecked_minus(double,double)	false	false	false	0	0	0	0	null	null
clojure.lang.BigNum.multiplyBy(Num)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitAnnotation(String,boolean)	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.onePlus()	false	false	true	0	0	0	0	null	null
clojure.asm.ClassWriter.newLong(long)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentHashMap2.NodeSeq.first()	false	false	true	0	0	0	0	null	null
clojure.lang.MapEntry.Iter.remove()	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.invoke(Object)	false	false	false	0	0	0	1	null	null
clojure.lang.ReaderParser.main(String[])	false	false	true	0	0	0	0	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassWriter.newField(String,String,String)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHashMap.NodeSeq.first()	false	false	false	0	0	0	0	null	null
clojure.lang.Module.find(String)	false	false	true	0	0	0	1	null	null
clojure.lang.BigNum.minusp()	false	false	true	0	0	0	0	null	null
clojure.lang.Keyword.find(String,String)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.remainder(double,long)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.DoubleOps.opsWith(LongOps)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.BodyExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.RatioNum.truncateBy(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.entriesFor(Object)	false	false	true	0	0	0	3	null	null
clojure.lang.PersistentArrayMap.Seq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.Var.unintern(Symbol)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.IntegerOps.opsWith(FloatArrayOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Stream.makeTap(IFn,IFn)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.FixNum.divide(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_negate(int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.Red.blacken()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.line()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHybridMap.createHashtableMap(Object[])	false	false	true	0	0	0	3	null	null
clojure.lang.DynamicVar.pushThreadBindings(Associative)	false	false	true	0	0	0	10	null	null
clojure.lang.Numbers.lte(float,long)	false	false	true	0	0	0	0	null	null
clojure.lang.TransactionalHashMap.containsKey(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.constants()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigDecimalOps.opsWith(BigDecimalOps)	false	false	false	0	0	0	0	null	null
clojure.lang.Num.gte(Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.doubleValue()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.negate()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.VarExpr.evalAssign(Expr)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.setValues(Object[])	false	false	false	0	0	0	9	null	null
clojure.lang.Numbers.shiftRight(long,int)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.multiplyP(Object,long)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.hashCode()	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentSet.remove(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.FixNum.gt(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashtableIdentityMap.create(int,PersistentArray)	false	false	true	0	0	0	0	null	null
clojure.asm.Label.inSubroutine(long)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.char_array(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RatioNum.truncateBy(BigInteger)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableMap.Iter.hasNext()	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.QuoteExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Reflector.invokeStaticMethod(Class,String,Object[])	false	false	false	0	0	4	4	null	null
clojure.lang.Numbers.LongOps.gte(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.ChunkedCons.more()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigDecimalOps.opsWith(BigIntegerOps)	false	false	true	0	0	0	0	null	null
clojure.lang.EdnReader.ListReader.invoke(Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LockingTransaction.enqueue(Action)	false	false	false	0	0	1	1	null	null
clojure.lang.ArraySeq.ArraySeq_boolean.reduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.pop2()	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.create(int,ILeaf,int,Object,Object,Box)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentHashtableMap.Seq.next(PersistentArray,int,ISeq,int)	false	false	true	0	0	0	2	null	null
clojure.lang.Compiler.FnExpr.constantType(int)	false	false	true	0	0	0	7	null	null
clojure.lang.StaticMemberInvoker.invoke(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.minusP(Object,double)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.uncheckedIntCast(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.set(int,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.MethodWriter.visitImplicitFirstFrame()	false	false	false	0	0	1	1	null	null
clojure.lang.RT.uncheckedFloatCast(byte)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.AnalyzerAdapter.pop()	false	false	false	0	0	25	25	null	null
clojure.lang.Numbers.add(double,float)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.first()	false	false	true	0	0	0	0	null	null
clojure.lang.DoubleNum.divide(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderLexer.mLINE_COMMENT()	false	false	true	0	0	0	1	null	null
clojure.lang.TRef.getThreadBinding()	false	false	true	0	0	0	4	null	null
clojure.lang.PersistentArray.resize(int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.TransientVector.persistent()	false	false	false	0	0	3	3	null	null
clojure.asm.Type.getDescriptor()	false	false	false	0	0	32	32	null	null
clojure.lang.Numbers.gte(int,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Num.truncateBigints(BigInteger,BigInteger)	false	false	true	0	0	0	3	null	null
clojure.lang.Numbers.long_array(int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.EdnReader.readDelimitedList(char,PushbackReader,boolean,Object)	false	false	false	0	0	4	4	null	null
clojure.lang.Reflector.setStaticField(String,String,Object)	true	false	false	1	0	0	1	[36868a7734f15c51eb1831aa9d72a14544496987]	public
org.clojure.runtime.RBSet.maxKey()	false	false	true	0	0	0	2	null	null
org.clojure.runtime.PersistentTree.keys()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LetExpr.canEmitPrimitive()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.dec(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentList.count()	false	false	false	0	0	0	1	null	null
clojure.lang.RT.shortCast(long)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceExpr.build(IPersistentVector,IPersistentVector,Symbol,String,String,Symbol,ISeq,Object)	false	false	true	0	0	0	2	null	null
clojure.lang.Tuple.nth(int)	false	false	true	0	0	0	2	null	null
clojure.lang.BytecodeCompiler.InstanceExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gt(long,float)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.BodyExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.getTypeNamed(String)	false	false	true	0	0	0	6	null	null
clojure.lang.PersistentTreeMap.Red.addLeft(Node)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.remainder(Object,Object)	false	false	false	0	0	4	4	null	null
clojure.lang.BytecodeCompiler.MonitorEnterExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHybridMap.get(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn1.invoke(ThreadLocalData,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.BigNum.subtractFrom(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.depth()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.DoubleOps.remainder(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.emitValue(Object,GeneratorAdapter)	false	false	false	0	0	9	9	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.find(int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ASeq.listIterator(int)	false	false	false	0	0	0	0	null	null
clojure.lang.RatioNum.intValue()	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.load(InputStream)	false	false	true	0	0	0	1	null	null
clojure.lang.Ref.commute(IFn)	false	false	true	0	0	0	3	null	null
clojure.lang.Compiler.NotExpr.emitStatement()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RatioNum.equivTo(int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableMap.Iter.remove()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayList.peek()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.analyzeBody(C,ISeq)	false	false	true	0	0	0	4	null	null
clojure.lang.Compiler.IfExpr.Parser.parse(C,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ArrayStream.ArrayStream_char.invoke()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.BitmapIndexedNode.find(int,int,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.minusP(long,double)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.reduceBigInteger(BigInteger)	false	false	true	0	0	0	1	null	null
clojure.lang.RT.keyword(String,String)	false	false	false	0	0	0	1	null	null
clojure.lang.Var.hasRoot()	false	false	false	0	0	3	8	null	null
clojure.lang.Numbers.lt(double,float)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.xor(Object,long)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.NodeIterator.next()	false	false	true	0	0	0	2	null	null
clojure.lang.BytecodeCompiler.referenceLocal(Symbol)	false	false	true	0	0	0	1	null	null
clojure.asm.MethodVisitor.visitCode()	false	false	false	0	0	25	25	null	null
clojure.lang.PersistentArray.Entry.rest()	false	false	true	0	0	0	1	null	null
clojure.asm.commons.GeneratorAdapter.throwException()	false	false	false	0	0	4	4	null	null
clojure.lang.BytecodeCompiler.StaticFieldExpr.eval()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.Link.put(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedShortCast(byte)	false	false	false	0	0	0	0	null	null
clojure.lang.LispReader.ListReader.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntBitOps.and(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassWriter.newConstItem(Object)	false	false	false	0	0	4	4	null	null
clojure.lang.Compiler.VarExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.remove(Object)	true	false	true	1	0	0	0	[ae623590ccb2fd017d67637b2f52e747b9b4ad73]	public
clojure.lang.Keyword.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.listIterator()	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.rangedIterator(int,int)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentListMap.Tail.find(Object)	false	false	true	0	0	0	0	null	null
clojure.asm.Type.getObjectType(String)	false	false	false	0	0	12	12	null	null
clojure.lang.Compiler.NumberExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.Var.create()	false	false	false	0	0	0	0	null	null
clojure.lang.RatioNum.gt(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerOps.quotient(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RatioNum.equiv(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.RedBranchVal.val()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.InstanceFieldExpr.emitAssign(C,FnExpr,GeneratorAdapter,Expr)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.boundedLength(ISeq,int)	false	false	false	0	0	2	6	null	null
clojure.lang.FnSeq.first()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentQueue.remove(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.equiv(long,float)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.NodeSeq.next()	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_long_subtract(long,long)	false	false	true	0	0	0	0	null	null
clojure.asm.Attribute.put(ClassWriter,byte[],int,int,int,ByteVector)	false	false	false	0	0	4	4	null	null
clojure.lang.Compiler.StaticFieldExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.ChunkedSeq.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.put(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.RestFn2.invoke(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.RT.charCast(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHashMap2.HashCollisionNode.ensureEditable(AtomicReference,int,Object[])	false	false	true	0	0	0	1	null	null
org.clojure.runtime.PersistentListIdentityMap.Tail.remove(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_int_remainder(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.LispReader.VarReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.truncateBy(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.SerialVersionUIDAdder.computeSHAdigest(byte[])	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.IntegerBitOps.bitOpsWith(LongBitOps)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentArray.contains(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.InstanceOfExpr.emitUnboxed(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentTree.black(Object,Object,Node,Node)	false	false	true	0	0	0	22	null	null
org.clojure.runtime.PersistentHybridMap.add(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RatioNum.gt(BigInteger)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn2.invoke(ThreadLocalData,Object,Object,Object,Object,Object,Cons)	false	false	true	0	0	0	0	null	null
clojure.lang.ASeq.indexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.MonitorEnterExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.Ref.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.DynamicClassLoader.getQuotedVal(int)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.LocalVariablesSorter.updateNewLocals(Object[])	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.LetFnExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceExpr.compileStub(String,NewInstanceExpr,String[],Object)	false	false	false	0	0	1	1	null	null
clojure.lang.RT.init()	true	false	false	1	3	0	3	[19449a772787d94dee4bb31f9b5081e934e79d90]	public
clojure.lang.Keyword.intern(Symbol)	false	false	false	0	0	8	8	null	null
org.clojure.runtime.PersistentTree.balanceLeftDel(Object,Object,Node,Node)	false	false	true	0	0	0	3	null	null
clojure.lang.Compiler.InstanceMethodExpr.canEmitPrimitive()	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_int.index()	false	false	false	0	0	0	0	null	null
clojure.lang.EdnReader.isTerminatingMacro(int)	false	false	false	0	0	1	1	null	null
clojure.lang.ASeq.seq()	false	false	false	0	0	8	9	null	null
clojure.lang.Var.find(Symbol)	false	false	false	0	0	0	2	null	null
org.clojure.runtime.RatioNum.onePlus()	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.multiply(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.Namespace.getMapping(Symbol)	false	false	false	0	0	6	6	null	null
org.clojure.runtime.AFn.applyToHelper(IFn,ISeq)	false	false	true	0	0	0	3	null	null
clojure.lang.PersistentArray.ValIter.next()	false	false	true	0	0	0	0	null	null
clojure.lang.Agent.dispatch(IFn,ISeq,Executor)	false	false	false	0	0	0	0	null	null
clojure.asm.AnnotationWriter.put(AnnotationWriter[],int,ByteVector)	false	false	false	0	0	2	2	null	null
clojure.lang.Compiler.TryExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.Seq.getKey()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.vals()	false	false	true	0	0	0	0	null	null
clojure.lang.AMapEntry.count()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RestFn4.applyTo(ThreadLocalData,Cons)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderParser.mapExpression()	false	false	true	0	0	0	3	null	null
clojure.lang.Numbers.IntegerOps.remainder(Number,Number)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.setValues(ThreadLocalData,Object,Object)	false	false	true	0	0	0	9	null	null
org.clojure.runtime.RatioNum.multiplyBy(Num)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.create(Object,Object)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.RBSet.ValIterator.hasNext()	false	false	true	0	0	0	0	null	null
clojure.lang.Var.isBound()	false	false	false	0	0	13	14	null	null
clojure.lang.Numbers.RatioOps.quotient(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.InvokeExpr.emitProto(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	1	1	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LazySeq.equals(Object)	false	false	false	0	0	0	1	null	null
clojure.lang.ReaderParser.literal()	false	false	true	0	0	0	1	null	null
clojure.asm.ByteVector.putLong(long)	false	false	false	0	0	2	2	null	null
clojure.lang.Var.getRoot()	false	false	true	0	0	0	3	null	null
clojure.lang.FixNum.gt(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassAdapter.visit(int,int,String,String,String,String[])	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Link.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.line()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.without(AtomicReference,int,Object,Box)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_char.count()	false	false	false	0	0	0	0	null	null
clojure.asm.ClassAdapter.visitMethod(int,String,String,String,String[])	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.Red.addRight(Node)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.mul(Type)	false	false	false	0	0	4	4	null	null
clojure.lang.Compiler.IfExpr.emit(C,ObjExpr,GeneratorAdapter)	true	false	false	1	0	0	0	[c37c15c81a299c617779bff738480b1a2fb45524]	public
clojure.lang.Murmur3.hashUnordered(Iterable)	true	false	false	1	2	3	3	[17b18350bdd28154241bc7ae80f423a5976c6de2]	public
clojure.lang.PersistentTreeSet.seqFrom(Object,boolean)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.multiply(Object,Object)	false	false	false	0	0	4	9	null	null
clojure.lang.Compiler.NewExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.DoubleArrayOps.opsWith(DoubleOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.BodyExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.LazyTransformer.addAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_int.count()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListMap.Iter.next()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Link.first()	false	false	true	0	0	0	0	null	null
clojure.lang.LazyTransformer.iterator()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.IntegerOps.opsWith(RatioOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LetExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_float.next()	false	false	false	0	0	0	0	null	null
clojure.lang.RT.find(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object)	false	false	false	0	0	23	23	null	null
clojure.lang.PersistentList.EmptyList.iterator()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArray.Seq.count()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.QuoteExpr.val()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.BigNum.truncateDivide(Num)	false	false	true	0	0	0	0	null	null
clojure.asm.MethodWriter.getNewOffset(int[],int[],Label)	false	false	false	0	0	5	5	null	null
clojure.asm.commons.AnalyzerAdapter.visitMethodInsn(int,String,String,String)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Accessor.invoke(ThreadLocalData,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.TRef.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberInvoker.invoke()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.isInline(Object,int)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RatioNum.negate()	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.size()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.equals(Object)	false	false	false	0	0	1	1	null	null
clojure.asm.commons.GeneratorAdapter.invokeInterface(Type,Method)	false	false	false	0	0	11	13	null	null
clojure.lang.APersistentVector.remove(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.main(String[])	false	false	true	0	0	0	0	null	null
org.clojure.runtime.FixNum.truncateBy(int)	false	false	true	0	0	0	0	null	null
clojure.asm.MethodWriter.visitCode()	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.peek()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.cloneAndSet(INode[],int,INode)	false	false	true	0	0	0	3	null	null
clojure.lang.PersistentTree.NodeIterator.hasNext()	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.quotient(double,long)	false	false	false	0	0	0	0	null	null
clojure.asm.Type.getInternalName(Class)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.ThrowExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.asm.Frame.merge(ClassWriter,Frame,int)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentArray.iterator()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.aclone(long[])	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.multiply(long,long)	false	false	false	0	0	1	2	null	null
clojure.lang.ReaderParser.method()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.ObjMethod.argLocals()	false	false	false	0	0	0	0	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.InstanceFieldExpr.evalAssign(Expr)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.KeyIterator.remove()	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayStream.invoke()	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentArray.entryAt(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.shiftLeft(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.shr(Type)	false	false	false	0	0	2	2	null	null
clojure.lang.ArrayIter.create()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Red.redden()	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_double.reduce(IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.DoubleArrayOps.opsWith(BigDecimalOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.InstanceExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.create(int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.KeyIterator.remove()	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.equivTo(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.asm.MethodWriter.visitInvokeDynamicInsn(String,String,Handle,Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NumExpr.emitBigInteger(GeneratorAdapter,Num)	false	false	true	0	0	0	3	null	null
clojure.lang.Compiler.VarExpr.getName()	false	false	true	0	0	0	2	null	null
clojure.lang.DoubleNum.minusp()	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.InstanceMethodExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.DynamicVar.get()	false	false	true	0	0	0	34	null	null
clojure.lang.PersistentTreeMap.contains(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.listStar(Object,Object,Object,Cons)	false	false	true	0	0	0	2	null	null
clojure.lang.Transaction.setTransaction(Transaction)	false	false	true	0	0	0	2	null	null
clojure.lang.Compiler.ObjMethod.column()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RatioNum.equivTo(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.RatioNum.plusp()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.charCast(short)	false	false	false	0	0	0	0	null	null
clojure.lang.TransactionalHashMap.commutePut(K,V)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.BlackBranch.redden()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.count()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.InstanceFieldExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassReader.readByte(int)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.RBSet.black(Object,Object,Node,Node)	false	false	true	0	0	0	22	null	null
clojure.lang.ASeq.peek()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.getStatic(Type,String,Type)	false	false	false	0	0	20	20	null	null
org.clojure.runtime.PersistentListIdentityMap.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.IntegerNum.shiftLeft(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.ThrowExpr.parse(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.asm.commons.SerialVersionUIDAdder.Item.compareTo(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Num.compareTo(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.FixNum.lt(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.NodeSeq.create(Object[],int,ISeq)	false	false	false	0	0	3	3	null	null
clojure.lang.BigNum.shiftRightBy(IntegerNum)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassWriter.put(Item)	false	false	false	0	0	16	16	null	null
org.clojure.runtime.RT.list(Object)	false	false	true	0	0	0	5	null	null
clojure.lang.PersistentTreeSet.entryKey(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.analyzeLetFn(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.ListExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.create(List)	false	false	false	0	0	0	2	null	null
clojure.lang.PersistentTreeMap.ValIterator.next()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Obj.has(Comparable)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassReader.readUTF(int,int,char[])	false	false	false	0	0	3	3	null	null
clojure.lang.PersistentTreeSet.rseq()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.equiv(Object,double)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.currentNS()	false	false	false	0	0	20	20	null	null
clojure.lang.Numbers.inc(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentSet.retainAll(Collection)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.FixNum.equiv(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.SubVector.cons(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.load(Reader)	true	false	false	1	1	0	6	[914c26752481ffd380b5e4f8e7754a7a68d27adc]	public
clojure.asm.ClassWriter.newInvokeDynamicItem(String,String,Handle,Object[])	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.add(Object,float)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.AssignExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.SetExpr.parse(C,IPersistentSet)	false	false	false	0	0	1	1	null	null
clojure.asm.ClassAdapter.visitAttribute(Attribute)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.IntegerBitOps.and(Number,Number)	false	false	true	0	0	0	0	null	null
org.clojure.tools.TypeDump.visitMethod(int,String,String,String,String[])	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.RSeq.first()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.equalKey(Object,Object)	false	false	true	0	0	0	7	null	null
clojure.lang.Compiler.primClass(Class)	false	false	false	0	0	1	1	null	null
clojure.lang.TransactionalHashMap.isEmpty()	false	false	false	0	0	0	0	null	null
clojure.lang.Transaction.getCurrent(TRef)	false	false	true	0	0	0	3	null	null
clojure.lang.PersistentVector.withMeta(IPersistentMap)	false	false	false	0	0	3	4	null	null
clojure.lang.PersistentTree.add(Node,Object,Object,Box)	false	false	true	0	0	0	4	null	null
clojure.lang.Numbers.add(Object,double)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentHashtableMap.grow()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.NumberExpr.emitUnboxed(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	2	2	null	null
clojure.lang.RestFn1.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Murmur3.hashUnencodedChars(CharSequence)	false	false	false	0	0	1	1	null	null
clojure.asm.Label.addReference(int,int)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.RT.cons(Object,Cons)	false	false	true	0	0	0	17	null	null
clojure.lang.PersistentTree.red(Object,Object,Node,Node)	false	false	true	0	0	0	27	null	null
clojure.lang.RT.uncheckedLongCast(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.gt(float,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedLongCast(long)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.equiv(float,float)	false	false	true	0	0	0	4	null	null
clojure.lang.Numbers.LongOps.lt(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.RedBranch.left()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.minus(long,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.APersistentSet.count()	false	false	false	0	0	2	9	null	null
clojure.lang.Compiler.FnExpr.eval()	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentTreeMap.Seq.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitArray(String)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.Method.map(String,boolean)	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.LongBitOps.xor(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.AMapEntry.equals(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.TransientHashMap.doAssoc(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.xor(long,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.ClassAdapter.visitField(int,String,String,String,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gte(double,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LocalBindingExpr.canEmitPrimitive()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.BooleanExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.asm.MethodAdapter.visitLdcInsn(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.DynamicVar.intern(Symbol,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArray.hashCode()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.RatioOps.isPos(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.EdnReader.UnreadableReader.invoke(Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	11	null	null
clojure.lang.Namespace.areDifferentInstancesOfSameClassName(Class,Class)	false	false	false	0	0	1	1	null	null
clojure.asm.commons.InstructionAdapter.visitJumpInsn(int,Label)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.alength(long[])	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.multiplyP(double,double)	false	false	false	0	0	2	2	null	null
clojure.lang.Compiler.NilExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.assocN(int,Object)	false	false	false	0	0	1	3	null	null
clojure.lang.Numbers.IntegerOps.negate(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayIter.create(Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.assoc(int,int,Object,Object,Box)	true	false	false	1	0	0	0	[eedcf35479737ab1136e3b8a00b2759190a73fdb]	public
clojure.lang.Var.Unbound.throwArity(int)	false	false	false	0	0	0	0	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Reflector.getField(Class,String,boolean)	false	false	false	0	0	9	9	null	null
org.clojure.runtime.Keyword.toString()	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.NumExpr.val()	false	false	true	0	0	0	0	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.DoubleOps.lt(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.asm.FieldWriter.visitEnd()	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderLexer.recover(RecognitionException)	false	false	true	0	0	0	14	null	null
clojure.lang.TRef.invoke(Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.VarExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.KeyIterator.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.LongBitOps.combine(BitOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Num.from(long)	false	false	true	0	0	0	4	null	null
org.clojure.runtime.RBTree.RedBranch.balanceLeft(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListMap.get(Object)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassReader.readUTF8(int,char[])	false	false	false	0	0	52	52	null	null
clojure.lang.LazilyPersistentVector.count()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.AdviceAdapter.addBranches(Label,Label[])	false	false	false	0	0	2	2	null	null
org.clojure.runtime.TRef.compareTo(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.remainder(long,long)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerOps.opsWith(IntegerOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnMethod.parse(ObjExpr,ISeq,boolean)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.Num.from(long)	false	false	true	0	0	0	3	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Node.balanceLeft(Node)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RT.setValues(ThreadLocalData,Object,Object,Object,Object,Object,Cons)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object,Object,Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.Actor.clearErrors()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.minusP(long,Object)	false	false	false	0	0	0	0	null	null
clojure.main.main(String[])	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.minusP(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.contains(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.BlackBranchVal.redden()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedFloatCast(float)	false	false	false	0	0	0	0	null	null
clojure.lang.BigNum.addTo(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.minus(long)	false	false	false	0	0	1	1	null	null
clojure.lang.RT.dissoc(Object,Object)	false	false	false	0	0	2	2	null	null
clojure.asm.ClassReader.readAnnotationValues(int,char[],boolean,AnnotationVisitor)	false	false	false	0	0	12	12	null	null
clojure.lang.ArrayIter.ArrayIter_int.hasNext()	false	false	false	0	0	0	0	null	null
clojure.lang.EdnReader.matchNumber(String)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.min(long,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Accessor.invoke(ThreadLocalData,Object,Object,Object,Object,Object,Cons)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceExpr.DeftypeParser.parse(C,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.BigNum.oneMinus()	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.indexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.balanceRightDel(Object,Object,Node,Node)	false	false	true	0	0	0	2	null	null
clojure.lang.Compiler.analyzeInstanceInvoke(InstanceMemberInvoker,Expr,PersistentVector)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.LongBitOps.and(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashtableIdentityMap.createListMap(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.keywords()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.asTransient()	false	false	false	0	0	1	1	null	null
clojure.lang.EnumerationSeq.writeObject(ObjectOutputStream)	false	false	false	0	0	0	0	null	null
clojure.lang.ATransientMap.count()	false	false	false	0	0	0	0	null	null
clojure.lang.RT.baseLoader()	false	false	false	0	0	10	10	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArray.length()	false	false	true	0	0	0	20	null	null
clojure.lang.DynamicVar.getRoot()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.capacity()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.isPos(float)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Var.toString()	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.BigDecimalOps.lt(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.LazySeq.addAll(int,Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.HashCollisionNode.editAndSet(AtomicReference,int,Object,int,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.add(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentHashMap.TransientHashMap.ensureEditable()	false	false	false	0	0	0	0	null	null
clojure.lang.Var.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.rem(Type)	false	false	false	0	0	4	4	null	null
clojure.lang.PersistentTree.iterator()	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.BigIntOps.combine(Ops)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn0.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.macroexpand1(Object)	false	false	false	0	0	2	2	null	null
clojure.lang.BytecodeCompiler.NilExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	5	null	null
clojure.lang.Compiler.StaticFieldExpr.emitUnboxed(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lt(int,long)	false	false	true	0	0	0	0	null	null
clojure.lang.BigInt.toBigInteger()	false	false	false	0	0	12	12	null	null
clojure.lang.Murmur3.mixH1(int,int)	false	false	false	0	0	5	5	null	null
clojure.lang.Numbers.toBigInt(Object)	false	false	false	0	0	15	15	null	null
clojure.lang.BigInt.longValue()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.create(Map)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentArrayMap.TransientArrayMap.doPersistent()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.min()	true	false	true	2	1	0	1	[4770e052cc5df518e2d32632398e46abacb93524]	public
clojure.lang.PersistentTreeMap.Seq.first()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.ThreadLocalData.get()	false	false	true	0	0	0	6	null	null
clojure.lang.PersistentArrayMap.Iter.val()	false	false	true	0	0	0	1	null	null
clojure.lang.APersistentSet.invoke(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LockingTransaction.runInTransaction(Callable)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.addAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.dupX1()	false	false	false	0	0	2	3	null	null
clojure.lang.PersistentVector.MutableVector.assocN(int,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.clearPathRoot()	false	false	false	0	0	1	1	null	null
clojure.asm.AnnotationVisitor.visitAnnotation(String,String)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentHashMap2.create(Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.ArgVector.nth(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.TheVarExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.find(int,int,Object,Object)	true	true	false	1	0	0	0	[eedcf35479737ab1136e3b8a00b2759190a73fdb]	public
clojure.lang.Numbers.FloatOps.inc(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.isNeg(double)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.ensureEditable(AtomicReference,int,Object[])	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RBTree.Red.addRight(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.ASeq.toArray(Object[])	false	false	false	0	0	0	0	null	null
clojure.asm.MethodWriter.writeFrameType(Object)	false	false	false	0	0	4	4	null	null
clojure.asm.commons.AnalyzerAdapter.pop(int)	false	false	false	0	0	25	25	null	null
clojure.asm.commons.GeneratorAdapter.push(int)	false	false	false	0	0	12	13	null	null
clojure.lang.RT.formatStandard(Writer,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.boxClass(Class)	false	false	false	0	0	3	3	null	null
org.clojure.runtime.RBTree.replace(Node,Object,Object)	false	false	true	0	0	0	3	null	null
clojure.lang.Compiler.munge(String)	false	false	false	0	0	13	13	null	null
clojure.asm.Handle.getTag()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.createEntryMap(Object,Object)	false	false	true	0	0	0	2	null	null
clojure.lang.FixNum.intValue()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.FixNum.longValue()	false	false	true	0	0	0	0	null	null
clojure.lang.IntegerNum.bitNot(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.longCast(double)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RT.setValues(ThreadLocalData,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Tail.val()	false	false	true	0	0	0	0	null	null
clojure.lang.ASeq.equiv(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.FixNum.shiftRight(int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentStructMap.Seq.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.emitExpression()	false	false	true	0	0	0	0	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.TransientVector.pop()	false	false	false	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_double.next()	false	false	false	0	0	0	0	null	null
clojure.lang.RT.aget(int[],int)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.getHash()	false	false	true	0	0	0	0	null	null
clojure.lang.Transaction.getCommitPoint()	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentList.EmptyList.add(int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderParser.caretExpression()	false	false	true	0	0	0	1	null	null
clojure.lang.EdnReader.readToken(PushbackReader,char,boolean)	false	false	false	0	0	2	2	null	null
clojure.lang.ArraySeq.ArraySeq_long.index()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigDecimalOps.negate(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.divide(int,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn5.invoke(Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.DynamicVar.unintern(Symbol)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.TryFinallyExpr.hasJavaClass()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Black.addRight(Node)	false	false	false	0	0	0	0	null	null
clojure.asm.ByteVector.putShort(int)	false	false	false	0	0	137	137	null	null
clojure.lang.PersistentTree.contains(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.or(int,int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.intCast(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.columnDeref()	false	false	false	0	0	17	17	null	null
clojure.lang.PersistentArray.assocN(int,Object)	false	false	true	0	0	0	4	null	null
clojure.lang.Compiler.StringExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.NodeIterator.push(Node)	false	false	false	0	0	2	2	null	null
clojure.lang.RT.uncheckedDoubleCast(short)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.AnalyzerAdapter.visitInvokeDynamicInsn(String,String,Handle,Object[])	false	false	false	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitEnum(String,String,String)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	8	null	null
clojure.lang.Numbers.unchecked_dec(long)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitInsn(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.add(int,long)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.length()	false	false	true	0	0	0	1	null	null
clojure.lang.BytecodeCompiler.EqlRefExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedCharCast(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_long_divide(long,long)	false	false	true	0	0	0	0	null	null
clojure.lang.Reflector.boxArg(Class,Object)	false	false	false	0	0	4	4	null	null
clojure.lang.Numbers.BigIntOps.quotient(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.IfExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.remove(Node,Object,Box)	false	false	true	0	0	0	3	null	null
clojure.lang.Module.find(Symbol)	false	false	true	0	0	0	2	null	null
clojure.lang.RT.count(Counted)	false	false	true	0	0	0	4	null	null
clojure.lang.PersistentHashtableMap.entryAt(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.vals(NodeIterator)	false	false	true	0	0	0	1	null	null
clojure.lang.RT.seqToTypedArray(ISeq)	true	false	false	1	0	0	0	[7c8af7266505c3425712f6b48b5f250114015c20]	public
clojure.asm.MethodAdapter.visitLabel(Label)	false	false	true	0	0	0	4	null	null
clojure.lang.PersistentHashtableIdentityMap.iterator()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.setBit(Object,long)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.createNode(AtomicReference,int,Object,Object,int,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.EdnReader.readUnicodeChar(PushbackReader,int,int,int,boolean)	false	false	false	0	0	2	2	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	10	10	null	null
clojure.lang.PersistentVector.isEmpty()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn2.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.getBoxedType(Type)	false	false	false	0	0	2	2	null	null
clojure.lang.Compiler.HostClassExpr.emitHostExpr()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.NewExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.IntegerOps.opsWith(BigDecimalOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.divide(float,double)	false	false	true	0	0	0	0	null	null
clojure.lang.ASeq.addAll(Collection)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.find(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.TRef.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.MethodWriter.visitAnnotation(String,boolean)	false	false	false	0	0	0	0	null	null
clojure.lang.Obj.attrs()	false	false	true	0	0	0	0	null	null
clojure.asm.Frame.pop()	false	false	false	0	0	25	25	null	null
org.clojure.runtime.FixNum.truncateDivide(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.Cons.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Link.contains(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.RedBranch.balanceLeft(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.valAt(Object)	true	false	true	1	0	0	1	[e997be6fcd8fa7f4529de3767e6cd799b6687416]	public
clojure.lang.LispReader.ListReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.KeywordInvokeExpr.emit2(C,ObjExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Range.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.lookupVar(Symbol)	false	false	true	0	0	0	1	null	null
clojure.lang.ArgVector.assoc(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
clojure.lang.BigNum.doubleValue()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Accessor.invoke()	false	false	true	0	0	0	0	null	null
clojure.lang.ARef.getWatches()	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.DoubleOps.opsWith(BigIntegerOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceExpr.ReifyParser.parse(C,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerBitOps.not(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.MutableVector.ensureEditable(Node)	false	false	true	0	0	0	3	null	null
clojure.lang.PersistentTreeMap.BlackVal.val()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.dup2()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitParameterAnnotation(int,String,boolean)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.depth(Node)	false	false	true	0	0	0	3	null	null
org.clojure.runtime.RestFn4.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.Type.getSort()	false	false	false	0	0	15	15	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.oneMinus()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.FullNode.Seq.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.get(Object,Object)	true	false	false	1	23	36	36	[f81e612cc9ff91ddefc1d86e270cd7f018701802]	public
clojure.lang.BigNum.bitXor(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.create(List)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderLexer.mIdentifier()	false	false	true	0	0	0	6	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.load(String,boolean)	false	false	false	0	0	1	4	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.box(double)	false	false	false	0	0	0	1	null	null
clojure.lang.PersistentVector.create(ISeq)	false	false	false	0	0	2	2	null	null
clojure.lang.Obj.getAttr(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.toString()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceExpr.compileLookupThunk(NewInstanceExpr,Symbol)	false	false	true	0	0	0	1	null	null
clojure.asm.ClassReader.getInterfaces()	false	false	false	0	0	0	0	null	null
clojure.lang.ASeq.listIterator()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.Node.right()	false	false	true	0	0	0	53	null	null
clojure.lang.TRef.currentVal()	false	false	true	0	0	0	25	null	null
org.clojure.runtime.PersistentListIdentityMap.key()	false	false	true	0	0	0	0	null	null
clojure.lang.Keyword.invoke(Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.load(int,Type)	false	false	false	0	0	5	5	null	null
clojure.lang.Compiler.IdenticalExpr.getJavaClass()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.arraylength()	false	false	false	0	0	1	1	null	null
org.clojure.runtime.Transaction.set(TRef,Object)	false	false	true	0	0	0	3	null	null
clojure.lang.DynamicVar.getThreadBinding()	false	false	true	0	0	0	2	null	null
clojure.lang.Compiler.analyzeInstanceInvoke(InstanceMemberInvoker,Expr,PersistentArrayList)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.InstanceOfExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.Seq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.ArgReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.box(short)	false	false	false	0	0	0	1	null	null
clojure.lang.Compiler.FnExpr.name()	false	false	true	0	0	0	0	null	null
clojure.lang.Stream.makeSeq(IFn)	false	false	true	0	0	0	1	null	null
clojure.lang.Symbol.withMeta(IPersistentMap)	false	false	false	0	0	3	3	null	null
clojure.lang.BytecodeCompiler.StaticMethodExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Reflector.invokeInstanceMember(String,Object,Object[])	false	false	false	0	0	0	18	null	null
clojure.lang.LazyCons.first()	false	false	true	0	0	0	1	null	null
org.clojure.runtime.RestFn0.invoke(Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.lt(Num)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.put(Object,Object)	false	false	true	0	0	0	2	null	null
clojure.lang.Var.resetThreadBindingFrame(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.TransactionalHashMap.get(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.assocEx(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RatioNum.divideBy(Num)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Transaction.getNextSeq()	false	false	true	0	0	0	2	null	null
clojure.lang.Var.setDynamic(boolean)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.FloatOps.combine(Ops)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lt(long,long)	false	false	false	0	0	0	2	null	null
clojure.lang.Compiler.maybePrimitiveType(Expr)	false	false	false	0	0	15	15	null	null
org.clojure.runtime.RT.listStar(Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	2	null	null
clojure.lang.ReaderParser.keyword()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.MethodParamExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.NodeIterator.push(Node)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.PersistentArrayMap.empty()	false	false	true	0	0	0	1	null	null
clojure.lang.RT.vals(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.CaseExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RatioNum.intValue()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHybridMap.capacity()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.min(double,double)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.visitMethodInsn(int,String,String,String)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.FloatOps.add(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.Seq.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.BlackVal.val()	false	false	true	0	0	0	0	null	null
clojure.main.legacy_script(String[])	false	false	false	0	0	1	1	null	null
clojure.lang.BigNum.bitAnd(int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.ValIterator.remove()	false	false	true	0	0	0	0	null	null
clojure.asm.MethodWriter.visitMultiANewArrayInsn(String,int)	false	false	false	0	0	0	0	null	null
clojure.lang.Transaction.getTransaction()	false	false	true	0	0	0	6	null	null
clojure.lang.TRef.set(T)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassReader.getMaxStringLength()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.analyzeNot(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.DoubleNum.longValue()	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.CtorReader.readTagged(PushbackReader,Symbol)	false	false	false	0	0	1	1	null	null
clojure.lang.AFn.throwArity(int)	false	false	false	0	0	45	45	null	null
clojure.lang.RT.eql(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object)	false	false	false	0	0	21	21	null	null
clojure.lang.PersistentListMap.Tail.add(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.ChunkedSeq.count()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.create(Object[])	false	false	false	0	0	1	3	null	null
clojure.lang.Compiler.EmptyExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Keyword.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NumExpr.hasJavaClass()	false	false	true	0	0	0	0	null	null
compilation.TestDispatch.someMethod(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderLexer.mWS()	false	false	true	0	0	0	1	null	null
clojure.lang.RestFn0.invoke(Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Accessor.invoke(ThreadLocalData,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.AnnotationWriter.getSize()	false	false	false	0	0	9	9	null	null
clojure.lang.ArrayIter.ArrayIter_float.remove()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.IntegerOps.opsWith(IntegerOps)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.FullNode.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.constantName(int)	false	false	true	0	0	0	5	null	null
org.clojure.runtime.RestFn1.invoke(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.boolean_array(int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.nthFrom(Object,int,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.ArgVector.valAt(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.KeyIterator.remove()	false	false	false	0	0	0	0	null	null
clojure.lang.ChunkBuffer.chunk()	false	false	false	0	0	0	0	null	null
clojure.lang.MultiFn.invoke()	false	false	false	0	0	0	0	null	null
clojure.lang.LazyTransformer.toArray(Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayList.assocN(int,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.XMLHandler.startElement(String,String,String,Attributes)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.MethodExpr.emitArgsAsArray(IPersistentVector,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	8	null	null
clojure.lang.RT.uncheckedFloatCast(long)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.remove(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.FixNum.truncateBy(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.parse(C,ISeq,String)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.CaseExpr.emitThenForHashes(ObjExpr,GeneratorAdapter,Expr,Expr,Label,boolean)	false	false	false	0	0	1	1	null	null
clojure.asm.Handler.remove(Handler,Label,Label)	false	false	false	0	0	2	2	null	null
clojure.lang.LockingTransaction.doSet(Ref,Object)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.BigIntBitOps.combine(BitOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntBitOps.testBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.KeywordExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	2	null	null
clojure.lang.StringSeq.create(CharSequence)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentListIdentityMap.Tail.put(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.push(Type)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.cast(Type,Type)	false	false	false	0	0	5	5	null	null
clojure.lang.Actor.get()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.BodyExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.flipBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Atom.deref()	false	false	false	0	0	4	4	null	null
clojure.lang.PersistentVector.MutableVector.editableRoot(Node)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.throwIntOverflow()	false	false	false	0	0	7	12	null	null
org.clojure.runtime.Keyword.invoke(ThreadLocalData,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.TheVarExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderLexer.mCharacterLiteral()	false	false	true	0	0	0	1	null	null
org.clojure.runtime.RBSet.remove(Node,Object,Box)	false	false	true	0	0	0	3	null	null
clojure.lang.Numbers.LongOps.opsWith(LongOps)	false	false	false	0	0	0	0	null	null
clojure.lang.Delay.deref()	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.ClassExpr.getJavaClass()	false	false	true	0	0	0	0	null	null
clojure.lang.TObj.putAttr(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.TransientArrayMap.doCount()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.AnalyzerAdapter.visitLabel(Label)	false	false	false	0	0	0	0	null	null
clojure.lang.LazilyPersistentVector.create(Collection)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.PersistentListIdentityMap.Link.find(Object)	false	false	true	0	0	0	3	null	null
org.clojure.runtime.BigNum.truncateDivide(ThreadLocalData,Num)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.equiv(long,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.EdnReader.DiscardReader.invoke(Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntBitOps.setBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.size()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.InstanceExpr.getJavaClass()	false	false	true	0	0	0	0	null	null
clojure.java.api.Clojure.asSym(Object)	false	false	false	0	0	3	3	null	null
clojure.lang.Reflector.invokeMatchingMethod(String,List,Object,Object[])	false	false	false	0	0	5	5	null	null
clojure.lang.PersistentHashMap2.ArrayNode.Seq.create(INode[])	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.ConstantExpr.val()	false	false	false	0	0	1	1	null	null
clojure.lang.AMapEntry.rseq()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.AnalyzerAdapter.visitInsn(int)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.CharExpr.emitExpression()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.ObjMethod.emitClearLocals(GeneratorAdapter)	false	false	false	0	0	11	11	null	null
clojure.lang.RT.aset(int[],int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.MultiFn.preferMethod(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListMap.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.isNeg(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentMap.KeySeq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayIdentityMap.createHT(Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.ASeq.add(int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Keyword.invoke(Object,Object,Object,Object,Object,Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.createWithCheck(Object[])	false	false	false	0	0	1	1	null	null
clojure.asm.commons.InstructionAdapter.ificmple(Label)	false	false	false	0	0	1	1	null	null
clojure.lang.Range.reduce(IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.isNeg(int)	false	false	true	0	0	0	0	null	null
clojure.lang.EnumerationSeq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.RatioOps.opsWith(BigDecimalOps)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.maybeResolveIn(Namespace,Symbol)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.unchecked_minus(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashSet.create(Object[])	false	false	false	0	0	0	1	null	null
clojure.lang.PersistentHashMap.ArrayNode.Seq.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentStructMap.entryAt(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.lookupVar(Symbol,boolean)	false	false	true	0	0	0	4	null	null
clojure.asm.commons.InstructionAdapter.nop()	false	false	false	0	0	1	1	null	null
clojure.main.legacy_repl(String[])	false	false	false	0	0	1	1	null	null
clojure.asm.commons.AnalyzerAdapter.push(Object)	false	false	false	0	0	79	79	null	null
clojure.lang.Compiler.UnresolvedVarExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.BitmapIndexedNode.index(int)	false	false	true	0	0	0	6	null	null
clojure.lang.Compiler.StaticInvokeExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.asm.ClassReader.readClass(InputStream,boolean)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.FloatOps.multiply(Number,Number)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.count()	false	false	true	0	0	0	1	null	null
clojure.lang.Namespace.intern(Symbol)	false	false	false	0	0	5	5	null	null
clojure.asm.MethodVisitor.visitMultiANewArrayInsn(String,int)	false	false	false	0	0	6	6	null	null
org.clojure.runtime.FixNum.truncateBy(ThreadLocalData,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Ratio.floatValue()	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.addAll(int,Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Tail.put(Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.BigNum.toString()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.toRatio(Object)	false	false	false	0	0	18	18	null	null
clojure.lang.RT.length(ISeq)	false	false	false	0	0	6	6	null	null
clojure.test.ReflectorTryCatchFixture.fail(Long)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.subsumes(Class[],Class[])	false	false	false	0	0	3	3	null	null
clojure.asm.MethodAdapter.visitAnnotation(String,boolean)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.box(Type)	true	false	false	1	3	3	3	[c8d3ef3929e8049a84957002bc7e2071844bfb53]	public
clojure.lang.Numbers.divide(BigInteger,BigInteger)	false	false	false	0	0	4	5	null	null
clojure.lang.Compiler.NotExpr.emitExpression()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.loadLib(String,boolean)	false	false	true	0	0	0	4	null	null
clojure.lang.Var.getBinding()	false	false	true	0	0	0	1	null	null
clojure.lang.BytecodeCompiler.VarExpr.eval()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.minKey()	false	false	true	0	0	0	2	null	null
clojure.lang.ArraySeq.ArraySeq_short.reduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.internalName()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.RedVal.val()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableMap.create(int)	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayChunk.nth(int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListMap.create(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.RT.addURL(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.BitmapIndexedNode.editAndSet(AtomicReference,int,Object,int,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.minus(float,double)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArrayMap.equalKey(Object,Object)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.AFn.invoke(ThreadLocalData,Object,Object)	false	false	true	0	0	0	4	null	null
org.clojure.runtime.Keyword.invoke(ThreadLocalData,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Namespace.internAccessor(String)	false	false	true	0	0	0	1	null	null
org.clojure.tools.TypeDump.visitAnnotation(String,boolean)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableMap.Seq.next(PersistentArray,int,ISeq)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.Keyword.applyTo(ThreadLocalData,Cons)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lte(double,long)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentArray.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.equiv(int,double)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassReader.readAnnotationValue(int,char[],String,AnnotationVisitor)	false	false	false	0	0	3	3	null	null
org.clojure.runtime.BigNum.truncateBy(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Symbol.getName()	false	false	false	0	0	4	4	null	null
clojure.asm.ClassWriter.visitSource(String,String)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.assocEx(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderParser.getTokenNames()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn2.invoke(Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.compare(Object,Object)	false	false	true	0	0	0	4	null	null
clojure.lang.PersistentQueue.seq()	false	false	false	0	0	6	8	null	null
clojure.lang.PersistentVector.retainAll(Collection)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RatioNum.truncateBy(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListMap.Tail.count()	false	false	true	0	0	0	0	null	null
clojure.lang.LazyTransformer.Stepper.step(LazyTransformer)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	16	null	null
org.clojure.runtime.FixNum.addTo(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjMethod.objx()	false	false	false	0	0	0	0	null	null
clojure.lang.Atom.compareAndSet(Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RestFn2.invoke(ThreadLocalData,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_float.reduce(IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.MapEntry.get(Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.Method.getDescriptor()	false	false	false	0	0	4	4	null	null
clojure.lang.Numbers.unchecked_long_negate(long)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.KeywordExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderLexer.mTokens()	false	false	true	0	0	0	0	null	null
clojure.asm.MethodWriter.resizeInstructions()	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.ImportExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerOps.opsWith(FloatOps)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Seq.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.RecurExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	1	1	null	null
clojure.lang.RestFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
clojure.lang.Numbers.gte(Object,long)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.dec(double)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.lt(Object,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.popThreadBindings()	false	false	false	0	0	38	38	null	null
clojure.lang.PersistentHashSet.empty()	false	false	false	0	0	0	0	null	null
clojure.lang.RT.box(Boolean)	false	false	false	0	0	0	0	null	null
clojure.lang.BigNum.lt(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.bitXorBy(IntegerNum)	false	false	true	0	0	0	0	null	null
clojure.asm.Attribute.write(ClassWriter,byte[],int,int,int)	false	false	false	0	0	3	3	null	null
org.clojure.runtime.PersistentTree.min()	false	false	true	0	0	0	1	null	null
org.clojure.runtime.PersistentListMap.Tail.get(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.contains(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongBitOps.bitOpsWith(BigIntegerBitOps)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHybridMap.contains(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.EdnReader.CharacterReader.invoke(Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerBitOps.and(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerBitOps.shiftRight(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Transaction.commutate(TRef,IFn)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentMap.add(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHybridMap.createArrayMap(Object[])	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentListMap.Tail.first()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntOps.opsWith(DoubleOps)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.aset(double[],int,double)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.toArray(Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.AssignExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.DoubleOps.add(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeSet.comparator()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.BlackBranch.redden()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.clear()	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	7	null	null
clojure.asm.commons.GeneratorAdapter.ifICmp(int,Label)	false	false	false	0	0	0	2	null	null
clojure.lang.ArrayStream.createFromObject(Object)	false	false	true	0	0	0	2	null	null
clojure.lang.Agent.Action.execute()	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.BigIntegerOps.opsWith(RatioOps)	false	false	true	0	0	0	0	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RestFn3.invoke(ThreadLocalData,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.VarExpr.emitAssign(C,ObjExpr,GeneratorAdapter,Expr)	false	false	false	0	0	0	0	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.or(Type)	false	false	false	0	0	2	2	null	null
clojure.lang.ReaderLexer.mStringLiteral()	false	false	true	0	0	0	1	null	null
clojure.lang.Cons.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.multiply(double,float)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LetFnExpr.Parser.parse(C,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Num.equiv(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.shiftLeft(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentSet.equals(Object)	true	false	false	1	0	0	1	[21425a642c44bd1cdb8d3e537a7b6a23c1267bc7]	public
clojure.lang.APersistentVector.SubVector.pop()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.BlackBranchVal.val()	false	false	true	0	0	0	0	null	null
clojure.lang.Actor.getErrors()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.Tail.next()	false	false	true	0	0	0	0	null	null
clojure.lang.DynamicClassLoader.defineClass(String,byte[],Object)	false	false	false	0	0	2	2	null	null
clojure.lang.Compiler.CharExpr.canEmitHostExpr()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Cons.get()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Var.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.alength(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ChunkedCons.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.add(float,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Ratio.intValue()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.LeafNode.nodeSeq()	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderLexer.mNSIdentifier()	false	false	true	0	0	0	1	null	null
clojure.lang.AFunction.compare(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Keyword.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.onePlus()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.HostExpr.Parser.parse(C,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LispReader.interpretToken(String)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentTreeMap.create(Comparator,ISeq)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.create(IPersistentMap,Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.registerVar(Var)	false	false	false	0	0	3	3	null	null
clojure.lang.PersistentHashMap.assoc(Object,Object)	false	false	false	0	0	1	2	null	null
clojure.lang.Numbers.gt(int,long)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashSet.disjoin(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListMap.Link.count()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.NewInstanceMethod.msig(String,Class[])	false	false	false	0	0	1	1	null	null
clojure.lang.ReaderLexer.mT39()	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentHashtableMap.Seq.first()	false	false	true	0	0	0	0	null	null
clojure.lang.BigNum.bitAnd(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.SubVector.meta()	false	false	false	0	0	1	1	null	null
clojure.lang.BigInt.doubleValue()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.remove(Object)	false	false	true	0	0	0	1	null	null
clojure.asm.ClassWriter.visitMethod(int,String,String,String,String[])	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.eval()	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentTreeMap.ValIterator.remove()	false	false	false	0	0	0	0	null	null
clojure.lang.ArrayChunk.nth(int)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RBTree.Red.redden()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.BooleanExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.flipBit(long,long)	false	false	false	0	0	3	3	null	null
clojure.asm.commons.EmptyVisitor.visitInnerClass(String,String,String,int)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.VarExpr.emitAssign(C,FnExpr,GeneratorAdapter,Expr)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.InvokeConstructorExpr.emitHostExpr()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.testBit(Object,long)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.key()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.getArgIndex(int)	false	false	false	0	0	3	3	null	null
clojure.lang.LazySeq.seq()	true	false	false	1	15	16	18	[ff27522840fb3c1681c331ad1fb44a313bd44e0a]	public
clojure.lang.Numbers.gte(long,double)	false	false	false	0	0	0	0	null	null
clojure.lang.LispReader.readNumber(PushbackReader,char)	true	false	false	1	2	2	2	[91b5515ecf44af1140d4d8293b8b55cd73a9336a]	private
clojure.lang.PersistentTreeMap.keys()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.KeyIterator.next()	false	false	true	0	0	0	0	null	null
clojure.asm.MethodWriter.visitTryCatchBlock(Label,Label,Label,String)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntBitOps.bitOpsWith(BigIntBitOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.invoke(Object,Object)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.BigNum.gt(RatioNum)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableMap.Iter.next()	false	false	true	0	0	0	0	null	null
clojure.lang.SeqEnumeration.nextElement()	false	false	false	0	0	0	0	null	null
clojure.lang.AFn.invoke(Object,Object,Object)	false	false	false	0	0	0	2	null	null
org.clojure.runtime.PersistentTree.balanceRightDel(Object,Object,Node,Node)	false	false	true	0	0	0	2	null	null
clojure.lang.Keyword.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.TransientVector.invoke(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.toArray(Object)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.DoubleNum.multiply(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.TRef.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.getCompiledClass()	false	false	true	0	0	0	3	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Num.add(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Keyword.getNamespace()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentArrayIdentityMap.empty()	false	false	true	0	0	0	0	null	null
clojure.lang.Obj.addAttr(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.bitpos(int,int)	false	false	false	0	0	8	8	null	null
clojure.lang.Var.isExported()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.InvokeExpr.parse(C,ISeq)	false	false	false	0	0	1	1	null	null
clojure.lang.ASeq.Src.invoke()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.put(Object,Object)	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.bitOps(Object)	false	false	true	0	0	0	15	null	null
clojure.lang.PersistentTreeMap.assocEx(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.ArrayNode.Seq.first()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.red(Object,Object,Node,Node)	false	false	true	0	0	0	27	null	null
clojure.asm.commons.GeneratorAdapter.storeLocal(int,Type)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.emitLetFnInits(GeneratorAdapter,FnExpr,IPersistentSet)	false	false	true	0	0	0	1	null	null
clojure.lang.BigNum.shiftLeft(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Keyword.equals(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.testBit(long,long)	false	false	false	0	0	3	3	null	null
clojure.lang.APersistentSet.toArray()	false	false	false	0	0	0	1	null	null
clojure.lang.APersistentVector.RSeq.next()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.pushTail(int,Object[],Object[],Box)	false	false	true	0	0	0	2	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.MethodWriter.visitParameterAnnotation(int,String,boolean)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceExpr.build(IPersistentVector,IPersistentVector,Symbol,String,Symbol,Symbol,ISeq,Object)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentTreeMap.BlackBranchVal.redden()	false	false	false	0	0	0	0	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.push(double)	false	false	false	0	0	2	2	null	null
clojure.asm.commons.AdviceAdapter.visitIntInsn(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.lte(double,int)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.CodeSizeEvaluator.visitFieldInsn(int,String,String,String)	false	false	false	0	0	0	0	null	null
clojure.lang.EdnReader.readNumber(PushbackReader,char)	false	false	false	0	0	2	2	null	null
clojure.lang.ArraySeq.ArraySeq_byte.count()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.SerialVersionUIDAdder.computeSVUID()	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.BodyExpr.lastExpr()	false	false	false	0	0	4	4	null	null
clojure.lang.APersistentVector.invoke(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerOps.isZero(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnMethod.restParm()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.AssignExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.multiplyP(Number,Number)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Cons.iterate()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.CodeSizeEvaluator.visitMethodInsn(int,String,String,String)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.willBeStaticMethod()	false	false	true	0	0	0	6	null	null
clojure.lang.PersistentListMap.Tail.put(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Ref.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentQueue.clear()	false	false	false	0	0	0	0	null	null
clojure.asm.Frame.push(ClassWriter,String)	false	false	false	0	0	7	7	null	null
clojure.lang.Numbers.max(double,double)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.RedBranchVal.blacken()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.get(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.LispReader.UnquoteReader.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.Obj.hasAttr(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.InstanceMethodExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.compiledClass()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn1.invoke(Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_double.lastIndexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.IteratorSeq.create(Iterator)	false	false	false	0	0	2	3	null	null
clojure.lang.BytecodeCompiler.CharExpr.val()	false	false	true	0	0	0	0	null	null
clojure.lang.MultiFn.invoke(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.dec(float)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Link.put(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.isEmpty()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.without(int,int,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.ificmpgt(Label)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.VarExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Symbol.compareTo(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.BigNum.bitOr(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentSet.hashCode()	false	false	false	0	0	0	1	null	null
clojure.lang.Numbers.OpsP.negateP(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.tagOf(Object)	false	false	false	0	0	26	26	null	null
clojure.asm.commons.GeneratorAdapter.throwException(Type,String)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.visitLookupSwitchInsn(Label,int[],Label[])	false	false	false	0	0	0	0	null	null
clojure.lang.BigNum.longValue()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.IntegerOps.isPos(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.Seq.first()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.TransientHashMap.doWithout(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ARef.validate(Object)	false	false	false	0	0	8	8	null	null
clojure.lang.LispReader.unread(PushbackReader,int)	false	false	false	0	0	10	10	null	null
clojure.lang.Numbers.addP(long,double)	false	false	false	0	0	0	0	null	null
clojure.lang.Keyword.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.DoubleNum.equiv(Num)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.setValues(ThreadLocalData,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	13	null	null
clojure.lang.Compiler.FnMethod.fn()	false	false	true	0	0	0	0	null	null
clojure.lang.BigInt.toBigDecimal()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Var.getThreadBinding()	false	false	true	0	0	0	4	null	null
clojure.lang.PersistentTreeMap.valAt(Object,Object)	false	false	false	0	0	1	1	null	null
clojure.asm.commons.InstructionAdapter.getfield(String,String,String)	false	false	false	0	0	1	1	null	null
clojure.asm.AnnotationWriter.visit(String,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.InstanceMethodExpr.emitUnboxed(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RestFn1.invoke(ThreadLocalData,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.Reflector.getStaticField(Class,String)	false	false	false	0	0	2	2	null	null
clojure.lang.RT.third(Object)	false	false	false	0	0	18	18	null	null
org.clojure.runtime.RBSet.RedVal.val()	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn1.invoke(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Ref.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.FixNum.multiply(int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentQueue.peek()	false	false	false	0	0	0	1	null	null
clojure.lang.Compiler.StaticInvokeExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.LazilyPersistentVector.ChunkedSeq.chunkedFirst()	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayIter.remove()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ObjMethod.line()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.Node.balanceLeft(Node)	false	false	true	0	0	0	1	null	null
clojure.asm.MethodWriter.visitEnd()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Tail.capacity()	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_float.hasNext()	false	false	false	0	0	0	0	null	null
clojure.lang.Util.runtimeException(String,Throwable)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.FnMethod.body()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.neg(Type)	false	false	false	0	0	4	4	null	null
clojure.lang.Num.from(BigInteger)	false	false	true	0	0	0	31	null	null
org.clojure.runtime.PersistentArray.main(String[])	false	false	true	0	0	0	0	null	null
clojure.asm.ClassWriter.newMethodType(String)	false	false	false	0	0	0	0	null	null
clojure.lang.MapEntry.valAt(Object)	true	false	true	1	0	0	0	[14287172ee1ea7549e83e115e8b943a94c444736]	public
clojure.asm.commons.GeneratorAdapter.not()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Keyword.invoke(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.EmptyNode.assoc(int,int,Object,Object,Box)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.StaticFieldExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.aget(boolean[],int)	false	false	false	0	0	0	0	null	null
clojure.lang.Transaction.main(String[])	false	false	true	0	0	0	0	null	null
org.clojure.runtime.FixNum.gt(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassVisitor.visitEnd()	true	true	false	1	6	6	6	[c8d3ef3929e8049a84957002bc7e2071844bfb53]	public
clojure.lang.Compiler.NewExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.RT.cons(Object,IPersistentCollection)	false	false	true	0	0	0	5	null	null
clojure.asm.commons.AdviceAdapter.peekValue()	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.findSingleMethod(Class,String,PersistentArrayList,boolean)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.BigNum.addTo(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.setValue(Object)	false	false	true	0	0	0	5	null	null
clojure.lang.Numbers.lt(Object,double)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	5	null	null
clojure.lang.Compiler.primClass(Symbol)	false	false	false	0	0	2	2	null	null
clojure.lang.Util.dohasheq(IHashEq)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentListIdentityMap.Tail.get(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn1.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.opsWith(FloatOps)	false	false	true	0	0	0	0	null	null
clojure.lang.LockingTransaction.run(IFn)	false	false	true	0	0	0	1	null	null
clojure.lang.RT.seqToArray(ISeq)	false	false	false	0	0	7	7	null	null
org.clojure.runtime.PersistentHashtableMap.put(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.asm.AnnotationVisitor.visitEnum(String,String,String)	false	false	false	0	0	2	2	null	null
clojure.lang.Obj.putAttr(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.IfExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.MonitorExitExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.Iter.key()	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentHashMap.create(List)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentHashMap.ArrayNode.without(int,int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.TheVarExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.Iter.hasNext()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.getLocalType(int)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.PersistentListIdentityMap.get(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Accessor.invoke(Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.emitAssignLocal(GeneratorAdapter,LocalBinding,Expr)	false	false	false	0	0	1	1	null	null
clojure.lang.Util.clearCache(ReferenceQueue,ConcurrentHashMap)	true	true	false	1	1	2	2	[da14cbb99fd5a3ccb4092fe629822a86065e6fb9]	public
clojure.lang.Compiler.HostExpr.emitBoxReturn(FnExpr,GeneratorAdapter,Class)	false	false	true	0	0	0	6	null	null
org.clojure.runtime.RestFn5.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.RBTree.main(String[])	false	false	true	0	0	0	0	null	null
clojure.lang.RatioNum.onePlus()	false	false	true	0	0	0	0	null	null
clojure.lang.Symbol.readResolve()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListMap.contains(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.ThreadLocalData.setTransaction(Transaction)	false	false	true	0	0	0	2	null	null
clojure.lang.Var.getThreadBinding()	false	false	false	0	0	2	4	null	null
clojure.lang.Compiler.ObjExpr.siteNameStatic(int)	false	false	false	0	0	3	5	null	null
clojure.lang.PersistentTree.Red.removeLeft(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.BigNum.gt(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.monitorexit()	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentQueue.empty()	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.registerLocal(Symbol,Symbol)	true	false	true	1	3	0	3	[2115153ec692d1393c654b6a60be2a395ef1beb2]	private
clojure.lang.PersistentListMap.Iter.hasNext()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.aset(long[],int,long)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.uncheckedLongCast(int)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.removeAll(Collection)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentMap.toString()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RestFn3.invoke(ThreadLocalData,Object,Object,Object,Object,Object,Cons)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArray.Entry.create(int,Object,Entry)	false	false	true	0	0	0	2	null	null
clojure.asm.commons.GeneratorAdapter.monitorExit()	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentArray.RSeq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.ASeq.reify()	false	false	false	0	0	4	4	null	null
clojure.lang.ArraySeq.ArraySeq_long.reduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.alength(Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.RT.uncheckedByteCast(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHybridIdentityMap.createArrayMap(Object[])	false	false	true	0	0	0	0	null	null
clojure.asm.Type.getType(Constructor)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.ret(int)	false	false	false	0	0	1	1	null	null
clojure.lang.LispReader.readUnicodeChar(String,int,int,int)	false	false	false	0	0	2	2	null	null
clojure.lang.Keyword.run()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.capacity()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Reflector.invokeMatchingMethod(List,Object,Object[])	false	false	true	0	0	0	2	null	null
org.clojure.runtime.Reflector.prepRet(Object)	false	false	true	0	0	0	5	null	null
clojure.lang.PersistentList.EmptyList.subList(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.TransactionalHashMap.remove(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.ClassWriter.addType(Item)	false	false	false	0	0	2	2	null	null
clojure.asm.commons.InstructionAdapter.multianewarray(String,int)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.or(int,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.BigNum.equivTo(int)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.containsAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.FixNum.negate()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.unbox(Type)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.AFn.invoke(Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Util.isInteger(Object)	false	false	false	0	0	8	8	null	null
clojure.lang.LispReader.matchVar(String)	false	false	true	0	0	0	1	null	null
clojure.lang.BytecodeCompiler.DefExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArrayMap.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.InstanceOfExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.Seq.create(Node,boolean)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentHybridIdentityMap.createArrayMap()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.storeArg(int)	false	false	false	0	0	3	3	null	null
clojure.lang.XMLHandler.endDocument()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.FloatArrayOps.opsWith(FloatOps)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArray.ValIter.next()	false	false	true	0	0	0	0	null	null
clojure.lang.Var.intern(Symbol)	false	false	true	0	0	0	2	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	6	null	null
clojure.lang.Compiler.StaticMethodExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_short.reduce(IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.StaticInvokeExpr.canEmitPrimitive()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.InvokeExpr.emit(C,ObjExpr,GeneratorAdapter)	true	false	false	2	0	0	0	[a64704a9f163ed7271e527587c4d27073c25fc48]	public
clojure.lang.APersistentVector.doEquiv(IPersistentVector,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.lt(float,float)	false	false	true	0	0	0	4	null	null
clojure.lang.Compiler.CharExpr.getHostType()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.remainder(double,double)	false	false	false	0	0	3	3	null	null
clojure.lang.Namespace.findOrCreate(String)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.analyzeInstanceInvoke(InstanceMemberSymbol,Expr,PersistentArrayList)	false	false	true	0	0	0	1	null	null
clojure.asm.MethodWriter.readUnsignedShort(byte[],int)	false	false	false	0	0	5	5	null	null
clojure.lang.BytecodeCompiler.LocalBindingExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.TransientVector.doAssoc(int,Node,int,Object)	false	false	false	0	0	2	2	null	null
clojure.lang.LazySeq.sval()	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentArray.EntryLink.rest()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.SerialVersionUIDAdder.visitField(int,String,String,String,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.BigNum.truncateBy(ThreadLocalData,RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_long_add(long,long)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassWriter.newUTF8(String)	false	false	false	0	0	94	94	null	null
clojure.lang.PersistentListIdentityMap.add(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.findKey(Object,ISeq)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.EmptyNode.find(int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_dec(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.FixNum.minusp()	false	false	true	0	0	0	0	null	null
clojure.lang.TObj.getAttr(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.intern(Symbol,Symbol)	false	false	false	0	0	3	3	null	null
clojure.asm.commons.SerialVersionUIDAdder.Item.hashCode()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.NodeIterator.hasNext()	false	false	true	0	0	0	2	null	null
clojure.lang.BytecodeCompiler.FnMethod.parse(FnExpr,ISeq)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.PersistentTree.ValIterator.remove()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.Black.blacken()	false	false	true	0	0	0	0	null	null
clojure.lang.LazySeq.get(int)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.gte(Object,float)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.AdviceAdapter.visitTypeInsn(int,String)	false	false	false	0	0	0	0	null	null
clojure.lang.Namespace.remove(Symbol)	false	false	false	0	0	0	0	null	null
clojure.lang.RatioNum.subtractFrom(Num)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArray.ValIter.hasNext()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.invokeConstructor(Type,Method)	false	false	false	0	0	12	12	null	null
clojure.lang.PersistentQueue.Seq.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.Keyword.invoke(Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.BigNum.minusp()	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.IfExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.BigNum.multiply(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.conj(IPersistentCollection,Object)	false	false	false	0	0	6	6	null	null
clojure.lang.PersistentHashMap.ArrayNode.find(int,int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ASeq.toArray()	false	false	false	0	0	0	1	null	null
clojure.lang.TransactionalHashMap.main(String[])	false	false	true	0	0	0	0	null	null
clojure.asm.MethodAdapter.visitFieldInsn(int,String,String,String)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.negateP(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.Iter.getKey()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.add(long,int)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.contains(Object,Object)	false	false	false	0	0	3	3	null	null
clojure.asm.commons.InstructionAdapter.ifgt(Label)	false	false	false	0	0	1	1	null	null
clojure.lang.BytecodeCompiler.munge(String)	false	false	true	0	0	0	9	null	null
clojure.lang.FnLoaderThunk.doInvoke(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.BooleanExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.listIterator(int)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RestFn2.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.DoubleNum.gt(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_subtract(long,long)	false	false	true	0	0	0	0	null	null
clojure.lang.BigInt.floatValue()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.next()	false	false	true	0	0	0	2	null	null
org.clojure.runtime.RBTree.BlackVal.val()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntBitOps.bitOpsWith(LongBitOps)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashtableIdentityMap.create(int,PersistentArray,int)	false	false	true	0	0	0	0	null	null
clojure.lang.DoubleNum.multiply(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_multiply(double,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.FloatOps.opsWith(DoubleArrayOps)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Black.blacken()	false	false	false	0	0	0	0	null	null
clojure.lang.DynamicClassLoader.registerConstants(int,Object[])	false	false	false	0	0	0	1	null	null
clojure.lang.Actor.setState(Object)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.DoubleNum.truncateBy(int)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedIntCast(int)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.flipBit(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntOps.dec(Number)	false	false	false	0	0	2	2	null	null
clojure.lang.RT.maybeLoadResourceScript(String)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentListIdentityMap.Link.get(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentMap.remove(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.MethodAdapter.visitTableSwitchInsn(int,int,Label,Label[])	false	false	true	0	0	0	2	null	null
clojure.lang.Namespace.unintern(Symbol)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.KeywordExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.LocalVariablesSorter.visitFrame(int,int,Object[],int,Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.or(Object,int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn2.invoke(ThreadLocalData,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.doAssoc(int,Object[],int,Object)	false	false	true	0	0	0	2	null	null
clojure.lang.Ref.get()	false	false	true	0	0	0	10	null	null
org.clojure.runtime.PersistentHybridMap.createArrayMap()	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.LongBitOps.or(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.and(long,long)	false	false	false	0	0	3	3	null	null
clojure.lang.ArraySeq.ArraySeq_int.lastIndexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.byteCast(float)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.Seq.next()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.NumExpr.val()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.AnalyzerAdapter.visitMultiANewArrayInsn(String,int)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.LetExpr.emitReturn()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.AFn.invoke(Object,Object,Object)	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.unchecked_add(double,double)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.DoubleOps.opsWith(FloatArrayOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.multiply(int,long)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.AssignExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.StaticInitMerger.visit(int,int,String,String,String,String[])	false	false	false	0	0	0	0	null	null
clojure.lang.Namespace.getMappings()	false	false	false	0	0	10	10	null	null
clojure.lang.FixNum.gcd(int,int)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.lt(Object,Object)	false	false	false	0	0	4	9	null	null
clojure.lang.Compiler.fwdPath(PathNode)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.BigIntOps.gte(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object[])	false	false	false	0	0	0	1	null	null
clojure.lang.Numbers.divide(Object,double)	false	false	false	0	0	0	0	null	null
clojure.lang.Var.invoke(Object)	false	false	false	0	0	10	10	null	null
clojure.lang.Numbers.divide(long,long)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn4.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Namespace.getName()	false	false	false	0	0	0	0	null	null
clojure.lang.LockingTransaction.releaseIfEnsured(Ref)	false	false	false	0	0	2	2	null	null
clojure.lang.Compiler.ObjExpr.cachedProtoFnName(int)	false	false	true	0	0	0	4	null	null
org.clojure.runtime.RatioNum.minusp()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.truncate(double,double)	false	false	true	0	0	0	4	null	null
clojure.asm.commons.EmptyVisitor.visitJumpInsn(int,Label)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderLexer.mComma()	false	false	true	0	0	0	1	null	null
clojure.lang.Ref.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.instanceOf(Type)	false	false	false	0	0	1	1	null	null
clojure.asm.commons.GeneratorAdapter.valueOf(Type)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.loadLib(String)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentArrayMap.kvreduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.DoubleArrayOps.opsWith(FloatOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.trimGenID(String)	false	false	false	0	0	1	1	null	null
clojure.lang.DoubleNum.zerop()	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.CharacterReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.LocalBinding.getPrimitiveType()	false	false	false	0	0	23	23	null	null
clojure.lang.RT.uncheckedFloatCast(double)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.Seq.rest()	false	false	true	0	0	0	0	null	null
clojure.asm.Type.getDescriptor(StringBuffer,Class)	false	false	false	0	0	4	4	null	null
org.clojure.runtime.RT.cons(Object,ISeq)	false	false	true	0	0	0	19	null	null
clojure.lang.RT.more(Object)	false	false	false	0	0	0	1	null	null
clojure.lang.Num.zeroPred(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.KeywordLookupSite.get(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.keys(NodeIterator)	false	false	true	0	0	0	1	null	null
clojure.lang.ArraySeq.ArraySeq_short.indexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ArgVector.create(Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.RT.second(Object)	false	false	false	0	0	45	48	null	null
clojure.lang.PersistentListIdentityMap.Tail.count()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visit(int,int,String,String,String,String[])	false	false	true	0	0	0	0	null	null
clojure.lang.RT.shortCast(float)	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderLexer.mT38()	false	false	true	0	0	0	1	null	null
clojure.asm.commons.GeneratorAdapter.instanceOf(Type)	false	false	false	0	0	3	5	null	null
clojure.lang.Compiler.FnMethod.doEmitPrim(ObjExpr,ClassVisitor)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentQueue.hasheq()	false	false	false	0	0	0	0	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.long_array(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentHybridMap.count()	false	false	true	0	0	0	0	null	null
clojure.lang.Util.ret1(ISeq,Object)	false	false	false	0	0	24	24	null	null
org.clojure.runtime.PersistentListIdentityMap.Tail.key()	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.SyntaxQuoteReader.flattenMap(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.Num.from(int)	false	false	true	0	0	0	24	null	null
clojure.lang.ThreadLocalData.setTransaction(Transaction)	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.RatioOps.opsWith(DoubleOps)	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_float.lastIndexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.MethodParamExpr.emitUnboxed(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.toArray(Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentMap.KeySeq.next()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RT.longCast(Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.AdviceAdapter.visitLdcInsn(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Reflector.getInstanceField(Object,String)	false	false	false	0	0	3	3	null	null
clojure.lang.PersistentTreeMap.reverseIterator()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.addP(double,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.gt(float,float)	false	false	true	0	0	0	4	null	null
clojure.lang.DynamicVar.call()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Red.blacken()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.gte(long,long)	false	false	false	0	0	0	2	null	null
clojure.lang.ReaderParser.symbol()	false	false	true	0	0	0	3	null	null
clojure.lang.Ref.call()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.val()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.lte(double,float)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Iter.remove()	false	false	true	0	0	0	0	null	null
clojure.lang.DoubleNum.divide(int)	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.BigNum.bitAndBy(IntegerNum)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.without(AtomicReference,int,int,Object,Box)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.more()	true	true	false	1	0	0	0	[b8e333fb3437dca760f16136ed074a4dd463fe35]	public
clojure.lang.Compiler.TryFinallyExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Ratio.longValue()	false	false	false	0	0	0	0	null	null
clojure.lang.LispReader.QuoteReader.invoke(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.FullNode.bitpos(int,int)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentTreeMap.Black.addLeft(Node)	false	false	false	0	0	0	0	null	null
clojure.lang.Var.doSet(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Ref.val()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.capacity()	false	false	false	0	0	0	0	null	null
clojure.asm.ClassReader.readFrame(int,boolean,boolean,Label[],Context)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.LongBitOps.andNot(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.intCast(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.ARef.notifyWatches(Object,Object)	false	false	false	0	0	12	12	null	null
org.clojure.runtime.PersistentHashtableMap.create(int,PersistentArray,int)	false	false	true	0	0	0	1	null	null
clojure.asm.commons.AdviceAdapter.onMethodEnter()	false	false	false	0	0	2	2	null	null
clojure.lang.ArrayStream.ArrayStream_double.invoke()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArray.RSeq.first()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.Node.key()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ClassExpr.Parser.parse(C,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.OpsP.multiplyP(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.TransientHashMap.doValAt(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderLexer.mOctalLiteral()	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentHashMap.ArrayNode.assoc(int,int,Object,Object,Box)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.aset(float[],int,float)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.resolveIn(Namespace,Symbol)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.PersistentListMap.Link.count()	false	false	true	0	0	0	1	null	null
clojure.lang.ReaderLexer.DFA16.getDescription()	false	false	true	0	0	0	0	null	null
clojure.lang.RatioNum.truncateDivide(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.BigNum.equivTo(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.editAndSet(AtomicReference,int,Object,int,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHybridMap.iterator()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.longCast(byte)	false	false	false	0	0	0	0	null	null
clojure.asm.Item.set(String,String,int)	false	false	false	0	0	2	2	null	null
clojure.lang.Module.intern(Symbol)	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.quotient(double,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.format(String,Object[])	false	false	true	0	0	0	117	null	null
clojure.lang.Numbers.minus(Object,Object)	false	false	false	0	0	4	9	null	null
clojure.lang.PersistentArray.has(int)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_double.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.divide(float,long)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_long.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.InstanceOfExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.setBit(long,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.create(AtomicReference,int,INode[],int)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.PersistentTree.BlackBranchVal.redden()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedByteCast(float)	false	false	false	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_short.hasNext()	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.analyzeSymbol(Symbol)	false	false	true	0	0	0	1	null	null
clojure.lang.Num.dec(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Reflector.boxArgs(Class[],Object[])	false	false	false	0	0	5	5	null	null
org.clojure.runtime.RBSet.BlackVal.redden()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_multiply(double,long)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.TransientVector.ensureEditable(Node)	false	false	false	0	0	5	5	null	null
clojure.lang.PersistentStructMap.count()	false	false	false	0	0	0	0	null	null
clojure.lang.RT.list(Object,Object,Object)	false	false	false	0	0	12	12	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.keys(NodeIterator)	false	false	true	0	0	0	1	null	null
clojure.lang.RT.box(boolean)	false	false	false	0	0	0	1	null	null
clojure.lang.DoubleNum.truncateBy(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Agent.Action.doRun(Action)	false	false	false	0	0	1	1	null	null
clojure.asm.ClassWriter.getMergedType(int,int)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.assoc(AtomicReference,int,int,Object,Object,Box)	true	false	false	2	0	0	0	[eedcf35479737ab1136e3b8a00b2759190a73fdb]	public
clojure.lang.PersistentListIdentityMap.Link.get(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceExpr.gatherMethods(Class,Map)	false	false	false	0	0	2	2	null	null
clojure.lang.LazyTransformer.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.IntegerBitOps.flipBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.MetaExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.add(long,float)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.append(Node,Node)	false	false	true	0	0	0	5	null	null
clojure.lang.PersistentList.next()	false	false	false	0	0	2	2	null	null
clojure.lang.TransactionalHashMap.entryAt(Object)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.and(Object,long)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RatioNum.add(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.Cons.count()	false	false	false	0	0	0	0	null	null
clojure.asm.Item.set(float)	false	false	false	0	0	2	2	null	null
clojure.asm.ClassAdapter.visitAnnotation(String,boolean)	false	false	true	0	0	0	0	null	null
clojure.lang.Transaction.lock(TRef,boolean)	false	false	true	0	0	0	3	null	null
clojure.lang.PersistentTreeMap.valAt(Object)	true	false	false	1	0	3	3	[14287172ee1ea7549e83e115e8b943a94c444736]	public
clojure.lang.PersistentTree.Black.blacken()	false	false	true	0	0	0	0	null	null
clojure.lang.RatioNum.multiply(int)	false	false	true	0	0	0	2	null	null
clojure.lang.ReaderParser.metaTag()	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentTree.Black.removeLeft(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberInvoker.call()	false	false	true	0	0	0	0	null	null
clojure.lang.LazySeq.size()	false	false	false	0	0	0	0	null	null
clojure.lang.ATransientMap.persistent()	false	false	false	0	0	0	0	null	null
clojure.lang.Agent.deref()	false	false	false	0	0	0	0	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.ArrayNode.ensureEditable(AtomicReference)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentHashtableMap.bucketFor(Object,PersistentArray)	false	false	true	0	0	0	6	null	null
clojure.lang.APersistentVector.length()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.Tail.count()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.decP(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.add(double,int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.RedBranch.right()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lt(Number,Number)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.DefExpr.emitExpression()	false	false	true	0	0	0	0	null	null
clojure.lang.LazyTransformer.MultiStepper.step(LazyTransformer)	false	false	false	0	0	0	0	null	null
clojure.asm.Type.getMethodType(String)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.Keyword.invoke(ThreadLocalData,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LockingTransaction.blockAndBail(Info)	false	false	false	0	0	2	2	null	null
clojure.asm.Type.getSize()	false	false	false	0	0	15	15	null	null
clojure.lang.Compiler.StaticFieldExpr.emitAssign(C,FnExpr,GeneratorAdapter,Expr)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.RedBranchVal.val()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.multiply(double,double)	false	false	false	0	0	3	6	null	null
clojure.lang.BytecodeCompiler.AssignExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.equiv(float,int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.FixNum.doubleValue()	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentSet.toArray(Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	18	null	null
clojure.lang.Numbers.clearBit(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.ificmplt(Label)	false	false	false	0	0	1	1	null	null
clojure.lang.DynamicClassLoader.getConstants(int)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentArrayMap.contains(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn0.invoke(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.or(Object,Object)	false	false	false	0	0	0	2	null	null
clojure.lang.PersistentTreeSet.meta()	false	false	false	0	0	3	3	null	null
clojure.lang.PersistentHybridMap.count()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntOps.equiv(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.uncheckedCharCast(int)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.hconst(Handle)	false	false	false	0	0	1	1	null	null
clojure.lang.RT.DefaultComparator.readResolve()	false	false	false	0	0	0	0	null	null
clojure.lang.Ref.isBound()	false	false	false	0	0	0	0	null	null
clojure.lang.Murmur3.hashOrdered(Iterable)	true	false	false	1	4	5	5	[17b18350bdd28154241bc7ae80f423a5976c6de2]	public
clojure.asm.commons.AdviceAdapter.onMethodExit(int)	false	false	false	0	0	4	4	null	null
clojure.asm.Attribute.getCount()	false	false	false	0	0	4	4	null	null
clojure.lang.Ref.invoke(Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Num.equiv(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.NewInstanceMethod.primClass(Symbol)	false	false	true	0	0	0	1	null	null
clojure.lang.RT.getResource(ClassLoader,String)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.RT.readChar(Reader)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.LocalBindingExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.byteCast(int)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.DefExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.EmptyNode.without(int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.create(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.ObjExpr.constantName(int)	false	false	false	0	0	5	5	null	null
clojure.lang.Numbers.lt(Object,float)	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.add(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.popTail(int,Object[],Box)	false	false	true	0	0	0	2	null	null
clojure.lang.APersistentMap.hasheq()	true	false	false	1	0	0	0	[d77489d3ce912c177fe288a6f399a5c1da6683db]	public
org.clojure.runtime.Namespace.internVar(String)	false	false	true	0	0	0	1	null	null
clojure.lang.ArraySeq.next()	false	false	false	0	0	0	0	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.AdviceAdapter.addBranch(Label)	false	false	false	0	0	3	3	null	null
clojure.asm.commons.CodeSizeEvaluator.visitVarInsn(int,int)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitMethod(int,String,String,String,String[])	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lt(int,double)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.IntegerBitOps.testBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.LazySeq.first()	true	false	false	1	0	0	1	[b8e333fb3437dca760f16136ed074a4dd463fe35]	public
clojure.lang.PersistentVector.TransientVector.nth(int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Reflector.invokeInstanceMethod(Object,String,Object[])	false	false	false	0	0	4	4	null	null
clojure.lang.PersistentHashSet.cons(Object)	false	false	false	0	0	1	7	null	null
clojure.lang.RatioNum.floatValue()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.opsWith(BigIntegerOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Reflector.isMatch(Method,Method)	false	false	false	0	0	2	2	null	null
clojure.lang.BytecodeCompiler.StaticFieldExpr.emitAssign(C,FnExpr,GeneratorAdapter,Expr)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.bind(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.InvokeExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.asm.MethodVisitor.visitFrame(int,int,Object[],int,Object[])	false	false	false	0	0	6	6	null	null
org.clojure.runtime.RT.equal(Object,Object)	false	false	true	0	0	0	2	null	null
clojure.lang.IteratorSeq.writeObject(ObjectOutputStream)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListMap.Link.find(Object)	false	false	true	0	0	0	4	null	null
clojure.lang.ArraySeq.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Num.divide(Object,Object)	false	false	true	0	0	0	12	null	null
org.clojure.runtime.Reflector.invokeStaticMethod(String,String,Object[])	false	false	true	0	0	0	0	null	null
clojure.asm.commons.AnalyzerAdapter.visitFrameTypes(int,Object[],List)	false	false	false	0	0	2	2	null	null
clojure.lang.LazyTransformer.subList(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.LocalBinding.hasJavaClass()	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.BigDecimalOps.opsWith(FloatOps)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn0.invoke(ThreadLocalData,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigDecimalOps.opsWith(BigIntOps)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.Black.blacken()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.visitIntInsn(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.multiplyP(double,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderLexer.mDecimalLiteral()	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentListIdentityMap.Link.create(Object,Object,PersistentListIdentityMap)	false	false	true	0	0	0	2	null	null
clojure.lang.LazySeq.subList(int,int)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RestFn1.invoke(ThreadLocalData,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.swap()	false	false	false	0	0	6	15	null	null
clojure.lang.PersistentHybridMap.put(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.multiply(double,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.IntegerBitOps.combine(BitOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lte(int,long)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.get(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.Red.removeLeft(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.Accessor.invoke(Object,Object,Object,Object,Object,Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.IntegerOps.combine(Ops)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.combine(Ops)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RestFn4.invoke(Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.add(Node,Object,Object,Box)	false	false	true	0	0	0	3	null	null
clojure.lang.EdnReader.readUnicodeChar(String,int,int,int)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentTreeMap.RedBranch.balanceLeft(Node)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.Method.hashCode()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.DoubleOps.isPos(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Keyword.find(String)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.MutableVector.arrayFor(int)	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.FloatArrayOps.combine(Ops)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentStructMap.valAt(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.Handle.getName()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentArrayMap.Iter.next()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Transaction.touch(TRef)	false	false	true	0	0	0	1	null	null
clojure.asm.FieldWriter.put(ByteVector)	false	false	false	0	0	1	1	null	null
clojure.asm.commons.StaticInitMerger.visitEnd()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.ifCmp(Type,int,Label)	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.multiplyP(long,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.AssignExpr.Parser.parse(C,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_minus(long,double)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.without(int,Object)	true	false	true	1	0	0	0	[eedcf35479737ab1136e3b8a00b2759190a73fdb]	public
clojure.lang.Compiler.ImportExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_add(Object,long)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.analyzeIf(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.RT.alength(float[])	false	false	false	0	0	0	0	null	null
org.clojure.runtime.FixNum.negate()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.NodeIterator.remove()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.RedVal.blacken()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.nth(int)	true	false	false	1	15	31	32	[ff27522840fb3c1681c331ad1fb44a313bd44e0a]	public
clojure.lang.PersistentVector.ChunkedSeq.next()	false	false	false	0	0	0	0	null	null
clojure.lang.ChunkedCons.chunkedNext()	false	false	false	0	0	1	1	null	null
clojure.asm.Type.toString()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.visitLabel(Label)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.InvokeExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.LetFnExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.isEOS(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentTreeMap.containsKey(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.BlackBranch.left()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.find(Object)	false	false	true	0	0	0	2	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.aclone(Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigDecimalOps.isPos(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.clearBit(long,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.get(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.StaticMethodExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.BigNum.onePlus()	false	false	true	0	0	0	0	null	null
clojure.lang.FnLoaderThunk.invoke(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceMethod.findMethodsWithName(String,Map)	false	false	false	0	0	0	1	null	null
clojure.lang.LazySeq.reify()	false	false	false	0	0	4	4	null	null
clojure.lang.Compiler.FnMethod.line()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArrayMap.iterator()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_add(long,double)	false	false	false	0	0	0	0	null	null
clojure.asm.Frame.get(int)	false	false	false	0	0	3	3	null	null
clojure.lang.Reflector.primBoxTypeMatch(Class,Class)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentTree.add(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.TransactionalHashMap.commuteRemove(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.pushThreadBinding(Object)	false	false	true	0	0	0	14	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.MonitorExitExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Obj.put(Comparable,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.flipBit(Object,long)	false	false	false	0	0	0	0	null	null
clojure.lang.EdnReader.read(PushbackReader,IPersistentMap)	false	false	false	0	0	1	1	null	null
clojure.lang.RT.seqOrElse(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_char.reduce(IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnMethod.getArgTypes()	false	false	false	0	0	3	3	null	null
clojure.lang.Compiler.FnExpr.emitValue(Object,GeneratorAdapter)	false	false	true	0	0	0	4	null	null
clojure.lang.DoubleNum.equals(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Tail.key()	false	false	true	0	0	0	0	null	null
clojure.asm.ClassVisitor.visitField(int,String,String,String,Object)	false	false	false	0	0	14	14	null	null
clojure.lang.Numbers.unchecked_add(int,int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.Red.replace(Object,Object,Node,Node)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnMethod.emitClearLocals(GeneratorAdapter)	false	false	false	0	0	0	9	null	null
clojure.lang.PersistentTree.Red.redden()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.main(String[])	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.NodeIterator.remove()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.Black.replace(Object,Object,Node,Node)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.writeClassFile(String,byte[])	true	true	false	1	2	2	3	[240969a3af34ff0661238d03c006cc5a74dc1698]	public
clojure.lang.Numbers.multiply(Number,Number)	false	false	true	0	0	0	1	null	null
clojure.lang.DoubleNum.addTo(int)	false	false	true	0	0	0	0	null	null
clojure.lang.InstanceMemberInvoker.invoke()	false	false	true	0	0	0	1	null	null
org.clojure.runtime.RestFn0.invoke(ThreadLocalData,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Node.right()	false	false	false	0	0	57	57	null	null
clojure.lang.PersistentVector.MutableVector.doAssoc(int,Node,int,Object)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.PersistentTree.capacity()	false	false	true	0	0	0	0	null	null
clojure.lang.Delay.force(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.FloatArrayOps.add(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lt(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Transaction.doCommutate(TRef,IFn)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.StaticFieldExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.hasheq(Number)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.testBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.maxKey()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.divide(float,int)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.Seq.reduce(IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.Iter.next()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.IteratorIter.get()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentList.empty()	false	false	false	0	0	0	0	null	null
clojure.lang.Ref.popThreadBinding()	false	false	true	0	0	0	0	null	null
clojure.lang.DynamicClassLoader.addURL(URL)	false	false	false	0	0	1	1	null	null
clojure.lang.BytecodeCompiler.EqlRefExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.MapEntry.contains(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Var.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.IntegerBitOps.shiftRight(Number,int)	false	false	true	0	0	0	1	null	null
clojure.lang.EdnReader.VectorReader.invoke(Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.lt(float,double)	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.matchNumber(String)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentTreeMap.leftBalance(Object,Object,Node,Node)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentHashMap.cloneAndSet(INode[],int,INode)	false	false	false	0	0	4	4	null	null
clojure.lang.PersistentListMap.Tail.val()	false	false	true	0	0	0	0	null	null
clojure.lang.ASeq.toString()	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentMap.KeySeq.first()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Link.count()	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentTree.main(String[])	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.vals()	false	false	true	0	0	0	0	null	null
clojure.lang.LazySeq.more()	true	true	false	1	0	0	0	[b8e333fb3437dca760f16136ed074a4dd463fe35]	public
clojure.lang.RestFn.invoke(Object,Object)	false	false	false	0	0	0	1	null	null
clojure.lang.ReaderParser.ratioLiteral()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.pushNS()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListMap.Tail.remove(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerBitOps.clearBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.bitOr(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Stream.seq()	true	false	true	1	0	0	0	[be925c49b9d7c9e799711fd4caa4cf248ac16023]	public
clojure.lang.BigInt.fromLong(long)	false	false	false	0	0	1	1	null	null
clojure.asm.commons.GeneratorAdapter.pop2()	false	false	false	0	0	4	4	null	null
clojure.lang.Numbers.shiftLeft(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LocalBindingExpr.emitExpression()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.Method.getMethod(String)	false	false	false	0	0	58	58	null	null
clojure.lang.Compiler.InvokeStaticMethodExpr.emitHostExpr()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lte(long,double)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.editAndSet(AtomicReference,int,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.gte(int,float)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.equiv(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.doAdd(int,Object,Object,PersistentArray)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.RatioNum.floatValue()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.rseq()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayIdentityMap.empty()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.cachedProtoImplName(int)	false	false	true	0	0	0	3	null	null
clojure.lang.RT.iter(Object)	false	false	false	0	0	3	3	null	null
org.clojure.runtime.RT.box(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedCharCast(short)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.getTypeStringForArgs(IPersistentVector)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentHashtableMap.find(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.seq(Object)	true	false	false	1	36	87	87	[a8307cc884811af0a769023bf1459d77c1c02f7d]	public
clojure.lang.Compiler.main(String[])	false	false	true	0	0	0	0	null	null
clojure.asm.Type.getMethodDescriptor(Method)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.add(Object,long)	false	false	false	0	0	3	3	null	null
org.clojure.runtime.PersistentListMap.Iter.next()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.seqFrom(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.gt(long,int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.entryKey(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Delay.get()	false	false	true	0	0	0	1	null	null
clojure.asm.commons.GeneratorAdapter.storeLocal(int)	false	false	false	0	0	0	0	null	null
clojure.lang.LazyTransformer.clear()	false	false	false	0	0	0	0	null	null
clojure.lang.Symbol.intern(String,String)	false	false	false	0	0	23	23	null	null
clojure.lang.Compiler.FnMethod.primInterface(IPersistentVector)	false	false	false	0	0	2	2	null	null
clojure.lang.ASeq.stream()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceMethod.parse(ObjExpr,ISeq,Symbol,Map,Map)	false	false	true	0	0	0	1	null	null
clojure.lang.DoubleNum.truncateBy(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Transaction.tref(Object)	false	false	true	0	0	0	1	null	null
clojure.asm.commons.GeneratorAdapter.typeInsn(int,Type)	false	false	false	0	0	4	4	null	null
clojure.lang.RatioNum.multiplyBy(Num)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.visitMultiANewArrayInsn(String,int)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.TransientVector.count()	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.ObjExpr.isDeftype()	false	false	false	0	0	8	10	null	null
clojure.lang.Numbers.reduceBigInt(BigInt)	false	false	false	0	0	4	4	null	null
clojure.lang.PersistentHashMap.create(Map)	false	false	false	0	0	0	0	null	null
clojure.lang.TransactionalHashMap.entrySet()	false	false	false	0	0	0	3	null	null
clojure.lang.PersistentVector.TransientVector.nth(int)	false	false	false	0	0	3	3	null	null
org.clojure.runtime.FixNum.intValue()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Reflector.isCongruent(Class[],Object[])	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentVector.RSeq.index()	false	false	true	0	0	0	0	null	null
clojure.lang.Agent.clearErrors()	false	false	true	0	0	0	0	null	null
clojure.lang.ATransientSet.disjoin(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.LocalBindingExpr.emitStatement()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Seq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn0.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitVarInsn(int,int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Var.invoke(ThreadLocalData)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.analyzeOr(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.BytecodeCompiler.DefExpr.parse(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.RT.resolveClassNameInContext(String)	false	false	false	0	0	0	3	null	null
clojure.lang.RatioNum.zerop()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.BlackBranch.right()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArray.getEntry(int)	false	false	true	0	0	0	7	null	null
clojure.lang.Tuple.get(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.KeywordExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.FixNum.shiftRightBy(IntegerNum)	false	false	true	0	0	0	0	null	null
clojure.asm.MethodWriter.addSuccessor(int,Label)	false	false	false	0	0	9	9	null	null
clojure.lang.Compiler.InstanceFieldExpr.emitAssign(C,ObjExpr,GeneratorAdapter,Expr)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.RedBranch.left()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.minusp()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentQueue.retainAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.isVariadic()	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentHashMap.ArrayNode.Seq.create(INode[])	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.BigIntBitOps.clearBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.minus(float,int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArray.nth(int)	false	false	true	0	0	0	14	null	null
clojure.lang.Numbers.doubles(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.FloatOps.isZero(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.rightBalance(Object,Object,Node,Node)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.Var.popThreadBinding()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.EmptyNode.without(AtomicReference,int,Object,Box)	false	false	true	0	0	0	0	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.DoubleArrayOps.combine(Ops)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.AdviceAdapter.visitJumpInsn(int,Label)	false	false	false	0	0	0	0	null	null
clojure.lang.ArgVector.seq()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArray.getEntry(int)	false	false	true	0	0	0	3	null	null
clojure.lang.Numbers.DoubleOps.equiv(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.StringExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.ArrayNode.Seq.create(IPersistentMap,INode[],int,ISeq)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.lt(double,int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.RedVal.val()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RatioNum.truncateDivide(ThreadLocalData,Num)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn2.invoke(ThreadLocalData,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.editAndSet(AtomicReference,int,Object)	false	false	false	0	0	3	3	null	null
clojure.lang.IteratorIter.iterate()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHybridMap.find(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.DoubleNum.subtractFrom(Num)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.FixNum.gt(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentSet.toString()	false	false	false	0	0	0	0	null	null
clojure.lang.MultiFn.getMethodTable()	false	false	false	0	0	5	6	null	null
clojure.lang.Compiler.analyzeAnd(C,ISeq)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.RBSet.put(Object,Object)	false	false	true	0	0	0	2	null	null
clojure.lang.AFn.invoke(Object,Object)	false	false	false	0	0	2	3	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntOps.opsWith(BigIntOps)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentArray.assoc(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.addAll(Collection)	false	false	true	0	0	0	0	null	null
clojure.lang.ASeq.remove(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LispReader.read(PushbackReader,boolean,Object,boolean)	false	false	false	0	0	20	20	null	null
clojure.lang.Numbers.BigIntOps.add(Number,Number)	false	false	false	0	0	1	1	null	null
clojure.asm.Type.getReturnType(Method)	false	false	false	0	0	5	5	null	null
clojure.lang.Numbers.double_array(int,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.MethodWriter.visitLookupSwitchInsn(Label,int[],Label[])	false	false	false	0	0	0	0	null	null
clojure.lang.RT.booleanCast(boolean)	false	false	false	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_char.hasNext()	false	false	false	0	0	0	0	null	null
clojure.lang.LispReader.DerefReader.invoke(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.alterRoot(IFn,ISeq)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.FloatOps.opsWith(FloatArrayOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Namespace.unmap(Symbol)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.gt(Object,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gte(double,float)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.add(float,float)	false	false	true	0	0	0	4	null	null
clojure.asm.commons.GeneratorAdapter.arrayLoad(Type)	false	false	false	0	0	0	1	null	null
org.clojure.runtime.PersistentHashtableIdentityMap.iterator()	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_long.hasNext()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Cons.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjMethod.emitVarReloadPreamble(ObjExpr,GeneratorAdapter)	false	false	true	0	0	0	3	null	null
clojure.lang.RT.doubleCast(long)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.KeyIterator.next()	false	false	true	0	0	0	0	null	null
clojure.lang.LockingTransaction.isRunning()	false	false	false	0	0	0	0	null	null
clojure.lang.TransactionalHashMap.commute(K,IFn)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedIntCast(long)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHybridMap.get(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.invoke(Object,Object,Object)	false	false	false	0	0	0	1	null	null
clojure.asm.AnnotationVisitor.visitEnd()	true	true	false	1	4	4	4	[c8d3ef3929e8049a84957002bc7e2071844bfb53]	public
clojure.lang.PersistentArray.getSetArray()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.ThrowExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.KeywordInvokeExpr.emitNormal(C,ObjExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.ctorTypes()	false	false	true	0	0	0	2	null	null
clojure.lang.DynamicVar.invoke(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.BigInt.lt(BigInt)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.xor(int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.without(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Var.setThreadBinding(Binding)	false	false	true	0	0	0	2	null	null
clojure.lang.BigNum.shiftRight(BigInteger)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHybridMap.create(IPersistentMap)	false	false	true	0	0	0	2	null	null
clojure.asm.MethodVisitor.visitTryCatchBlock(Label,Label,Label,String)	false	false	false	0	0	8	8	null	null
clojure.lang.Ref.getMinHistory()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.equiv(Number,Number)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHashMap.ArrayNode.nodeSeq()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerOps.lt(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.asm.Type.getReturnType(String)	false	false	false	0	0	5	5	null	null
clojure.lang.RestFn5.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.asm.ByteVector.enlarge(int)	false	false	false	0	0	9	9	null	null
clojure.lang.Compiler.ConstantExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.BigNum.floatValue()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lte(Object,Object)	false	false	false	0	0	3	8	null	null
clojure.lang.PersistentList.pop()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Reflector.invokeInstanceMethod(String,Object,Object[])	true	false	true	1	6	0	6	[dd69b27bae9fec5dadd3b57670d2f0c0a14349f1]	public
clojure.lang.AFn.applyToHelper(IFn,ISeq)	false	false	false	0	0	5	7	null	null
clojure.lang.Numbers.short_array(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.assocEx(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.EmptyNode.assoc(AtomicReference,int,int,Object,Object,Box)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.capacity()	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.valAt(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Util.classOf(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.BigIntOps.divide(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.AReference.alterMeta(IFn,ISeq)	false	false	false	0	0	3	3	null	null
clojure.lang.RatioNum.doubleValue()	false	false	true	0	0	0	7	null	null
clojure.lang.Compiler.NilExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	6	null	null
clojure.asm.MethodWriter.getArgumentsAndReturnSizes(String)	false	false	true	0	0	0	4	null	null
org.clojure.runtime.PersistentListMap.put(Object,Object)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.PersistentArray.EntryLink.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	7	7	null	null
clojure.lang.PersistentList.EmptyList.first()	false	false	false	0	0	0	0	null	null
clojure.lang.Keyword.getName()	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
clojure.lang.PersistentHashSet.meta()	false	false	false	0	0	3	3	null	null
clojure.asm.Attribute.getSize(ClassWriter,byte[],int,int,int)	false	false	false	0	0	5	5	null	null
clojure.lang.BigNum.oneMinus()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.Iter.getValue()	false	false	true	0	0	0	0	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.append(Node,Node)	false	false	false	0	0	5	5	null	null
clojure.lang.Compiler.OrExpr.emitExpression()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.list(Object,Object)	false	false	true	0	0	0	4	null	null
clojure.lang.ArraySeq.ArraySeq_boolean.index()	false	false	false	0	0	0	0	null	null
clojure.lang.XMLHandler.processingInstruction(String,String)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerBitOps.or(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.rseq()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.FloatOps.quotient(Number,Number)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHybridMap.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.commonPath(PathNode,PathNode)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.multiply(Object,float)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ListExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.EmptyExpr.eval()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.BigNum.truncateBy(ThreadLocalData,int)	false	false	true	0	0	0	0	null	null
clojure.lang.TRef.trimHistoryPriorToPoint(long)	false	false	true	0	0	0	0	null	null
clojure.lang.Agent.removeWatch(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Range.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Keyword.invoke()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.IfExpr.emitExpression()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Accessor.invoke(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.not(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Num.negPred(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.doubleValue()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.floatCast(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Namespace.reference(Symbol,Object)	false	false	false	0	0	1	2	null	null
clojure.lang.PersistentTreeMap.BlackVal.redden()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceMethod.parse(ObjExpr,ISeq,Map,Map)	false	false	true	0	0	0	1	null	null
clojure.lang.RatioNum.multiply(BigInteger)	false	false	true	0	0	0	1	null	null
clojure.lang.FnLoaderThunk.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RatioNum.addTo(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.Ref.getHistoryCount()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.capacity()	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.get(int)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.newarray(Type)	false	false	false	0	0	9	9	null	null
clojure.lang.BytecodeCompiler.TheVarExpr.parse(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.Util.equal(Object,Object)	false	false	true	0	0	0	21	null	null
clojure.lang.Actor.commute(IFn,ISeq)	true	true	true	1	2	0	2	[b2bd83819314795cf43defcd361d77271467ca8d]	package
clojure.lang.RatioNum.equivTo(int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Accessor.invoke(Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn2.invoke(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Agent.ThreadPool.Worker.run()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.RatioOps.divide(Number,Number)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentListMap.Tail.contains(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.aclone(double[])	false	false	false	0	0	0	0	null	null
clojure.lang.RT.alength(byte[])	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigDecimalOps.opsWith(DoubleArrayOps)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.invoke(Object,Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
clojure.lang.Numbers.DoubleOps.inc(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.addP(double,long)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.remainder(Object,double)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.FullNode.assoc(int,int,Object,Object,Box)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Node.toString()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.AnExpr.emitHostExpr()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.CaseExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.gte(double,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.seqToTypedArray(Class,ISeq)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentListIdentityMap.add(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.AFn.invoke(ThreadLocalData,Object)	false	false	true	0	0	0	5	null	null
clojure.asm.ClassWriter.put112(int,int,int)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.DoubleNum.truncateBy(ThreadLocalData,BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Transaction.completedThroughPoint()	false	false	true	0	0	0	4	null	null
clojure.lang.BytecodeCompiler.IfExpr.parse(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentListMap.iterator()	false	false	true	0	0	0	0	null	null
clojure.lang.Transaction.getNextSeq()	false	false	true	0	0	0	2	null	null
clojure.asm.commons.EmptyVisitor.visitTryCatchBlock(Label,Label,Label,String)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.NumberExpr.canEmitPrimitive()	false	false	false	0	0	0	0	null	null
clojure.lang.LazyTransformer.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.CodeSizeEvaluator.visitInvokeDynamicInsn(String,String,Handle,Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.RT.floatCast(short)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.LocalBindingExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.AnalyzerAdapter.get(int)	false	false	false	0	0	4	4	null	null
clojure.lang.Agent.enqueue(Action)	false	false	false	0	0	2	3	null	null
clojure.lang.BigNum.addTo(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	15	null	null
clojure.lang.LazySeq.retainAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.StaticInitMerger.visitMethod(int,String,String,String,String[])	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.IntegerOps.divide(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Stream.makeSequence(IFn)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.ConstantExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Namespace.intern(Symbol)	false	false	true	0	0	0	1	null	null
clojure.asm.commons.AdviceAdapter.pushValue(Object)	false	false	false	0	0	21	43	null	null
clojure.lang.Numbers.minusP(double,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LazilyPersistentVector.toArray()	false	false	true	0	0	0	0	null	null
clojure.asm.Type.getInternalName()	false	false	false	0	0	14	14	null	null
clojure.lang.Compiler.InstanceMethodExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Var.getRawRoot()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.NodeSeq.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.registerVar(DynamicVar)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.RestFn0.invoke(ThreadLocalData,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.getMatchingParams(String,ArrayList,IPersistentVector)	false	false	true	0	0	0	3	null	null
clojure.lang.Numbers.unsignedShiftRightInt(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.LispReader.DiscardReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.VectorExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.minus(Object,double)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RestFn4.invoke(ThreadLocalData,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.reduce(IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.BitmapIndexedNode.assoc(AtomicReference,int,int,Object,Object,Box)	false	false	true	0	0	0	5	null	null
org.clojure.tools.TypeDump.main(String[])	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.invoke()	false	false	false	0	0	0	0	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RT.boundedLength(ISeq,int)	false	false	true	0	0	0	6	null	null
clojure.lang.RestFn.doInvoke(Object,Object,ISeq)	false	false	true	0	0	0	20	null	null
clojure.lang.RT.byteCast(double)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.RSeq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.TRef.fn()	false	false	true	0	0	0	22	null	null
clojure.lang.PersistentHashMap.NodeSeq.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.emitLocal(GeneratorAdapter,LocalBinding,boolean)	false	false	false	0	0	4	4	null	null
clojure.lang.RT.hash(Object)	false	false	true	0	0	0	13	null	null
clojure.lang.ArrayStream.ArrayStream_short.next()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.FullNode.nodeSeq()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_long_inc(long)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Var.getValue()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.RedVal.blacken()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.mapUniqueKeys(Object[])	false	false	false	0	0	9	9	null	null
clojure.lang.PersistentVector.MutableVector.invoke(Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.SerialVersionUIDAdder.visitInnerClass(String,String,String,int)	false	false	false	0	0	0	0	null	null
clojure.lang.ExceptionInfo.toString()	false	false	false	0	0	0	0	null	null
clojure.lang.RT.uncheckedDoubleCast(byte)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.AMap.get(Keyword)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentListMap.Tail.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.MutableVector.ensureEditable()	false	false	true	0	0	0	7	null	null
clojure.lang.Compiler.AndExpr.emitExpression()	false	false	true	0	0	0	0	null	null
clojure.lang.Util.identical(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Var.invoke(Object,Object,Object)	false	false	false	0	0	2	2	null	null
clojure.lang.Reduced.deref()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.push(String)	false	false	false	0	0	21	21	null	null
clojure.asm.commons.InstructionAdapter.iconst(int)	false	false	false	0	0	8	8	null	null
clojure.lang.Obj.withMeta(IPersistentMap)	false	false	true	0	0	0	4	null	null
clojure.lang.Compiler.registerConstant(Object)	false	false	false	0	0	4	4	null	null
clojure.lang.MultiFn.getFn(Object)	true	false	false	1	22	22	22	[37606d41d3dcc574dd6b755de4849fe899c01af2]	private
clojure.lang.RT.errPrintWriter()	false	false	false	0	0	17	17	null	null
clojure.lang.TRef.isBound()	false	false	true	0	0	0	3	null	null
clojure.lang.Compiler.InstanceFieldExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentList.reduce(IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_int.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	4	4	null	null
clojure.lang.RT.cons(Object,Object)	false	false	false	0	0	39	39	null	null
org.clojure.runtime.PersistentTree.minKey()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.intCast(float)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentQueue.containsAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.Agent.getErrors()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.simpleName()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LiteralExpr.getHostType()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.ValIterator.hasNext()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.divide(double,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnMethod.argLocals()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentQueue.Seq.next()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.without(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.Red.blacken()	false	false	true	0	0	0	0	null	null
clojure.lang.Ratio.decimalValue(MathContext)	false	false	false	0	0	2	2	null	null
clojure.asm.commons.GeneratorAdapter.returnValue()	false	false	false	0	0	22	22	null	null
clojure.asm.commons.GeneratorAdapter.newInstance(Type)	false	false	false	0	0	7	7	null	null
clojure.lang.TransactionalHashMap.put(K,V)	false	false	false	0	0	1	4	null	null
clojure.lang.PersistentHashMap2.ArrayNode.assoc(AtomicReference,int,int,Object,Object,Box)	true	false	true	1	0	0	0	[ad708fc31a924256bdbc9580c7929abc80487f70]	public
clojure.lang.InstanceMemberInvoker.call()	false	false	true	0	0	0	0	null	null
clojure.lang.LazyTransformer.isEmpty()	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.tagOf(Symbol)	false	false	true	0	0	0	3	null	null
clojure.lang.Compiler.RecurExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.DoubleOps.lte(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.Seq.index()	false	false	false	0	0	0	0	null	null
clojure.lang.Keyword.invoke(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.remainder(Number,Number)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHybridIdentityMap.createHashtableMap(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.fn()	false	false	false	0	0	22	22	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	8	8	null	null
clojure.lang.Numbers.isZero(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.XMLHandler.setDocumentLocator(Locator)	false	false	false	0	0	0	0	null	null
clojure.lang.Reflector.throwCauseOrElseException(Exception)	false	false	false	0	0	0	0	null	null
clojure.lang.Namespace.find(Symbol)	false	false	false	0	0	2	6	null	null
clojure.lang.FixNum.bitOrBy(IntegerNum)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListMap.Link.contains(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	17	17	null	null
clojure.lang.Ratio.equals(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.find(int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.set(Object)	false	false	false	0	0	27	27	null	null
clojure.lang.APersistentMap.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.AMapEntry.assoc(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LazyTransformer.MultiStepper.hasNext()	false	false	false	0	0	1	1	null	null
clojure.asm.MethodWriter.visitLdcInsn(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.KeyIterator.next()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.box(byte)	false	false	false	0	0	0	1	null	null
clojure.lang.Cons.first()	false	false	false	0	0	0	0	null	null
clojure.lang.FixNum.subtractFrom(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjMethod.maxLocal()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.VectorExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gte(int,double)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.bitpos(int,int)	false	false	true	0	0	0	8	null	null
clojure.lang.StringSeq.rest()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArrayMap.put(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Ref.histCount()	false	false	false	0	0	2	2	null	null
clojure.lang.RT.uncheckedShortCast(short)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.isVolatile(LocalBinding)	false	false	false	0	0	4	4	null	null
clojure.lang.BigNum.plusp()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.ArrayNode.assoc(int,int,Object,Object,Box)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedCharCast(double)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.getAndIncLocalNum()	false	false	true	0	0	0	1	null	null
clojure.lang.Reflector.invokeNoArgInstanceMember(Object,String)	true	false	false	1	0	0	1	[5fda6cb262d1807566ecadd3af9aaafb58ee5544]	public
clojure.lang.PersistentList.cons(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableIdentityMap.create(int)	false	false	true	0	0	0	0	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.FloatOps.negate(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.vars()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.BigNum.negate()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.calcPrimeCapacity(int)	false	false	true	0	0	0	3	null	null
clojure.lang.Numbers.BigIntBitOps.not(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.supportsMeta()	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.LongOps.addP(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.TRef.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gte(double,double)	false	false	false	0	0	0	6	null	null
clojure.lang.PersistentHashMap.NodeSeq.kvreduce(Object[],IFn,Object)	false	false	false	0	0	4	4	null	null
clojure.lang.PersistentTreeSet.create(ISeq)	false	false	false	0	0	0	0	null	null
clojure.lang.TransactionalHashMap.mapAt(int)	false	false	false	0	0	3	3	null	null
clojure.lang.Num.divide(Object,Object)	false	false	true	0	0	0	12	null	null
clojure.lang.Numbers.FloatArrayOps.opsWith(FloatArrayOps)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.getLineNumber(Reader)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.FullNode.assoc(AtomicReference,int,int,Object,Object,Box)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListMap.first()	false	false	true	0	0	0	0	null	null
clojure.asm.ClassVisitor.visitSource(String,String)	false	false	false	0	0	3	3	null	null
clojure.asm.ClassWriter.newMethodItem(String,String,String,boolean)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.DoubleOps.add(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentQueue.equals(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.DoubleNum.hashCode()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.BlackBranch.left()	false	false	true	0	0	0	0	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LazilyPersistentVector.pop()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.RedBranch.right()	false	false	true	0	0	0	0	null	null
clojure.lang.Transaction.relinquish(long)	false	false	true	0	0	0	3	null	null
clojure.lang.Numbers.lte(long,float)	false	false	true	0	0	0	0	null	null
clojure.lang.TransactionalHashMap.size()	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RBTree.Red.replace(Object,Object,Node,Node)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentMap.mapEquals(IPersistentMap,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.RestFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
org.clojure.runtime.PersistentTree.Seq.push(Node,ISeq,boolean)	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.box(double)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.InstanceFieldExpr.emitUnboxed(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.truncateBy(ThreadLocalData,RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.append(Node,Node)	false	false	true	0	0	0	5	null	null
clojure.lang.Ref.set(Object)	false	false	false	0	0	7	8	null	null
clojure.lang.Numbers.unchecked_int_add(int,int)	false	false	false	0	0	0	0	null	null
clojure.asm.FieldWriter.getSize()	false	false	false	0	0	1	1	null	null
clojure.lang.DynamicVar.set(Object)	false	false	true	0	0	0	6	null	null
org.clojure.runtime.RestFn0.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.MonitorExitExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Tail.contains(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceExpr.DefclassParser.parse(C,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.bitOpsCast(Object)	false	false	false	0	0	45	45	null	null
clojure.lang.APersistentVector.add(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Var.commuteRoot(IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentMap.invoke(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_boolean.lastIndexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LazyTransformer.retainAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.minus(double)	false	false	false	0	0	1	1	null	null
clojure.lang.APersistentMap.size()	false	false	false	0	0	1	2	null	null
clojure.lang.Numbers.minus(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentListIdentityMap.Link.capacity()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.dup2X2()	false	false	false	0	0	1	1	null	null
clojure.asm.ClassWriter.visitOuterClass(String,String,String)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitEnd()	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayChunk.reduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_multiply(Object,long)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.Red.addRight(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.min(Object,double)	false	false	false	0	0	0	0	null	null
clojure.asm.AnnotationWriter.visitAnnotation(String,String)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.InstanceOfExpr.canEmitPrimitive()	false	false	false	0	0	0	0	null	null
clojure.lang.ASeq.lastIndexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.push(long)	false	false	false	0	0	3	3	null	null
org.clojure.runtime.RBTree.ValIterator.next()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn3.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArray.length()	false	false	true	0	0	0	13	null	null
clojure.lang.PersistentVector.TransientVector.pushTail(int,Node,Node)	false	false	false	0	0	2	2	null	null
clojure.lang.BytecodeCompiler.FnExpr.parse(C,ISeq,String)	false	false	true	0	0	0	1	null	null
clojure.asm.Type.getOpcode(int)	false	false	false	0	0	44	44	null	null
clojure.lang.ARef.removeWatch(Agent)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Accessor.invoke(Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn5.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentArrayMap.valAt(Object)	true	false	false	1	0	0	0	[14287172ee1ea7549e83e115e8b943a94c444736]	public
clojure.asm.ClassReader.getAccess()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.opsWith(RatioOps)	false	false	false	0	0	0	0	null	null
clojure.lang.Ratio.doubleValue()	false	false	false	0	0	2	3	null	null
clojure.lang.Accessor.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.IfExpr.doEmit(C,ObjExpr,GeneratorAdapter,boolean)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentTree.NodeIterator.next()	false	false	true	0	0	0	2	null	null
clojure.asm.MethodAdapter.visitMethodInsn(int,String,String,String)	false	false	true	0	0	0	0	null	null
clojure.lang.Namespace.refer(Symbol,Var)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.aget(char[],int)	false	false	false	0	0	0	0	null	null
clojure.asm.Frame.initInputFrame(ClassWriter,int,Type[],int)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentHashtableIdentityMap.Iter.nextBucket()	false	false	true	0	0	0	2	null	null
clojure.lang.Agent.dispatchAction(Action)	false	false	false	0	0	2	2	null	null
clojure.lang.Compiler.SourceDebugExtensionAttribute.writeSMAP(ClassWriter,String)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.dup2()	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentHashtableIdentityMap.create(int,PersistentArray)	false	false	true	0	0	0	0	null	null
clojure.asm.Type.getConstructorDescriptor(Constructor)	false	false	false	0	0	4	4	null	null
org.clojure.runtime.RT.eq(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderParser.getGrammarFileName()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.RedBranch.balanceRight(Node)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Reflector.boxArg(Class,Object)	false	false	true	0	0	0	3	null	null
clojure.lang.Numbers.int_array(int,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentHybridIdentityMap.createArrayMap()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.iterator()	false	false	true	0	0	0	2	null	null
org.clojure.runtime.PersistentListIdentityMap.put(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Var.alter(IFn,ISeq)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.FixNum.hashCode()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.get(Object,Object,Object)	true	false	false	1	4	4	4	[f81e612cc9ff91ddefc1d86e270cd7f018701802]	public
clojure.lang.Numbers.unchecked_int_negate(int)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.gte(float,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.StringExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.Seq.count()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.TVal.push(Object,Info)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentTree.minKey()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListMap.Link.create(Object,Object,PersistentListMap)	false	false	true	0	0	0	2	null	null
clojure.lang.ASeq.size()	false	false	false	0	0	0	0	null	null
clojure.lang.RT.shortCast(short)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.SerialVersionUIDAdder.visit(int,int,String,String,String,String[])	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.MonitorEnterExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.emitVarValue(GeneratorAdapter,Var)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.BigNum.longValue()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentList.first()	false	false	false	0	0	3	3	null	null
clojure.lang.LazySeq.iterator()	false	false	false	0	0	0	0	null	null
clojure.lang.ASeq.contains(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentListMap.Tail.next()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn0.invoke(ThreadLocalData)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.multiply(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_char.remove()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.multiplyP(double,long)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	13	13	null	null
org.clojure.runtime.RBSet.Node.val()	true	true	true	1	17	0	47	[7e7516821258dd51e411b51a8851c54320f64dc3]	public
clojure.asm.MethodWriter.visitTableSwitchInsn(int,int,Label,Label[])	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.cast(Type,Type)	false	false	false	0	0	18	18	null	null
clojure.lang.Compiler.ImportExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.ArrayNode.editAndSet(AtomicReference,int,INode)	false	false	false	0	0	4	4	null	null
clojure.lang.Numbers.FloatOps.opsWith(IntegerOps)	false	false	true	0	0	0	0	null	null
clojure.lang.TRef.invoke(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Transaction.doGet(TRef)	false	false	true	0	0	0	2	null	null
clojure.lang.Namespace.findInternedVar(Symbol)	false	false	false	0	0	4	4	null	null
clojure.asm.MethodVisitor.visitLabel(Label)	false	false	false	0	0	11	11	null	null
clojure.lang.Ratio.bigIntegerValue()	false	false	false	0	0	2	2	null	null
org.clojure.runtime.Var.setValue(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Actor.Action.run()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Tail.val()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.TryExpr.Parser.parse(C,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.MultiFn.addMethod(Object,IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.TRef.val()	false	false	true	0	0	0	3	null	null
clojure.lang.Compiler.LocalBindingExpr.evalAssign(Expr)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.MutableVector.immutable()	false	false	true	0	0	0	3	null	null
clojure.asm.commons.InstructionAdapter.visitIincInsn(int,int)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.RedBranchVal.blacken()	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.FnExpr.emitKeyword(GeneratorAdapter,Keyword)	false	false	true	0	0	0	1	null	null
clojure.lang.RT.readTrueFalseUnknown(String)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.resolveSymbol(Symbol)	false	false	false	0	0	2	2	null	null
clojure.lang.LispReader.StringReader.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.QuoteExpr.getJavaClass()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.multiply(float,long)	false	false	true	0	0	0	0	null	null
clojure.asm.Label.addToSubroutine(long,int)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.inc(Object)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentArrayIdentityMap.equalKey(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentQueue.size()	false	false	false	0	0	0	0	null	null
clojure.asm.MethodVisitor.visitLdcInsn(Object)	false	false	false	0	0	22	22	null	null
clojure.lang.ArrayIter.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.divide(float,float)	false	false	true	0	0	0	4	null	null
clojure.lang.LazySeq.toArray(Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.FullNode.getHash()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayIdentityMap.equalKey(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.xor(Type)	false	false	false	0	0	2	2	null	null
clojure.lang.Ref.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.incP(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.Seq.create(PersistentArray,int)	false	false	true	0	0	0	1	null	null
clojure.asm.commons.InstructionAdapter.ifle(Label)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHashMap.LeafNode.val()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.FixNum.divide(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.asm.AnnotationWriter.visitEnd()	false	false	false	0	0	2	2	null	null
clojure.lang.RT.charCast(long)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.Node.key()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.TObj.get(Comparable)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lte(float,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.CaseExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.add(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.int_array(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHashtableMap.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.divide(Object,long)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.entryAt(Object)	false	false	false	0	0	2	2	null	null
clojure.lang.Var.intern(Namespace,Symbol)	false	false	false	0	0	3	3	null	null
clojure.lang.IteratorSeq.next()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.nodeSeq()	false	false	false	0	0	0	0	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Symbol.toString()	false	false	false	0	0	10	10	null	null
clojure.lang.Numbers.max(long,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ArgVector.count()	false	false	true	0	0	0	0	null	null
clojure.lang.Namespace.importClass(Class)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.KeywordInvokeExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.EqlRefExpr.parse(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.FloatOps.isPos(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerBitOps.bitOpsWith(IntegerBitOps)	false	false	true	0	0	0	0	null	null
clojure.lang.MapEntry.key()	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentTreeMap.assoc(Object,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.Ref.invoke(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.fieldInsn(int,Type,String,Type)	false	false	false	0	0	4	4	null	null
clojure.lang.PersistentVector.invoke(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.contains(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lt(long,float)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.DoubleOps.negate(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.OpsP.incP(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Keyword.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.RSeq.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.VectorExpr.parse(C,IPersistentVector)	false	false	false	0	0	1	1	null	null
clojure.lang.TransactionalHashMap.binFor(Object)	false	false	false	0	0	7	7	null	null
clojure.lang.ArrayStream.ArrayStream_byte.invoke()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_add(Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Num.truncate(ThreadLocalData,Object,Object)	false	false	true	0	0	0	5	null	null
clojure.asm.commons.EmptyVisitor.visitLdcInsn(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.FullNode.Seq.next()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.TObj.put(Comparable,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.add(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.Iter.remove()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.get(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.Tail.capacity()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Num.truncate(Object,Object)	false	false	true	0	0	0	5	null	null
clojure.lang.PersistentQueue.main(String[])	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.DoubleOps.opsWith(DoubleArrayOps)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.Seq.rest()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitField(int,String,String,String,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.MapEntry.assocEx(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.ifNonNull(Label)	false	false	false	0	0	0	1	null	null
clojure.lang.APersistentVector.SubVector.iterator()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.append(Node,Node)	false	false	true	0	0	0	5	null	null
org.clojure.runtime.FixNum.equals(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.BigNum.addTo(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LetFnExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.keys(NodeIterator)	false	false	false	0	0	1	1	null	null
clojure.lang.RT.classForNameNonLoading(String)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.PersistentListIdentityMap.Tail.first()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayList.pop()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.isPos(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.add(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.TransientVector.valAt(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.invokestatic(String,String,String)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.IntegerOps.equiv(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.MapEntry.assoc(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.BytecodeCompiler.StaticFieldExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.MethodParamExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.MethodParamExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.LiteralExpr.eval()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Tail.remove(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.MapEntry.seq()	false	false	true	0	0	0	0	null	null
clojure.test.ReflectorTryCatchFixture.fail(Double)	false	false	false	0	0	0	0	null	null
clojure.lang.Murmur3.hashLong(long)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.PersistentListIdentityMap.Tail.contains(Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.AnalyzerAdapter.visitFieldInsn(int,String,String,String)	false	false	false	0	0	0	0	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn2.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.AnnotationWriter.put(AnnotationWriter[],ByteVector)	false	false	true	0	0	0	2	null	null
clojure.lang.Compiler.emitHostArgs(PersistentArrayList)	false	false	true	0	0	0	3	null	null
clojure.lang.FnSeq.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Num.negate(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.HostStaticFieldExpr.emitHostExpr()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.isSpecial(Object)	false	false	false	0	0	2	2	null	null
clojure.lang.BytecodeCompiler.LetExpr.parse(C,ISeq,boolean)	false	false	true	0	0	0	2	null	null
clojure.lang.LispReader.BackquoteReader.invoke(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderParser.objExpression()	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.BigIntOps.opsWith(RatioOps)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Node.setValue(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.FnExpr.compile()	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.BigDecimalOps.isNeg(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderParser.quotedExpression()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.eval(Object)	true	false	false	1	2	0	4	[893a0e5601b207bfe852421e394322c64fdcad48]	public
clojure.lang.RT.intCast(int)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.RedBranch.blacken()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.IntegerOps.quotient(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_add(long,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LockingTransaction.getRunning()	false	false	false	0	0	3	3	null	null
clojure.lang.RT.aclone(byte[])	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.putField(Type,String,Type)	false	false	false	0	0	9	13	null	null
clojure.lang.RT.byteCast(long)	false	false	false	0	0	0	0	null	null
clojure.lang.ArrayStream.next()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn3.invoke(Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.HostExpr.maybeClassName(Object)	false	false	true	0	0	0	2	null	null
clojure.lang.Volatile.reset(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.FixNum.toString()	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_double.hasNext()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.CharExpr.emitHostExpr()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.processForm(Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.div(Type)	false	false	false	0	0	4	4	null	null
clojure.lang.ReaderLexer.mOctalEscape()	false	false	true	0	0	0	1	null	null
clojure.lang.ReaderLexer.mTrueToken()	false	false	true	0	0	0	1	null	null
clojure.lang.LazySeq.listIterator()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Node.left()	false	false	false	0	0	57	57	null	null
clojure.lang.LispReader.DeprecatedWrappingReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.indexOfObject(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.DoubleNum.gt(RatioNum)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RatioNum.truncateBy(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.emitForDefn(ObjExpr,GeneratorAdapter)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.StringExpr.val()	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.first()	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.TheVarExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.BlackVal.val()	false	false	true	0	0	0	0	null	null
clojure.lang.Reflector.getCauseOrElse(Exception)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentArrayMap.containsKey(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.ArrayNode.Seq.next()	false	false	true	0	0	0	0	null	null
clojure.lang.RatioNum.addTo(BigInteger)	false	false	true	0	0	0	1	null	null
clojure.lang.BytecodeCompiler.TheVarExpr.eval()	false	false	true	0	0	0	0	null	null
clojure.lang.Var.setMacro()	false	false	false	0	0	0	0	null	null
clojure.lang.RT.nth(Object,int,Object)	true	false	false	1	0	0	0	[f81e612cc9ff91ddefc1d86e270cd7f018701802]	public
clojure.lang.Compiler.ObjExpr.thunkName(int)	false	false	false	0	0	1	2	null	null
clojure.lang.RT.floatCast(double)	false	false	false	0	0	0	0	null	null
clojure.lang.BigNum.negate()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.valAt(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArray.Seq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.next()	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.shorts(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	6	6	null	null
clojure.lang.Compiler.CaseExpr.emitExprForInts(ObjExpr,GeneratorAdapter,Type,Label)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.Transaction.commutate2(TRef,IFn)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArray.doSet(int,Object)	false	false	true	0	0	0	1	null	null
clojure.asm.MethodWriter.getSize()	false	false	false	0	0	1	1	null	null
clojure.lang.DoubleNum.toRational()	false	false	true	0	0	0	3	null	null
org.clojure.runtime.PersistentArrayMap.Iter.key()	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentArray.hashCode()	false	false	true	0	0	0	1	null	null
clojure.lang.Ref.getUUID()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn3.invoke(ThreadLocalData,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.Seq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.withMeta(IPersistentMap)	false	false	false	0	0	0	1	null	null
clojure.lang.PersistentVector.TransientVector.tailoff()	false	false	false	0	0	5	5	null	null
clojure.lang.APersistentVector.RSeq.count()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.add(Node,Object,Object,Box)	false	false	false	0	0	4	4	null	null
clojure.lang.PersistentArrayMap.TransientArrayMap.doWithout(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Link.contains(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Util.equiv(long,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.lte(float,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Agent.getValidator()	false	false	true	0	0	0	1	null	null
clojure.asm.ClassWriter.newHandle(int,String,String,String)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.unsignedShiftRight(long,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.Seq.push(Node,ISeq,boolean)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentTreeMap.remove(Node,Object,Box)	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.unchecked_inc(int)	false	false	true	0	0	0	0	null	null
clojure.lang.ASeq.subList(int,int)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitMultiANewArrayInsn(String,int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.create(Object[])	false	false	false	0	0	4	4	null	null
clojure.lang.PersistentVector.TransientVector.assocN(int,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentVector.equals(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.format(Object,String,Object[])	false	false	false	0	0	0	2	null	null
clojure.lang.APersistentSet.setEquals(IPersistentSet,Object)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.FnSeq.first()	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_long.count()	false	false	false	0	0	0	0	null	null
clojure.lang.Accessor.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.shiftLeft(long,int)	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.BigDecimalOps.opsWith(DoubleOps)	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderParser.metaExpression()	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.inc(double)	false	false	false	0	0	1	1	null	null
clojure.lang.Tuple.equals(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.TheVarExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Var.getValidator()	false	false	true	0	0	0	6	null	null
clojure.lang.Numbers.not(long)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.CharExpr.hasJavaClass()	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_boolean.next()	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn3.invoke(Object,Object,Object,Object,Object,Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigDecimalOps.add(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_long.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.analyzeDef(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.LocalBinding.getJavaClass()	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentQueue.cons(Object)	false	false	false	0	0	0	2	null	null
clojure.lang.Numbers.multiplyP(long,double)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn1.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LazySeq.removeAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.registerVar(Var)	false	false	true	0	0	0	1	null	null
clojure.asm.Type.getClassName()	false	false	false	0	0	1	1	null	null
clojure.lang.Transaction.get(TRef)	false	false	true	0	0	0	5	null	null
clojure.lang.Numbers.gt(Object,long)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.TObj.has(Comparable)	false	false	true	0	0	0	0	null	null
clojure.lang.Transaction.run(IFn)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentStructMap.Seq.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_minus(long,long)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.goTo(Label)	false	false	false	0	0	12	17	null	null
clojure.lang.RT.map(Object[])	false	false	false	0	0	43	48	null	null
clojure.lang.Keyword.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.Seq.count()	false	false	false	0	0	0	0	null	null
clojure.lang.TRef.invoke(Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.Node.val()	false	false	true	0	0	0	48	null	null
clojure.lang.Numbers.gt(int,double)	false	false	true	0	0	0	0	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentSet.equiv(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.getColumnNumber(Reader)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.iterator()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.count()	false	false	true	0	0	0	1	null	null
org.clojure.runtime.Keyword.invoke(Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Range.reduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Util.pcequiv(Object,Object)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.Seq.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.get(int)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.andNot(long,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Link.remove(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.ObjMethod.emitBody(ObjExpr,GeneratorAdapter,Class,Expr)	true	true	false	2	2	3	3	[6ab3e4cd672092823a04c944210a23c29142785d]	package
clojure.lang.Numbers.quotient(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassWriter.newNameType(String,String)	true	false	false	1	4	4	4	[c8d3ef3929e8049a84957002bc7e2071844bfb53]	public
clojure.lang.PersistentHashMap.iterator()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitIntInsn(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.FloatOps.opsWith(FloatOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerBitOps.combine(BitOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.CaseExpr.emitShiftMask(GeneratorAdapter)	false	false	false	0	0	3	3	null	null
clojure.lang.Compiler.StaticInvokeExpr.parse(Var,ISeq,Symbol)	false	false	false	0	0	0	1	null	null
clojure.lang.APersistentMap.KeySeq.create(ISeq)	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.IntegerOps.opsWith(FloatOps)	false	false	true	0	0	0	0	null	null
clojure.lang.ARef.addWatch(Agent,IFn,boolean)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.toArray()	false	false	true	0	0	0	1	null	null
clojure.lang.Tuple.count()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.charCast(double)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Black.replace(Object,Object,Node,Node)	false	false	false	0	0	0	0	null	null
clojure.lang.Agent.getErrorHandler()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.Method.getReturnType()	false	false	false	0	0	0	1	null	null
clojure.lang.Numbers.FloatOps.add(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Ref.getValidator()	false	false	true	0	0	0	1	null	null
clojure.lang.ArraySeq.ArraySeq_int.indexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.MethodWriter.getNewOffset(int[],int[],int,int)	false	false	false	0	0	13	13	null	null
clojure.lang.PersistentHashMap2.HashCollisionNode.ensureEditable(AtomicReference)	false	false	true	0	0	0	3	null	null
org.clojure.runtime.RatioNum.doubleValue()	false	false	true	0	0	0	7	null	null
clojure.lang.Reflector.prepRet(Class,Object)	false	false	false	0	0	6	14	null	null
clojure.lang.APersistentVector.SubVector.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.InstanceMethodExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RT.boundedLength(Cons,int)	false	false	true	0	0	0	6	null	null
clojure.lang.Compiler.StaticMethodExpr.emitIntrinsicPredicate(C,ObjExpr,GeneratorAdapter,Label)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.DoubleNum.truncateBy(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.TransientVector.valAt(Object,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.XMLHandler.endElement(String,String,String)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Tail.count()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.aget(Object[],int)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Var.bind(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ASeq.cons(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.RatioOps.dec(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.tagClass(Object)	false	false	false	0	0	11	11	null	null
clojure.lang.Compiler.EmptyExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.EdnReader.DispatchReader.invoke(Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Agent.setErrorMode(Keyword)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ThrowExpr.Parser.parse(C,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LazySeq.hashCode()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitTypeInsn(int,String)	false	false	true	0	0	0	0	null	null
clojure.asm.MethodVisitor.visitTableSwitchInsn(int,int,Label,Label[])	false	false	false	0	0	9	9	null	null
clojure.lang.Namespace.importClass(Symbol,Class)	false	false	false	0	0	1	1	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	9	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.analyze(C,Object,String)	false	false	true	0	0	0	3	null	null
clojure.lang.Numbers.divide(Object,float)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Link.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.InstanceFieldExpr.evalAssign(Expr)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.loadThis()	false	false	false	0	0	15	28	null	null
clojure.lang.Util.equiv(boolean,boolean)	false	false	false	0	0	0	0	null	null
clojure.lang.LispReader.UnmatchedDelimiterReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.assocEx(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.anew(Type)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.DoubleNum.equals(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.vals(NodeIterator)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.MethodParamExpr.eval()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Link.next()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.TransientVector.editableArrayFor(int)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RBSet.iterator()	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentHashMap2.createNode(int,Object,Object,int,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.RT.longCast(Object)	false	false	false	0	0	5	5	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.minKey()	false	false	true	0	0	0	2	null	null
clojure.asm.commons.InstructionAdapter.dup2X1()	false	false	false	0	0	1	1	null	null
clojure.lang.BigInt.hasheq()	false	false	false	0	0	0	0	null	null
clojure.lang.RT.vector(Object[])	false	false	false	0	0	6	6	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.assoc(AtomicReference,int,int,Object,Object,Box)	true	false	false	1	6	6	6	[eedcf35479737ab1136e3b8a00b2759190a73fdb]	public
org.clojure.runtime.RBTree.Black.addLeft(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Tail.contains(Object)	false	false	true	0	0	0	0	null	null
org.clojure.tools.TypeDump.visitSource(String,String)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Tail.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.RatioOps.negate(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.hasheq()	false	false	false	0	0	0	0	null	null
clojure.lang.Util.dohasheq(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.AFn.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.LeafNode.ensureEditable(AtomicReference)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.DoubleNum.addTo(int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Link.add(Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Cons.iter()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.contains(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.gte(Object,Object)	false	false	false	0	0	3	8	null	null
clojure.lang.PersistentListMap.Tail.get(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gt(long,double)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListMap.next()	false	false	true	0	0	0	2	null	null
clojure.asm.MethodAdapter.visitLineNumber(int,Label)	false	false	true	0	0	0	22	null	null
clojure.lang.Numbers.lt(long,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.max(double,long)	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_long.first()	false	false	false	0	0	0	0	null	null
clojure.lang.Var.intern(Symbol,Object,boolean)	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.divide(double,long)	false	false	false	0	0	0	0	null	null
clojure.asm.ClassWriter.visitAttribute(Attribute)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.uncheckedByteCast(int)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Red.addRight(Node)	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderLexer.mT35()	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.RatioOps.gte(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.dconst(double)	false	false	false	0	0	2	2	null	null
clojure.lang.Compiler.demunge(String)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.Transaction.run(IFn)	false	false	true	0	0	0	1	null	null
clojure.lang.RT.load(String)	false	false	false	0	0	1	1	null	null
clojure.lang.APersistentVector.RSeq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.DoubleNum.plusp()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListMap.Link.add(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.InstanceFieldExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.emitHostArgs(PersistentVector)	false	false	true	0	0	0	2	null	null
clojure.asm.Handle.toString()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.assoc(Object,Object)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.PersistentTree.NodeIterator.remove()	false	false	true	0	0	0	0	null	null
clojure.lang.ARef.removeWatch(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.depth()	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentTree.remove(Node,Object,Box)	false	false	true	0	0	0	3	null	null
clojure.lang.ArraySeq.ArraySeq_double.index()	false	false	false	0	0	0	0	null	null
clojure.lang.Namespace.readResolve()	false	false	false	0	0	0	0	null	null
clojure.lang.Tuple.hashCode()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.and(long,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.count()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListMap.put(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.ObjExpr.emitKeyword(GeneratorAdapter,Keyword)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.MapExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.Namespace.internAccessor(String,String)	false	false	true	0	0	0	0	null	null
clojure.lang.LazilyPersistentVector.ChunkedSeq.index()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.visitTableSwitchInsn(int,int,Label,Label[])	false	false	false	0	0	0	0	null	null
clojure.lang.Ratio.decimalValue()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.lte(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.floatCast(float)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Tail.capacity()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.list()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.Node.balanceRight(Node)	false	false	true	0	0	0	1	null	null
clojure.lang.TRef.valAsOfPoint(TRef,int)	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.macroexpand(Object)	false	false	false	0	0	3	19	null	null
clojure.lang.Numbers.compare(Number,Number)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentVector.MutableVector.tailoff()	false	false	true	0	0	0	4	null	null
clojure.lang.PersistentQueue.contains(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentArrayList.create(Master,int,int,BitSet)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.doubleCast(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LiteralExpr.emitHostExpr()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.rightBalance(Object,Object,Node,Node)	false	false	true	0	0	0	2	null	null
clojure.lang.BytecodeCompiler.InvokeExpr.eval()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.Black.redden()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.create(int,PersistentArray,int)	false	false	true	0	0	0	2	null	null
clojure.lang.Agent.restart(Object,boolean)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.opsWith(BigDecimalOps)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.minus(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.AReference.meta()	false	false	false	0	0	9	9	null	null
clojure.lang.Symbol.create(String,String)	false	false	false	0	0	0	2	null	null
clojure.lang.LazySeq.set(int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.doubleCast(byte)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.multiply(long,int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.LeafNode.toString()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.divide(double,float)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Reflector.invokeInstanceMember(String,Object,Object,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Delay.invoke()	true	false	true	1	0	0	1	[1d5027ce0b18e8c35d630632aade98399b9456fb]	public
clojure.lang.PersistentStructMap.assocEx(Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableMap.find(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Keyword.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.SubVector.count()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.LongBitOps.testBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.BodyExpr.canEmitPrimitive()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.asTransient()	false	false	false	0	0	7	7	null	null
clojure.asm.MethodAdapter.visitAttribute(Attribute)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.FnExpr.isVariadic()	false	false	true	0	0	0	2	null	null
org.clojure.runtime.PersistentTree.contains(Object)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.RT.setValues(ThreadLocalData,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.AMapEntry.pop()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.emitMethods(ClassVisitor)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.isPos(long)	false	false	false	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_byte.remove()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.multiply(float,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.MethodAdapter.visitMultiANewArrayInsn(String,int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.max()	false	false	true	0	0	0	1	null	null
clojure.lang.Module.findOrCreate(String)	false	false	true	0	0	0	1	null	null
clojure.lang.LockingTransaction.tryWriteLock(Ref)	false	false	false	0	0	3	3	null	null
clojure.lang.PersistentList.reduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.FullNode.ensureEditable(AtomicReference)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentTreeMap.BlackBranchVal.val()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RestFn1.invoke(ThreadLocalData,Object,Object,Object,Object,Object,Cons)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.emitLetFnInits(GeneratorAdapter,ObjExpr,IPersistentSet)	false	false	false	0	0	1	1	null	null
clojure.asm.commons.AdviceAdapter.visitFieldInsn(int,String,String,String)	false	false	false	0	0	0	0	null	null
clojure.lang.ATransientMap.without(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.shiftLeft(long,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RestFn2.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentStructMap.assoc(Object,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.RT.arrayToList(Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListMap.capacity()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.shortCast(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.cachedClassName(int)	false	false	false	0	0	3	3	null	null
clojure.lang.RT.shortCast(int)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentArray.getSetArray()	false	false	true	0	0	0	1	null	null
org.clojure.runtime.RBSet.Black.addLeft(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.BindingInit.binding()	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.FnExpr.emitVar(GeneratorAdapter,Var)	false	false	true	0	0	0	4	null	null
clojure.lang.Compiler.LocalBinding.getName()	false	false	true	0	0	0	15	null	null
clojure.lang.FixNum.divide(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.UnresolvedVarExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntOps.multiply(Number,Number)	false	false	false	0	0	2	2	null	null
clojure.lang.APersistentMap.addAll(Collection)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.ChunkedSeq.chunkedFirst()	false	false	false	0	0	0	0	null	null
clojure.lang.Ref.currentVal()	false	false	false	0	0	1	2	null	null
clojure.lang.PersistentList.EmptyList.lastIndexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.Handle.getDesc()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.StaticMethodExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeSet.disjoin(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.TryExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RT.listStar(Object,Object,Object,Object,Object,Cons)	false	false	true	0	0	0	2	null	null
clojure.asm.FieldVisitor.visitAttribute(Attribute)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentQueue.hashCode()	false	false	false	0	0	0	0	null	null
clojure.lang.RT.keys(Object)	false	false	false	0	0	11	12	null	null
org.clojure.runtime.Symbol.hashCode()	false	false	true	0	0	0	2	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHybridMap.add(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassWriter.newDouble(double)	false	false	false	0	0	2	2	null	null
clojure.asm.MethodWriter.visitLineNumber(int,Label)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn4.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.tools.TypeDump.visitOuterClass(String,String,String)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.minusP(long)	false	false	false	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_byte.hasNext()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListMap.Link.next()	false	false	true	0	0	0	0	null	null
clojure.lang.ASeq.iterator()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.compile(String,String,LineNumberingPushbackReader[])	false	false	true	0	0	0	1	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Keyword.invoke(ThreadLocalData,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Num.inc(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.remove(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Link.remove(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.IfExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LocalBinding.toString()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gte(float,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.contains(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.BigNum.truncateBy(BigInteger)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArrayMap.Seq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.Symbol.intern(String)	false	false	false	0	0	36	36	null	null
clojure.lang.Compiler.MetaExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.StreamSeq.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentMap.mapHasheq(IPersistentMap)	false	false	false	0	0	0	1	null	null
clojure.lang.BytecodeCompiler.AssignExpr.parse(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.FnMethod.getMethodName()	false	false	false	0	0	3	3	null	null
clojure.asm.commons.GeneratorAdapter.loadArgArray()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.HashCollisionNode.without(int,int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.MapEntry.Seq.first()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.rseq()	false	false	false	0	0	1	1	null	null
clojure.asm.commons.InstructionAdapter.invokeinterface(String,String,String)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.Accessor.invoke(Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentMap.toArray(Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn2.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.MutableVector.nth(int)	false	false	true	0	0	0	2	null	null
clojure.lang.Murmur3.mixK1(int)	false	false	false	0	0	6	6	null	null
clojure.asm.commons.AdviceAdapter.visitVarInsn(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.emitConstant(GeneratorAdapter,int)	false	false	false	0	0	6	6	null	null
clojure.lang.Compiler.FnExpr.getName()	false	false	true	0	0	0	6	null	null
clojure.lang.PersistentList.withMeta(IPersistentMap)	false	false	false	0	0	0	1	null	null
clojure.lang.Ratio.compareTo(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.CodeSizeEvaluator.visitIincInsn(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.box(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.Iter.setValue(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.replace(Node,Object,Object)	false	false	true	0	0	0	3	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LispReader.isUnquoteSplicing(Object)	false	false	false	0	0	2	2	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	14	null	null
clojure.lang.PersistentTree.RedVal.blacken()	false	false	true	0	0	0	0	null	null
clojure.lang.DoubleNum.multiply(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.FloatOps.opsWith(BigIntegerOps)	false	false	true	0	0	0	0	null	null
clojure.lang.ATransientMap.conj(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.count()	false	false	false	0	0	0	0	null	null
clojure.lang.Ref.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.entryAt(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentArray.isolate()	false	false	true	0	0	0	1	null	null
org.clojure.runtime.RBSet.Red.blacken()	false	false	true	0	0	0	0	null	null
clojure.lang.Var.unbindRoot()	false	false	false	0	0	0	0	null	null
clojure.asm.MethodWriter.put(ByteVector)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.lt(double,double)	false	false	false	0	0	0	6	null	null
clojure.lang.ArraySeq.ArraySeq_char.lastIndexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.EnumerationSeq.first()	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.DefExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RT.list(Object,Object,Object,Object)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentListIdentityMap.Link.find(Object)	false	false	true	0	0	0	4	null	null
clojure.asm.commons.GeneratorAdapter.dup()	false	false	false	0	0	21	30	null	null
org.clojure.runtime.FixNum.truncateBy(ThreadLocalData,BigInteger)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.ValIterator.hasNext()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.emitUnboxedLocal(GeneratorAdapter,LocalBinding)	false	false	false	0	0	3	3	null	null
clojure.asm.commons.LocalVariablesSorter.visitVarInsn(int,int)	false	false	false	0	0	21	23	null	null
org.clojure.runtime.PersistentArray.Entry.create(int,Object,Entry)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentHashtableMap.Seq.create(PersistentArray)	false	false	true	0	0	0	1	null	null
clojure.lang.ChunkedCons.chunkedMore()	false	false	false	0	0	1	1	null	null
clojure.lang.Agent.setValidator(IFn)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.hashCode()	false	false	false	0	0	0	1	null	null
clojure.asm.MethodAdapter.visitLocalVariable(String,String,String,Label,Label,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Keyword.readResolve()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.AnExpr.canEmitHostExpr()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentList.rest()	false	false	true	0	0	0	2	null	null
clojure.lang.Util.hashCombine(int,int)	false	false	false	0	0	2	9	null	null
clojure.lang.Numbers.DoubleArrayOps.opsWith(IntegerOps)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.Node.balanceRight(Node)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.quotient(Object,long)	false	false	false	0	0	0	0	null	null
clojure.lang.Atom.swap(IFn,Object,Object,ISeq)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.BigNum.gt(int)	false	false	true	0	0	0	0	null	null
clojure.lang.TRef.equals(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.shortCast(double)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_minus(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceExpr.slashname(Class)	false	false	false	0	0	3	3	null	null
clojure.lang.ArraySeq.ArraySeq_int.reduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.MethodExpr.emitArgsAsArray(IPersistentArray,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	2	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.ClassReader.readLabel(int,Label[])	false	false	false	0	0	16	16	null	null
clojure.lang.Compiler.TryExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.InvokeExpr.parse(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	16	16	null	null
clojure.lang.Keyword.intern(String,String)	false	false	false	0	0	3	3	null	null
clojure.lang.ASeq.count()	false	false	false	0	0	1	5	null	null
org.clojure.runtime.BigNum.truncateBy(ThreadLocalData,BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.SetExpr.eval()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.plusp()	false	false	true	0	0	0	0	null	null
clojure.lang.DynamicVar.hasRoot()	false	false	true	0	0	0	3	null	null
clojure.lang.Compiler.FnExpr.emitVar(GeneratorAdapter,Var)	false	false	true	0	0	0	4	null	null
clojure.lang.LockingTransaction.getCommitPoint()	false	false	false	0	0	1	1	null	null
org.clojure.runtime.FixNum.equivTo(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.emitConstants(GeneratorAdapter)	false	false	false	0	0	1	2	null	null
clojure.asm.commons.InstructionAdapter.getstatic(String,String,String)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentArrayMap.empty()	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.equiv(int,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.MethodWriter.findSubroutine(Label,int)	false	false	true	0	0	0	3	null	null
clojure.lang.ArrayIter.ArrayIter_boolean.remove()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.kvreduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.StringSeq.first()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	1	1	null	null
clojure.lang.RT.aclone(boolean[])	false	false	false	0	0	0	0	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Num.negate(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableIdentityMap.Iter.next()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.LocalVariablesSorter.visitIincInsn(int,int)	false	false	false	0	0	0	0	null	null
clojure.asm.ClassReader.readFrameType(Object[],int,int,char[],Label[])	true	false	false	1	5	5	5	[c8d3ef3929e8049a84957002bc7e2071844bfb53]	private
clojure.lang.EdnReader.StringReader.invoke(Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentStructMap.Seq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_int_inc(int)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.valAt(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentHybridMap.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentStructMap.seq()	false	false	false	0	0	0	1	null	null
org.clojure.runtime.DoubleNum.multiply(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.minusP(double,long)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.retainAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_int.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.StaticFieldExpr.emitUnboxed(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.InvokeExpr.emitExpression()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.entryAt(Object)	false	false	false	0	0	0	2	null	null
clojure.lang.APersistentVector.listIterator()	false	false	false	0	0	0	0	null	null
clojure.lang.TRef.invoke(Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lte(int,float)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassWriter.newNameTypeItem(String,String)	false	false	false	0	0	1	1	null	null
clojure.asm.commons.InstructionAdapter.visitInvokeDynamicInsn(String,String,Handle,Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.KeywordInvokeExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.AFn.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.ObjExpr.vars()	false	false	false	0	0	0	1	null	null
clojure.lang.Var.toString()	false	false	false	0	0	0	5	null	null
clojure.lang.PersistentTreeMap.depth(Node)	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.multiply(long,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.ArraySeq.ArraySeq_char.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.shiftRight(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn2.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.longValue()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.MethodExpr.emitArgsAsArray(IPersistentVector,ObjExpr,GeneratorAdapter)	false	false	false	0	0	9	9	null	null
clojure.lang.Compiler.HostExpr.emitExpression()	false	false	true	0	0	0	0	null	null
clojure.lang.Actor.change(IFn,ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentMap.removeAll(Collection)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.BigNum.gt(BigInteger)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.BlackVal.redden()	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.assoc(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.decP(double)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.box(float)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderParser.dotExpression()	true	false	true	1	2	0	2	[fc33cf217b1dbfaaee3ca3294a6785df5befdaa1]	public
org.clojure.runtime.AFn.throwArity()	false	false	true	0	0	0	13	null	null
clojure.lang.Compiler.LocalBindingExpr.emitUnboxed(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.RatioOps.opsWith(RatioOps)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.HashCollisionNode.without(AtomicReference,int,int,Object,Box)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.AFn.applyTo(ThreadLocalData,Cons)	true	false	true	1	0	0	0	[8800e169cf12df893fdd89c8e93edb36f8e5388e]	public
clojure.lang.AMapEntry.containsKey(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gte(float,double)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.seq()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.ValIterator.remove()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.loadResourceScript(Class,String)	true	false	false	1	1	1	8	[5c97b610426556b6d032084f1dc601e85000f829]	public
clojure.lang.PersistentList.EmptyList.removeAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.multiply(float,double)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.shiftLeft(long,long)	false	false	false	0	0	3	3	null	null
clojure.lang.AMapEntry.toString()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.StaticFieldExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.FixNum.truncateBy(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.EdnReader.read(PushbackReader,boolean,Object,boolean,Object)	false	false	false	0	0	7	7	null	null
clojure.lang.Numbers.shiftLeft(Object,long)	false	false	false	0	0	0	0	null	null
clojure.asm.Label.getFirst()	false	false	false	0	0	7	7	null	null
clojure.lang.Compiler.ImportExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.BlackBranch.left()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.DoubleOps.opsWith(BigIntOps)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.Method.getName()	false	false	false	0	0	2	2	null	null
clojure.asm.commons.AnalyzerAdapter.pushDesc(String)	false	false	false	0	0	16	16	null	null
clojure.lang.RestFn0.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.asm.MethodWriter.visitMethodInsn(int,String,String,String)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.floatCast(byte)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.divide(int)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedDoubleCast(float)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.and(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.InstanceExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.NilExpr.emitExpression()	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderLexer.mHexDigit()	false	false	true	0	0	0	5	null	null
clojure.lang.BigNum.equals(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.Tail.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.hashCode()	false	false	true	0	0	0	1	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.FnLoaderThunk.invoke(Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.ClassWriter.getCommonSuperClass(String,String)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentArrayMap.Iter.val()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHybridMap.create(IPersistentMap)	false	false	true	0	0	0	3	null	null
clojure.asm.AnnotationWriter.put(ByteVector)	false	false	false	0	0	6	6	null	null
clojure.lang.RT.uncheckedShortCast(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visit(String,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHybridMap.find(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.BodyExpr.exprs()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.RedBranch.balanceRight(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArray.ValIter.remove()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.RedBranch.balanceLeft(Node)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.FixNum.subtractFrom(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentMap.mapHash(IPersistentMap)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentTree.BlackBranchVal.val()	false	false	true	0	0	0	0	null	null
clojure.lang.FnLoaderThunk.load()	false	false	false	0	0	4	4	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassReader.copyPool(ClassWriter)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.gte(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.ASeq.equals(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.mark(Label)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.divide(long,float)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.keywords()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.addParameterAnnotation(Object,IPersistentMap,int)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHashMap2.TransientHashMap.doWithout(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.double_array(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LispReader.RegexReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.BigInt.bitLength()	false	false	false	0	0	0	0	null	null
clojure.lang.ASeq.set(int,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.Method.getMethod(Method)	false	false	false	0	0	0	0	null	null
clojure.lang.ArgVector.pop()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.CodeSizeEvaluator.getMinSize()	false	false	false	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_int.remove()	false	false	false	0	0	0	0	null	null
clojure.lang.Ref.compareTo(Ref)	false	false	false	0	0	0	0	null	null
clojure.lang.CachedSeq.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentSet.add(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.lookupVar(Symbol,boolean,boolean)	false	false	false	0	0	2	2	null	null
clojure.lang.LazyTransformer.equals(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigDecimalOps.divide(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.DoubleNum.truncateDivide(Num)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.box(double)	false	false	true	0	0	0	1	null	null
clojure.asm.Frame.init(int)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentVector.nodeFor(int)	false	false	true	0	0	0	2	null	null
clojure.lang.RT.shortCast(Object)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RBSet.reverseIterator()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lt(float,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Reflector.setStaticField(Class,String,Object)	false	false	false	0	0	2	2	null	null
clojure.lang.Ref.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.tuple(Object[])	false	false	true	0	0	0	1	null	null
clojure.lang.RT.eq(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.Handle.hashCode()	false	false	false	0	0	1	1	null	null
clojure.asm.commons.EmptyVisitor.visitFrame(int,int,Object[],int,Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.FnSeq.rest()	false	false	true	0	0	0	1	null	null
clojure.lang.FixNum.equals(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LazyTransformer.isRealized()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Accessor.invoke(ThreadLocalData,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Node.kvreduce(IFn,Object)	false	false	false	0	0	3	3	null	null
clojure.lang.LispReader.isMacro(int)	false	false	false	0	0	3	3	null	null
clojure.lang.APersistentVector.SubVector.assocN(int,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.MethodVisitor.visitFieldInsn(int,String,String,String)	false	false	false	0	0	18	18	null	null
clojure.lang.ReaderLexer.getGrammarFileName()	false	false	true	0	0	0	0	null	null
clojure.lang.Ref.getThreadBinding()	false	false	true	0	0	0	5	null	null
clojure.lang.APersistentVector.indexOf(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.APersistentMap.KeySeq.withMeta(IPersistentMap)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Link.find(Object)	false	false	true	0	0	0	3	null	null
clojure.lang.Numbers.unchecked_multiply(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.AFn.compare(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.empty()	false	false	false	0	0	0	0	null	null
clojure.lang.ASeq.Stream.next()	false	false	true	0	0	0	0	null	null
clojure.asm.MethodVisitor.visitLocalVariable(String,String,String,Label,Label,int)	false	false	false	0	0	3	3	null	null
clojure.lang.BigNum.equiv(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.ArrayNode.without(AtomicReference,int,int,Object,Box)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.StaticFieldExpr.canEmitPrimitive()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.jsr(Label)	false	false	false	0	0	1	1	null	null
clojure.asm.commons.InstructionAdapter.putfield(String,String,String)	false	false	false	0	0	1	1	null	null
clojure.asm.commons.InstructionAdapter.add(Type)	false	false	false	0	0	4	4	null	null
clojure.lang.PersistentHashtableMap.grow()	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentVector.MutableVector.valAt(Object)	true	false	true	1	0	0	0	[6e2ff8788fbff36d0ce019c7bfc6adff4fc58cf9]	public
clojure.lang.Compiler.ObjExpr.compile(String,String[],boolean)	true	false	false	1	2	2	2	[877c875235aaa7d9bc1bf5392f1c4991e9ea3f63]	package
clojure.lang.PersistentListMap.Link.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.cons(Object,ISeq)	false	false	true	0	0	0	33	null	null
clojure.lang.Compiler.ListExpr.eval()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.cloneAndSet(Object[],int,Object)	false	false	true	0	0	0	4	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderLexer.mT34()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.findSingleMethod(Class,String,PersistentVector,boolean)	false	false	true	0	0	0	2	null	null
clojure.lang.RT.doubleCast(float)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.RedVal.val()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RatioNum.gt(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.HashCollisionNode.assoc(int,int,Object,Object,Box)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.BigNum.multiplyBy(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.deref()	false	false	false	0	0	161	179	null	null
clojure.lang.PersistentTreeSet.create(List)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.KeyIterator.hasNext()	false	false	true	0	0	0	0	null	null
clojure.asm.MethodWriter.visitIincInsn(int,int)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.BigNum.divideBy(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.VectorExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceExpr.emitStatics(ClassVisitor)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntOps.opsWith(BigDecimalOps)	false	false	false	0	0	0	0	null	null
clojure.lang.Util.equiv(double,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.doEquals(IPersistentVector,Object)	false	false	false	0	0	1	2	null	null
org.clojure.runtime.PersistentTree.RedBranchVal.val()	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
clojure.lang.Numbers.minus(Object,float)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.AdviceAdapter.visitLookupSwitchInsn(Label,int[],Label[])	false	false	false	0	0	0	0	null	null
clojure.lang.RT.peek(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.MutableVector.pushTail(int,Node,Node)	false	false	true	0	0	0	2	null	null
clojure.lang.ArgVector.create(ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedLongCast(double)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.InvokeStaticMethodExpr.getHostType()	false	false	true	0	0	0	0	null	null
clojure.lang.LazyTransformer.set(int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.list(Object,Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
org.clojure.runtime.Num.compareTo(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LockingTransaction.stop(int)	false	false	false	0	0	3	3	null	null
org.clojure.runtime.Var.invoke(ThreadLocalData,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lte(double,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.aclone(int[])	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.FloatArrayOps.opsWith(DoubleArrayOps)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.asTransient()	false	false	false	0	0	3	3	null	null
clojure.lang.RT.byteCast(short)	false	false	false	0	0	0	0	null	null
clojure.lang.EdnReader.MapReader.invoke(Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.LetExpr.eval()	false	false	true	0	0	0	0	null	null
org.clojure.tools.TypeDump.visitEnd()	false	false	true	0	0	0	0	null	null
clojure.asm.Type.getArgumentsAndReturnSizes()	false	false	false	0	0	0	0	null	null
clojure.lang.DoubleNum.divide(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.AMapEntry.valAt(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Volatile.deref()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Var.invoke(ThreadLocalData,Object,Object,Object,Object,Object,Cons)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.depth()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.balanceRightDel(Object,Object,Node,Node)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentHashMap.cloneAndSet(Object[],int,Object,int,Object)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.BigIntOps.isNeg(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.createFromObject(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.ArrayIter.createFromObject(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.Ref.setMinHistory(int)	false	false	false	0	0	0	0	null	null
clojure.lang.ReaderLexer.mHexLiteral()	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentListIdentityMap.count()	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.RatioOps.opsWith(DoubleArrayOps)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentStructMap.construct(Def,ISeq)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.HostExpr.emitUnboxArg(FnExpr,GeneratorAdapter,Class)	false	false	true	0	0	0	3	null	null
org.clojure.runtime.PersistentTree.reverseIterator()	false	false	true	0	0	0	0	null	null
clojure.asm.Attribute.isCodeAttribute()	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.BigDecimalOps.remainder(Number,Number)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.BlackBranchVal.redden()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArray.Seq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_double.first()	false	false	false	0	0	0	0	null	null
clojure.lang.Ref.setMaxHistory(int)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.toArray(Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.LazyTransformer.reify()	false	false	false	0	0	4	4	null	null
clojure.lang.APersistentMap.cons(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.addTo(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.KeyIterator.hasNext()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.byteCast(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.isDefclass()	false	false	true	0	0	0	6	null	null
clojure.lang.DynamicVar.fn()	false	false	true	0	0	0	22	null	null
clojure.lang.RT.uncheckedCharCast(char)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentArrayMap.Seq.key()	false	false	true	0	0	0	0	null	null
clojure.lang.BigInt.fromBigInteger(BigInteger)	false	false	false	0	0	22	31	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.AFn.invoke(ThreadLocalData)	false	false	true	0	0	0	6	null	null
clojure.lang.LazySeq.clear()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.column()	false	false	false	0	0	0	0	null	null
clojure.lang.LispReader.WrappingReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Module.intern(String)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.BigIntegerOps.isNeg(Number)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn4.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentTreeSet.empty()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_negate(long)	false	false	true	0	0	0	0	null	null
clojure.lang.LazyTransformer.addAll(int,Collection)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.subtractFrom(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.indexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.FixNum.lt(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayStream.ArrayStream_int.next()	false	false	true	0	0	0	0	null	null
clojure.lang.Ref.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListMap.Iter.remove()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.invokeDynamic(String,String,Handle,Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.Keyword.hasheq()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.CharExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.RatioNum.truncateBy(int)	false	false	true	0	0	0	0	null	null
clojure.asm.MethodWriter.visitJumpInsn(int,Label)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RT.listStar(Object,Object,Object,Object,Cons)	false	false	true	0	0	0	2	null	null
clojure.asm.Type.getType(Class)	false	false	false	0	0	87	87	null	null
org.clojure.runtime.Cons.first()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.truncate(ThreadLocalData,double,double)	false	false	true	0	0	0	4	null	null
clojure.lang.PersistentArray.trim()	false	false	true	0	0	0	2	null	null
clojure.lang.MultiFn.dissoc(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.isMutable(LocalBinding)	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.RatioOps.remainder(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.lt(Object,long)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.NewExpr.Parser.parse(C,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.DoubleNum.equivTo(RatioNum)	false	false	true	0	0	0	1	null	null
clojure.asm.commons.InstructionAdapter.visitTypeInsn(int,String)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.InvokeConstructorExpr.getHostType()	false	false	true	0	0	0	0	null	null
clojure.lang.AMapEntry.length()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.containsKey(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.LispReader.UnmatchedDelimiterReader.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.create()	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentArray.find(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.setBit(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.FixNum.shiftLeft(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.EmptyExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.ifnull(Label)	false	false	false	0	0	1	1	null	null
clojure.asm.commons.EmptyVisitor.visitCode()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.loadLocal(int)	false	false	false	0	0	0	0	null	null
clojure.asm.Frame.set(int,int)	false	false	false	0	0	8	8	null	null
clojure.lang.PersistentHashMap.HashCollisionNode.findIndex(int,Object)	false	false	true	0	0	0	5	null	null
org.clojure.runtime.AFn.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.vals(NodeIterator)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.FnMethod.reqParms()	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	14	14	null	null
org.clojure.runtime.RT.list(Object,Object,Object)	false	false	true	0	0	0	3	null	null
clojure.lang.RT.intCast(long)	false	false	false	0	0	1	1	null	null
clojure.lang.FixNum.bitAnd(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Symbol.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.FixNum.multiply(int)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderLexer.mFloatingPointLiteral()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.LetExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.entryAt(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.xor(long,long)	false	false	false	0	0	3	3	null	null
org.clojure.runtime.Var.invoke(Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Num.from(BigInteger)	false	false	true	0	0	0	16	null	null
clojure.lang.FixNum.addTo(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.InvokeUntypedInstanceMemberExpr.emitExpression()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.analyzeDo(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.RT.rest(Object)	false	false	true	0	0	0	51	null	null
clojure.lang.Transaction.get()	false	false	true	0	0	0	4	null	null
clojure.lang.DoubleNum.multiplyBy(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.ATransientSet.contains(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.truncateBy(ThreadLocalData,int)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.findKey(Keyword,ISeq)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.RatioOps.equiv(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerOps.dec(Number)	false	false	true	0	0	0	1	null	null
clojure.asm.MethodAdapter.visitIincInsn(int,int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.balanceLeftDel(Object,Object,Node,Node)	false	false	true	0	0	0	3	null	null
clojure.lang.Compiler.ObjExpr.emitClearCloses(GeneratorAdapter)	false	false	false	0	0	0	1	null	null
clojure.lang.Numbers.minus(long,long)	false	false	false	0	0	0	2	null	null
clojure.lang.PersistentTreeMap.min()	false	false	false	0	0	1	1	null	null
clojure.lang.DynamicVar.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.iterator()	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.addP(Object,double)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.rightBalance(Object,Object,Node,Node)	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.andNot(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LocalBinding.bindsToStaticFn()	false	false	true	0	0	0	4	null	null
org.clojure.runtime.RestFn5.invoke(ThreadLocalData,Object,Object,Object,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.EnumerationSeq.next()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.ifge(Label)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.FnExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.multiplyBy(Num)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.FnSeq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.seqFrom(Object,boolean)	false	false	false	0	0	1	1	null	null
clojure.lang.MultiFn.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.InstanceMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LazySeq.add(int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Cons.more()	false	false	false	0	0	1	1	null	null
clojure.lang.Agent.dispatch(IFn,ISeq,boolean)	true	false	true	1	0	0	1	[660f36af98afeb3c5c05a1ec7b3657a324abebba]	public
clojure.lang.Numbers.DoubleOps.isZero(Number)	false	false	false	0	0	0	0	null	null
clojure.asm.ClassReader.readAttribute(Attribute[],String,int,int,char[],int,Label[])	false	false	false	0	0	3	3	null	null
clojure.lang.PersistentTree.maxKey()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigDecimalOps.multiply(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.equiv(Object,int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.ValIterator.remove()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.var(String,String)	false	false	false	0	0	3	3	null	null
clojure.lang.DynamicVar.find(Symbol)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.PersistentListMap.capacity()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitLineNumber(int,Label)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.lookupswitch(Label,int[],Label[])	false	false	false	0	0	1	1	null	null
clojure.lang.APersistentVector.stream()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.CaseExpr.emitExprForHashes(ObjExpr,GeneratorAdapter)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.RatioNum.oneMinus()	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.containsKey(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.FnExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.FloatOps.dec(Number)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.getLineNumberingReader(Reader)	false	false	true	0	0	0	0	null	null
clojure.lang.Symbol.compareTo(Object)	false	false	false	0	0	1	1	null	null
clojure.asm.ClassWriter.newHandleItem(int,String,String,String)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.RT.setValues(ThreadLocalData,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.ClassWriter.visit(int,int,String,String,String,String[])	false	false	false	0	0	0	0	null	null
clojure.lang.LispReader.matchHostName(String)	false	false	true	0	0	0	1	null	null
clojure.lang.Reflector.invokeStaticMethod(String,String,Object[])	true	false	false	1	1	2	21	[36868a7734f15c51eb1831aa9d72a14544496987]	public
clojure.lang.Numbers.lt(double,long)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.CodeSizeEvaluator.visitLookupSwitchInsn(Label,int[],Label[])	false	false	false	0	0	0	0	null	null
clojure.asm.ClassReader.readClass(int,char[])	false	false	false	0	0	18	18	null	null
org.clojure.runtime.PersistentTree.KeyIterator.next()	false	false	true	0	0	0	0	null	null
clojure.api.API.var(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentTree.max()	false	false	true	0	0	0	1	null	null
org.clojure.runtime.Reflector.invokeConstructor(Class,Object[])	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.unchecked_int_multiply(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.FnExpr.parse(C,ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentVector.TransientVector.assoc(Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBSet.ValIterator.next()	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.SyntaxQuoteReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_short.count()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.VarExpr.getHostType()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Tail.find(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHybridMap.iterator()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Transaction.getCurrent(TRef)	false	false	true	0	0	0	2	null	null
clojure.lang.Compiler.LiteralExpr.canEmitHostExpr()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjMethod.body()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.gte(double,long)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn4.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.asm.MethodVisitor.visitAnnotation(String,boolean)	false	false	false	0	0	3	3	null	null
clojure.lang.Compiler.findSingleConstructor(Class,PersistentVector)	false	false	true	0	0	0	0	null	null
clojure.lang.Reflector.paramArgTypeMatch(Class,Class)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.divide(long,double)	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentSet.containsAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.asm.Type.getArgumentTypes()	false	false	false	0	0	0	0	null	null
clojure.asm.ClassWriter.newFloat(float)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentHashMap.LeafNode.assoc(int,int,Object,Object,Box)	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.getMacro(int)	false	false	false	0	0	2	2	null	null
clojure.lang.Numbers.multiply(Object,int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentQueue.isEmpty()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.dec(long)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.inc(long)	false	false	false	0	0	1	1	null	null
clojure.lang.LazilyPersistentVector.empty()	false	false	true	0	0	0	0	null	null
clojure.asm.AnnotationWriter.visitArray(String)	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.TheVarExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.Black.redden()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.isNaN(Object)	false	false	false	0	0	12	12	null	null
clojure.lang.PersistentList.EmptyList.peek()	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_byte.index()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NumberExpr.parse(Number)	false	false	false	0	0	3	3	null	null
clojure.lang.LazyTransformer.add(Object)	false	false	false	0	0	0	0	null	null
clojure.asm.ClassVisitor.visitMethod(int,String,String,String,String[])	true	true	false	1	7	7	7	[c8d3ef3929e8049a84957002bc7e2071844bfb53]	public
clojure.lang.Numbers.add(Object,int)	false	false	true	0	0	0	2	null	null
clojure.lang.TransactionalHashMap.clear()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentListMap.Link.get(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedDoubleCast(double)	false	false	false	0	0	0	0	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.NilExpr.val()	false	false	false	0	0	0	0	null	null
clojure.lang.Reflector.invokeInstanceMember(String,Object,Object)	false	false	false	0	0	0	1	null	null
clojure.lang.Compiler.ObjExpr.internalName()	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn2.invoke(Object,Object,Object,Object,Object,Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntOps.opsWith(LongOps)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.LocalVariablesSorter.visitLocalVariable(String,String,String,Label,Label,int)	false	false	false	0	0	14	14	null	null
clojure.lang.Module.findOrCreateModule(String)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn0.invoke(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeSet.create(Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerBitOps.bitOpsWith(BigIntegerBitOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.isNeg(float)	false	false	true	0	0	0	0	null	null
clojure.asm.MethodWriter.startFrame(int,int,int)	false	false	false	0	0	4	4	null	null
clojure.lang.EdnReader.TaggedReader.invoke(Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.TransientVector.editableRoot(Node)	false	false	false	0	0	1	1	null	null
clojure.lang.APersistentVector.Seq.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_add(double,long)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Accessor.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.add(Object,Object)	false	false	false	0	0	3	8	null	null
clojure.lang.Compiler.NewInstanceExpr.gatherMethods(Class,ISeq)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.resolveIn(Namespace,Symbol,boolean)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.RatioNum.lt(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.ArrayNode.foldTasks(List,IFn,IFn,IFn,IFn)	false	false	false	0	0	5	5	null	null
clojure.lang.Atom.swap(IFn,ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.MapEntry.count()	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.isTerminatingMacro(int)	false	false	false	0	0	2	2	null	null
clojure.lang.LockingTransaction.main(String[])	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.reduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.FloatOps.opsWith(LongOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lte(double,double)	false	false	false	0	0	0	6	null	null
clojure.lang.LineNumberingPushbackReader.readLine()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RestFn1.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.EdnReader.TaggedReader.readTagged(PushbackReader,Symbol,IPersistentMap)	false	false	false	0	0	1	1	null	null
clojure.asm.commons.SerialVersionUIDAdder.visitEnd()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RestFn4.invoke(ThreadLocalData,Object,Object,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.DoubleArrayOps.opsWith(BigIntegerOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Namespace.getAliases()	false	false	false	0	0	5	5	null	null
clojure.lang.PersistentVector.reduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.longCast(short)	false	false	false	0	0	0	0	null	null
clojure.lang.ARef.addWatch(Object,IFn)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.analyzeSeq(C,ISeq,String)	true	false	false	1	1	1	1	[ee2250dd7a5b6d6c99d276fa333ca663a555f5e8, e86035f9f9fb002b247bd7ae60c8d6fb190c8f4c]	private
clojure.lang.ReaderLexer.DFA29.getDescription()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.red(Object,Object,Node,Node)	false	false	true	0	0	0	27	null	null
clojure.lang.ArraySeq.ArraySeq_float.first()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_minus(double,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.Red.replace(Object,Object,Node,Node)	false	false	true	0	0	0	0	null	null
clojure.asm.FieldVisitor.visitAnnotation(String,boolean)	false	false	false	0	0	3	3	null	null
clojure.lang.LazySeq.hasheq()	false	false	false	0	0	0	0	null	null
clojure.asm.Type.getMethodDescriptor(Type,Type[])	false	false	false	0	0	2	2	null	null
clojure.lang.StringSeq.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceExpr.build(IPersistentVector,IPersistentVector,Symbol,String,String,Symbol,ISeq)	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.RatioOps.opsWith(FloatOps)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentHashtableMap.calcPrimeCapacity(int)	false	false	true	0	0	0	3	null	null
clojure.lang.Atom.swap(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.opsWith(IntegerOps)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderLexer.mExponent()	false	false	true	0	0	0	4	null	null
clojure.lang.PersistentHashtableMap.Seq.count()	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.ThrowExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnExpr.constantsID()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.DoubleOps.opsWith(RatioOps)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerOps.opsWith(BigIntegerOps)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.assoc(int,int,Object,Object,Box)	false	false	false	0	0	4	4	null	null
org.clojure.runtime.BigNum.onePlus()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.minus(float,long)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn0.invoke(Object,Object,Object,Object,Object,Object[])	false	false	true	0	0	0	0	null	null
org.clojure.runtime.BigNum.intValue()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.RatioOps.add(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Script.main(String[])	false	false	false	0	0	0	0	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.red(Object,Object,Node,Node)	false	false	false	0	0	27	27	null	null
clojure.lang.RT.doubleCast(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RT.booleanCast(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LazySeq.toArray()	false	false	false	0	0	0	1	null	null
clojure.lang.DoubleNum.divideBy(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.editAndRemovePair(AtomicReference,int,int)	false	false	false	0	0	2	2	null	null
clojure.lang.ArrayStream.ArrayStream_long.next()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.rest()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.leftBalance(Object,Object,Node,Node)	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.unchecked_minus(long,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.equivTo(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.currentNS()	false	false	true	0	0	0	4	null	null
clojure.lang.PersistentHashSet.createWithCheck(Object[])	false	false	false	0	0	1	1	null	null
clojure.lang.Var.bindRoot(Object)	false	false	false	0	0	4	4	null	null
clojure.lang.Numbers.LongBitOps.setBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gt(double,int)	false	false	true	0	0	0	0	null	null
clojure.lang.XMLHandler.startDocument()	false	false	false	0	0	0	0	null	null
clojure.asm.ClassReader.readLong(int)	false	false	false	0	0	6	6	null	null
clojure.lang.Numbers.IntegerBitOps.setBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.BigNum.addTo(int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.replace(Node,Object,Object)	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.lt(float,long)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ImportExpr.Parser.parse(C,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.lte(Object,int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArray.isolate()	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.StaticFieldExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.FixNum.equivTo(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.AnExpr.toString()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.VarExpr.emitAssign(C,FnExpr,GeneratorAdapter,Expr)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderLexer.mEscapeSequence()	false	false	true	0	0	0	2	null	null
clojure.asm.commons.InstructionAdapter.cmpg(Type)	false	false	false	0	0	2	2	null	null
clojure.lang.Compiler.KeywordInvokeExpr.emitInstance(C,ObjExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.equiv(double,double)	false	false	false	0	0	0	6	null	null
clojure.lang.DynamicVar.invoke()	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.unchecked_divide(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.CaseExpr.emitThenForInts(ObjExpr,GeneratorAdapter,Type,Expr,Expr,Label,boolean)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.minus(int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderParser.member()	false	false	true	0	0	0	2	null	null
clojure.asm.commons.InstructionAdapter.ificmpne(Label)	false	false	false	0	0	1	1	null	null
clojure.lang.XMLHandler.skippedEntity(String)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.do_nth(Object,int)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentHashMap.FullNode.mask(int,int)	false	false	true	0	0	0	4	null	null
clojure.lang.RT.uncheckedLongCast(byte)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.FixNum.truncateBy(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.emitKeywordCallsites(GeneratorAdapter)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentTree.Node.val()	false	false	true	0	0	0	48	null	null
clojure.lang.Compiler.ObjExpr.objtype()	false	false	false	0	0	0	3	null	null
clojure.lang.PersistentHashMap2.create(Map)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.analyzeSymbol(Symbol)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.Var.popDynamicBinding(ThreadLocalData)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.depth(Node)	false	false	true	0	0	0	3	null	null
org.clojure.runtime.AFn.invoke(ThreadLocalData,Object,Object,Object)	false	false	true	0	0	0	3	null	null
org.clojure.runtime.RestFn1.invoke(ThreadLocalData,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LazilyPersistentVector.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayList.length()	false	false	true	0	0	0	0	null	null
clojure.lang.LazyTransformer.toArray()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.shiftRight(long,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Agent.shutdown()	false	false	false	0	0	0	0	null	null
clojure.lang.RatioNum.equivTo(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.bitAndBy(IntegerNum)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Link.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.box(long)	false	false	false	0	0	0	1	null	null
clojure.lang.Numbers.DoubleOps.quotient(Number,Number)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.contains(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.errorMsg(String,int,String)	false	false	true	0	0	0	1	null	null
clojure.lang.APersistentSet.contains(Object)	false	false	false	0	0	8	10	null	null
org.clojure.runtime.PersistentListMap.Link.val()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.IntegerBitOps.not(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.withMeta(IPersistentMap)	false	false	false	0	0	2	3	null	null
clojure.lang.Util.equiv(double,double)	false	false	false	0	0	0	0	null	null
clojure.lang.LazyCons.next()	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.toBigDecimal(Object)	false	false	false	0	0	28	28	null	null
clojure.lang.Ref.invoke(Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.balanceLeftDel(Object,Object,Node,Node)	false	false	true	0	0	0	3	null	null
clojure.lang.PersistentArrayMap.withMeta(IPersistentMap)	false	false	false	0	0	1	2	null	null
clojure.lang.BigNum.shiftLeft(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderLexer.mT37()	false	false	true	0	0	0	1	null	null
org.clojure.runtime.PersistentTree.rseq()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.min()	false	false	true	0	0	0	1	null	null
clojure.lang.RT.charCast(byte)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.Node.balanceLeft(Node)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.LongOps.divide(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.TransientVector.conj(Object)	false	false	false	0	0	4	4	null	null
clojure.asm.ClassVisitor.visitAttribute(Attribute)	true	true	false	1	2	2	2	[c8d3ef3929e8049a84957002bc7e2071844bfb53]	public
clojure.lang.BigNum.multiply(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.multiply(int,float)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.charCast(char)	false	false	false	0	0	0	0	null	null
clojure.lang.DynamicVar.isBound()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.remainder(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.asm.ClassWriter.put122(int,int,int)	false	false	false	0	0	4	4	null	null
clojure.lang.FixNum.hashCode()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.LeafNode.getKey()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.Seq.next(PersistentArray,int,ISeq)	false	false	true	0	0	0	2	null	null
clojure.lang.Var.pushThreadBindings(Associative)	false	false	false	0	0	40	40	null	null
clojure.lang.LispReader.EvalReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.Seq.first()	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedIntCast(double)	false	false	false	0	0	0	0	null	null
clojure.lang.FixNum.divideBy(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentArray.cons(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RatioNum.gt(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntOps.isZero(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.keys()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.meta()	false	false	false	0	0	3	3	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.MethodVisitor.visitJumpInsn(int,Label)	false	false	false	0	0	37	37	null	null
clojure.lang.CachedSeq.rest()	false	false	true	0	0	0	1	null	null
clojure.lang.ArraySeq.ArraySeq_long.lastIndexOf(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.keys()	false	false	true	0	0	0	1	null	null
org.clojure.runtime.PersistentHashtableMap.capacity()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gt(int,float)	false	false	true	0	0	0	0	null	null
clojure.lang.MapEntry.getValue()	false	false	false	0	0	0	1	null	null
clojure.lang.Compiler.getType(Class)	false	false	false	0	0	7	7	null	null
org.clojure.runtime.RBTree.Black.blacken()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.equiv(Num)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn5.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.analyzeMethod(FnExpr,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentListMap.Link.first()	false	false	true	0	0	0	0	null	null
clojure.asm.ClassReader.readParameterAnnotations(int,String,char[],boolean,MethodVisitor)	false	false	false	0	0	2	2	null	null
clojure.lang.Ref.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.inc(float)	false	false	true	0	0	0	0	null	null
clojure.lang.AFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Node.getValue()	false	false	false	0	0	0	0	null	null
clojure.asm.MethodAdapter.visitVarInsn(int,int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentQueue.toArray(Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.compareTo(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.BigNum.lt(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.Keyword.invoke()	false	false	false	0	0	0	0	null	null
clojure.asm.Frame.merge(ClassWriter,int,int[],int)	false	false	false	0	0	5	5	null	null
clojure.lang.RatioNum.equals(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Reflector.invokeInstanceMember(String,Object,Object,Object,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.FixNum.equiv(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.BigNum.bitXor(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.addP(double,double)	false	false	false	0	0	2	2	null	null
clojure.asm.commons.Method.equals(Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RestFn3.applyTo(ThreadLocalData,Cons)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RatioNum.multiply(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.MethodParamExpr.canEmitPrimitive()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.gt(double,float)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.elideMeta(Object)	false	false	false	0	0	2	2	null	null
clojure.lang.RT.entryString(Object,Object)	false	false	true	0	0	0	3	null	null
clojure.lang.Numbers.min(Object,long)	false	false	false	0	0	0	0	null	null
clojure.lang.MultiFn.getMethod(Object)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentArrayList.cons(Object)	false	false	true	0	0	0	19	null	null
clojure.lang.Numbers.divide(int,double)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.xor(int,int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.AFn.invoke(Object)	false	false	true	0	0	0	4	null	null
org.clojure.runtime.RBSet.RedBranch.left()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.FullNode.Seq.create(FullNode,int)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentTreeMap.compare(Object,Object)	false	false	true	0	0	0	4	null	null
clojure.lang.TRef.invoke()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentListMap.Tail.first()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.compare(Object,Object)	false	false	true	0	0	0	4	null	null
clojure.lang.RT.uncheckedLongCast(short)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.ValIterator.hasNext()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.emitMethods(ClassVisitor)	false	false	false	0	0	1	1	null	null
clojure.lang.BigInt.byteValue()	false	false	false	0	0	0	0	null	null
clojure.lang.RT.box(char)	false	false	false	0	0	1	2	null	null
clojure.lang.Compiler.NewInstanceExpr.parse(C,ISeq)	true	false	true	1	1	0	1	[712fd91105ae257ec09005e793ede1eed39a167c]	package
clojure.lang.RT.listStar(Object,Object,Object,Object,Object,ISeq)	false	false	false	0	0	1	2	null	null
clojure.lang.RT.byteCast(byte)	false	false	false	0	0	0	0	null	null
clojure.asm.MethodVisitor.visitIincInsn(int,int)	false	false	false	0	0	8	8	null	null
clojure.lang.PersistentQueue.removeAll(Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.isZero(double)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.minus(int,double)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.lte(long,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.AHostExpr.canEmitHostExpr()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigDecimalOps.opsWith(RatioOps)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.StaticMethodExpr.isBoxedMath(Method)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.BigIntOps.lte(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Cons.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigDecimalOps.inc(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.monitorEnter()	false	false	false	0	0	1	1	null	null
clojure.lang.ASeq.clear()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.createWithCheck(Object[])	true	true	false	1	1	1	1	[e6e39d5931fbdf3dfa68cd2d059b8e26ce45c965]	public
clojure.lang.PersistentVector.mutable()	false	false	true	0	0	0	3	null	null
clojure.asm.commons.CodeSizeEvaluator.getMaxSize()	false	false	false	0	0	0	0	null	null
clojure.lang.DoubleNum.intValue()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListMap.Link.seq()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.BodyExpr.Parser.parse(C,Object)	false	false	false	0	0	8	8	null	null
org.clojure.runtime.RatioNum.gt(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.FnMethod.isVariadic()	false	false	false	0	0	4	4	null	null
clojure.lang.PersistentTree.BlackBranch.right()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.DoubleNum.divide(BigInteger)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.Black.addRight(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntOps.isPos(Number)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentHybridMap.createHashtableMap(Object[])	false	false	true	0	0	0	2	null	null
clojure.lang.FixNum.truncateDivide(Num)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RatioNum.divide(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Num.from(double)	false	false	true	0	0	0	22	null	null
clojure.asm.commons.GeneratorAdapter.loadArgs(int,int)	false	false	false	0	0	1	1	null	null
clojure.lang.Stream.sequence()	false	false	true	0	0	0	1	null	null
clojure.lang.Transaction.doSet(TRef,Object)	false	false	true	0	0	0	3	null	null
clojure.lang.Namespace.find(String)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.seq()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.Method.getArgumentTypes()	false	false	false	0	0	0	1	null	null
clojure.lang.PersistentVector.TransientVector.editableTail(Object[])	false	false	false	0	0	1	1	null	null
org.clojure.runtime.PersistentListMap.Tail.key()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.minusP(long,long)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.AdviceAdapter.visitMultiANewArrayInsn(String,int)	false	false	false	0	0	0	0	null	null
clojure.lang.DynamicVar.invoke(Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Keyword.intern(String)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Num.from(double)	false	false	true	0	0	0	19	null	null
org.clojure.runtime.FixNum.minusp()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.listStar(Object,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.addP(Object,long)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashSet.create(List)	false	false	false	0	0	0	1	null	null
clojure.lang.PersistentHybridIdentityMap.create(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.thisName()	false	false	false	0	0	0	0	null	null
clojure.asm.MethodWriter.visitAttribute(Attribute)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.gt(int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.FloatOps.lt(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.EnumerationSeq.create(Enumeration)	false	false	false	0	0	1	2	null	null
clojure.lang.Compiler.eval(Object,boolean)	false	false	false	0	0	4	4	null	null
clojure.asm.commons.InstructionAdapter.invokevirtual(String,String,String)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.RatioOps.isNeg(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.FixNum.plusp()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.NodeIterator.hasNext()	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.clearBit(Object,long)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RT.listStar(Object,Object,ISeq)	false	false	true	0	0	0	2	null	null
clojure.lang.StaticMemberInvoker.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.byte_array(int,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RatioNum.truncateDivide(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.ArrayIter.ArrayIter_boolean.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.compiledClass()	false	false	false	0	0	0	0	null	null
clojure.lang.LazySeq.next()	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_char.indexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.MapEntry.Iter.hasNext()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Keyword.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RT.listStar(Object,Object,Cons)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentListMap.add(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentTreeMap.count()	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_float.count()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RBTree.reverseIterator()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.resolve(Symbol)	true	false	false	1	1	2	2	[2fd70293876dc3713cb9deb1c3e1f237336c6b62]	package
clojure.lang.Numbers.shiftRight(long,long)	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.equiv(int,float)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.AdviceAdapter.visitLabel(Label)	false	false	false	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,ISeq)	false	false	true	0	0	0	21	null	null
clojure.lang.PersistentHashMap2.HashCollisionNode.nodeSeq()	false	false	true	0	0	0	0	null	null
clojure.lang.Actor.enqueue(Action)	false	false	true	0	0	0	3	null	null
clojure.lang.PersistentVector.kvreduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.processCommandLine(String[])	false	false	false	0	0	0	2	null	null
clojure.lang.PersistentHashMap.valAt(Object)	true	false	false	1	0	0	0	[14287172ee1ea7549e83e115e8b943a94c444736]	public
clojure.asm.commons.AdviceAdapter.visitCode()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.doPut(int,Object,Object,PersistentArray)	false	false	true	0	0	0	3	null	null
clojure.lang.Numbers.or(long,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashtableMap.without(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.InvokeExpr.emit(C,FnExpr,GeneratorAdapter)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.addAll(int,Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.LazySeq.isRealized()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.LiteralExpr.eval()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.BigNum.truncateBy(RatioNum)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.rightBalance(Object,Object,Node,Node)	false	false	true	0	0	0	2	null	null
clojure.lang.LazySeq.empty()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.NodeIterator.next()	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentHashMap.createWithCheck(ISeq)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.bitpos(int,int)	false	false	true	0	0	0	6	null	null
clojure.lang.PersistentHashMap.LeafNode.find(int,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.BigDecimalOps.quotient(Number,Number)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentArrayMap.remove(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.printString(Object)	false	false	false	0	0	5	6	null	null
org.clojure.runtime.DoubleNum.equivTo(RatioNum)	false	false	true	0	0	0	1	null	null
clojure.lang.Ref.alter(IFn,ISeq)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.rationalize(Number)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHybridMap.add(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.equiv(Object,long)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.InstanceMethodExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.LockingTransaction.bargeTimeElapsed()	false	false	false	0	0	1	1	null	null
clojure.lang.RT.print(Object,Writer)	false	false	false	0	0	8	10	null	null
org.clojure.runtime.AFn.invoke(ThreadLocalData,Object,Object,Object,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.asm.commons.Method.getMethod(Constructor)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.kvreduce(IFn,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_minus(Object,double)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.RecurExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.DoubleNum.truncate(double,double)	false	false	true	0	0	0	4	null	null
clojure.asm.commons.AnalyzerAdapter.visitTypeInsn(int,String)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentList.create(List)	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.unchecked_int_subtract(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.EdnReader.getMacro(int)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentList.EmptyList.size()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.SerialVersionUIDAdder.Item.compareTo(Item)	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.ListExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.RT.printInnerSeq(ISeq,Writer)	false	false	false	0	0	1	2	null	null
clojure.lang.PersistentListMap.Link.capacity()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RestFn3.invoke(Object,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.LazilyPersistentVector.v()	false	false	true	0	0	0	3	null	null
clojure.lang.PersistentListIdentityMap.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.Accessor.invoke(Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.ifacmpeq(Label)	false	false	false	0	0	1	1	null	null
org.clojure.runtime.Transaction.runInTransaction(IFn)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	3	3	null	null
clojure.lang.DoubleNum.truncateBy(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.incP(double)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.readString(String)	false	false	false	0	0	0	1	null	null
clojure.lang.TObj.removeAttr(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBTree.Black.replace(Object,Object,Node,Node)	false	false	true	0	0	0	0	null	null
clojure.lang.Var.Unbound.toString()	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_float.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.Ref.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.RT.listStar(Object,Object,Object,ISeq)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.AFn.invoke()	false	false	true	0	0	0	5	null	null
clojure.lang.Numbers.BigIntegerOps.opsWith(FloatArrayOps)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.DoubleOps.opsWith(DoubleOps)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.remove(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.BigNum.equivTo(int)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.add(int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Var.create(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.LazyCons.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.ThreadLocalData.getTransaction()	false	false	true	0	0	0	6	null	null
org.clojure.runtime.RBTree.NodeIterator.next()	false	false	true	0	0	0	2	null	null
clojure.lang.LazyTransformer.MultiStepper.next()	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.StringExpr.emit(C,ObjExpr,GeneratorAdapter)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.num(double)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.DefaultComparator.compare(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.ClassWriter.newInvokeDynamic(String,String,Handle,Object[])	false	false	false	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitFieldInsn(int,String,String,String)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
clojure.lang.Transaction.reset()	false	false	true	0	0	0	1	null	null
clojure.lang.RT.uncheckedDoubleCast(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntBitOps.or(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.StaticFieldExpr.evalAssign(Expr)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RBSet.balanceRightDel(Object,Object,Node,Node)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.PersistentListMap.Link.put(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	1	null	null
clojure.asm.MethodWriter.visitTypeInsn(int,String)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.push(boolean)	false	false	false	0	0	2	2	null	null
clojure.lang.RatioNum.negate()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.RatioOps.lt(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.TryFinallyExpr.getJavaClass()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LetExpr.doEmit(C,ObjExpr,GeneratorAdapter,boolean)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentTreeMap.Red.removeLeft(Node)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.Num.gte(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Link.next()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Black.redden()	false	false	false	0	0	0	0	null	null
clojure.lang.LazyTransformer.lastIndexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.LongBitOps.not(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.FullNode.Seq.rest()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Keyword.invoke(Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.IdenticalExpr.hasJavaClass()	false	false	true	0	0	0	0	null	null
clojure.lang.Murmur3.mixCollHash(int,int)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.DoubleNum.gt(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.LetExpr.emitBindings()	false	false	true	0	0	0	2	null	null
clojure.lang.RestFn0.invoke()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.minusP(double)	false	false	false	0	0	0	0	null	null
clojure.lang.FixNum.addTo(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_long.reduce(IFn)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentListIdentityMap.next()	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentHashMap2.ArrayNode.Seq.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RatioNum.divideBy(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.IntegerNum.shiftRight(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.clearBit(long,long)	false	false	false	0	0	3	3	null	null
clojure.lang.Numbers.unchecked_dec(double)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Seq.push(Node,ISeq,boolean)	false	false	false	0	0	2	2	null	null
clojure.lang.ASeq.reduce(IFn,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.Item.set(int)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.RBSet.add(Node,Object,Object,Box)	false	false	true	0	0	0	3	null	null
clojure.lang.BigNum.multiply(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.RatioNum.divide(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.vals(NodeIterator)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentHashMap2.ArrayNode.Seq.create(IPersistentMap,INode[],int,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Transaction.touch2(TRef)	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.read1(Reader)	false	false	false	0	0	22	22	null	null
clojure.lang.RT.aget(float[],int)	false	false	false	0	0	0	0	null	null
clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])	false	false	false	0	0	0	21	null	null
clojure.asm.commons.InstructionAdapter.dup2X2()	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.unchecked_multiply(long,double)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.DoubleOps.divide(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.EdnReader.matchSymbol(String)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.IntegerBitOps.clearBit(Number,int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArray.equalKey(Object,Object)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.PersistentHashtableMap.Seq.create(PersistentArray)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.InstanceOfExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArray.create(int,Object,float)	false	false	true	0	0	0	1	null	null
clojure.asm.commons.GeneratorAdapter.swap(Type,Type)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTree.reverseIterator()	false	false	true	0	0	0	0	null	null
clojure.asm.MethodWriter.noSuccessor()	false	false	false	0	0	4	4	null	null
org.clojure.runtime.RBTree.Red.removeRight(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.analyzeMethod(FnExpr,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.Var.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ASeq.addAll(int,Collection)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.Seq.count()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerBitOps.bitOpsWith(LongBitOps)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.Red.removeRight(Node)	false	false	true	0	0	0	0	null	null
clojure.lang.LispReader.DispatchReader.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.Type.getDimensions()	false	false	false	0	0	2	2	null	null
clojure.lang.Compiler.IfExpr.canEmitPrimitive()	false	false	false	0	0	0	0	null	null
clojure.lang.Accessor.invoke(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.RatioOps.lte(Number,Number)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.AMap.put(Keyword,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Numbers.add(float,int)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn1.invoke(Object,Object,Object,Object,Object,Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.CaseExpr.isShiftMasked()	false	false	false	0	0	2	2	null	null
clojure.lang.ArrayStream.ArrayStream_float.next()	false	false	true	0	0	0	0	null	null
clojure.lang.TRef.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.multiply(long,double)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentListIdentityMap.find(Object)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.PersistentHashtableIdentityMap.Iter.nextBucket()	false	false	true	0	0	0	2	null	null
clojure.lang.DoubleNum.lt(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.Reflector.invokeInstanceMember(String,Object,Object,Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object)	false	false	false	0	0	18	18	null	null
clojure.lang.Numbers.BigIntegerBitOps.xor(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.TransactionalHashMap.replace(K,V,V)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.IntegerOps.inc(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object[])	false	false	true	0	0	0	0	null	null
clojure.lang.MultiFn.invoke(Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentStructMap.Seq.first()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.CaseExpr.canEmitPrimitive()	false	false	false	0	0	0	0	null	null
clojure.lang.TRef.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_long.indexOf(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Var.popThreadBinding()	false	false	true	0	0	0	14	null	null
clojure.asm.ClassVisitor.visitOuterClass(String,String,String)	false	false	false	0	0	2	2	null	null
clojure.lang.RatioNum.lt(Num)	false	false	true	0	0	0	0	null	null
clojure.lang.Range.Src.invoke()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.BigNum.floatValue()	false	false	true	0	0	0	0	null	null
clojure.lang.TRef.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.ReaderParser.integerLiteral()	false	false	true	0	0	0	1	null	null
clojure.lang.APersistentArray.equals(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.LazyTransformer.get(int)	false	false	false	0	0	0	0	null	null
clojure.lang.Transaction.getReadPoint()	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentVector.MutableVector.valAt(Object,Object)	false	false	true	0	0	0	1	null	null
clojure.lang.Symbol.hasheq()	false	false	false	0	0	1	1	null	null
clojure.lang.RT.assocN(int,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.MethodWriter.findSubroutineSuccessors(int,Label[],int)	false	false	true	0	0	0	2	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,ISeq)	false	false	true	0	0	0	17	null	null
org.clojure.runtime.RBTree.min()	false	false	true	0	0	0	1	null	null
org.clojure.runtime.Transaction.get2(TRef)	false	false	true	0	0	0	3	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.Seq.create(BitmapIndexedNode,int)	false	false	true	0	0	0	2	null	null
clojure.lang.Numbers.add(float,long)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.ArrayNode.editAndSet(AtomicReference,int,INode)	false	false	true	0	0	0	3	null	null
clojure.lang.Compiler.resolve(Symbol,boolean)	false	false	false	0	0	0	1	null	null
clojure.lang.Numbers.add(double,long)	false	false	false	0	0	1	1	null	null
clojure.lang.ASeq.withMeta(IPersistentMap)	false	false	true	0	0	0	0	null	null
clojure.lang.BigNum.truncateBy(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.asm.MethodAdapter.visitAnnotationDefault()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.IntegerOps.opsWith(LongOps)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.BigNum.divide(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.uncheckedShortCast(double)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.namesStaticMember(Symbol)	false	false	false	0	0	2	2	null	null
clojure.lang.Compiler.NewInstanceMethod.parse(ObjExpr,ISeq,Symbol,Map)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.RatioOps.opsWith(FloatArrayOps)	false	false	true	0	0	0	0	null	null
clojure.lang.DoubleNum.multiply(RatioNum)	false	false	true	0	0	0	0	null	null
clojure.lang.MultiFn.getPreferTable()	false	false	false	0	0	3	3	null	null
clojure.lang.RT.aget(short[],int)	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.add(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RestFn.doInvoke(Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	15	15	null	null
org.clojure.runtime.RestFn3.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_inc(double)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.areturn(Type)	false	false	false	0	0	6	6	null	null
clojure.asm.MethodVisitor.visitInsn(int)	false	false	false	0	0	132	132	null	null
clojure.lang.Util.equiv(Object,boolean)	false	false	false	0	0	0	0	null	null
clojure.lang.BigNum.bitXorBy(IntegerNum)	false	false	true	0	0	0	0	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.minus(long,double)	false	false	false	0	0	1	1	null	null
clojure.lang.ReaderLexer.mT36()	false	false	true	0	0	0	1	null	null
org.clojure.runtime.ThreadLocalData.getValues()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.RatioNum.addTo(BigInteger)	false	false	true	0	0	0	1	null	null
clojure.asm.commons.AnalyzerAdapter.visitVarInsn(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.num(long)	false	false	false	0	0	30	38	null	null
clojure.lang.PersistentHashtableMap.contains(Object)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.Accessor.applyTo(ISeq)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentVector.clear()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.destubClassName(String)	false	false	false	0	0	3	3	null	null
org.clojure.runtime.Num.lte(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.closes()	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentMap.containsValue(Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RatioNum.equivTo(BigInteger)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.gte(Object,int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentListIdentityMap.Tail.get(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.makeClassLoader()	false	false	false	0	0	3	3	null	null
org.clojure.runtime.RestFn0.invoke(Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.APersistentMap.clear()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.getInternalNames(Type[])	false	false	false	0	0	1	1	null	null
clojure.lang.FnLoaderThunk.meta()	false	false	false	0	0	0	0	null	null
clojure.lang.Var.isPublic()	false	false	false	0	0	3	3	null	null
clojure.lang.RT.charCast(float)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.equiv(long,int)	false	false	true	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_char.next()	false	false	false	0	0	0	0	null	null
clojure.lang.Var.getThreadBindingFrame()	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.CaseExpr.doEmit(C,ObjExpr,GeneratorAdapter,boolean)	false	false	false	0	0	2	2	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.without(int,int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.equiv(float,long)	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.SetExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.BitmapIndexedNode.without(int,int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.MapEntry.val()	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.lte(int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.Seq.rest()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.analyzeLet(C,ISeq)	false	false	true	0	0	0	1	null	null
clojure.lang.Util.sneakyThrow0(Throwable)	false	false	false	0	0	1	1	null	null
clojure.lang.PersistentArrayMap.TransientArrayMap.doValAt(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.multiply(int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.closeOver(LocalBinding,FnMethod)	false	false	true	0	0	0	2	null	null
org.clojure.runtime.BigNum.divide(BigInteger)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentArray.ValIter.remove()	false	false	true	0	0	0	0	null	null
clojure.asm.MethodWriter.visitMaxs(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NumberExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.removePair(Object[],int)	false	false	false	0	0	3	3	null	null
clojure.lang.PersistentList.EmptyList.toArray()	false	false	false	0	0	0	0	null	null
clojure.lang.ArgVector.assocN(int,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Keyword.invoke(Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.RT.floatCast(long)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.BigIntegerOps.inc(Number)	false	false	true	0	0	0	1	null	null
org.clojure.runtime.PersistentTree.Node.left()	false	false	true	0	0	0	53	null	null
clojure.lang.Numbers.BigIntegerBitOps.andNot(Number,Number)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentArrayMap.add(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.max()	false	false	false	0	0	1	1	null	null
clojure.lang.Compiler.NilExpr.getJavaClass()	false	false	false	0	0	0	0	null	null
org.clojure.runtime.PersistentArray.get(int)	false	false	true	0	0	0	12	null	null
clojure.lang.PersistentTree.leftBalance(Object,Object,Node,Node)	false	false	true	0	0	0	2	null	null
clojure.lang.InstanceMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.decP(long)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.ObjExpr.constantsID()	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.add(float,double)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTree.Red.removeRight(Node)	false	false	true	0	0	0	0	null	null
clojure.asm.Frame.type(ClassWriter,String)	false	false	false	0	0	2	2	null	null
org.clojure.runtime.RT.box(long)	false	false	true	0	0	0	1	null	null
clojure.lang.Var.setExported(boolean)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.BigNum.multiply(int)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentTreeMap.Node.val()	false	false	false	0	0	50	50	null	null
clojure.lang.PersistentHashMap2.BitmapIndexedNode.assoc(int,int,Object,Object,Box)	false	false	true	0	0	0	5	null	null
clojure.lang.Numbers.DoubleArrayOps.add(Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.RT.aset(Object[],int,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.StaticMemberSymbol.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.RatioOps.multiply(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentArray.Seq.index()	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.hash(Object)	false	false	false	0	0	12	12	null	null
clojure.asm.commons.InstructionAdapter.ifacmpne(Label)	false	false	false	0	0	1	1	null	null
clojure.lang.Numbers.BigDecimalOps.opsWith(IntegerOps)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap.BitmapIndexedNode.create(int,INode[],int)	false	false	true	0	0	0	1	null	null
clojure.lang.Compiler.UntypedExpr.hasJavaClass()	false	false	false	0	0	0	0	null	null
clojure.asm.commons.InstructionAdapter.cmpl(Type)	false	false	false	0	0	2	2	null	null
clojure.asm.commons.InstructionAdapter.sub(Type)	false	false	false	0	0	4	4	null	null
clojure.lang.PersistentVector.pop()	true	false	false	1	0	0	2	[dd665dc8a62f7636c3e26dbbddd92b1089294e31]	public
clojure.lang.Ref.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object[])	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashSet.createWithCheck(ISeq)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentList.EmptyList.empty()	false	false	false	0	0	0	0	null	null
clojure.asm.ClassWriter.newInteger(int)	false	false	false	0	0	14	14	null	null
clojure.lang.PersistentHashMap2.ArrayNode.nodeSeq()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.BlackBranch.redden()	false	false	true	0	0	0	0	null	null
org.clojure.runtime.ThreadLocalData.getTransaction()	false	false	true	0	0	0	6	null	null
clojure.lang.Compiler.ObjExpr.varCallsiteName(int)	false	false	false	0	0	0	3	null	null
clojure.lang.Ref.trimHistory()	false	false	false	0	0	0	0	null	null
clojure.lang.APersistentVector.Src.invoke()	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.iinc(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.NewInstanceExpr.considerMethod(Method,Map,Map)	false	false	true	0	0	0	2	null	null
clojure.lang.PersistentHashMap2.seq()	false	false	true	0	0	0	1	null	null
org.clojure.runtime.DoubleNum.equivTo(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Keyword.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.inc(Number)	false	false	false	0	0	0	0	null	null
clojure.lang.Numbers.LongOps.add(Number,Number)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentVector.RSeq.count()	false	false	true	0	0	0	0	null	null
clojure.lang.Ref.invoke(Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.asm.commons.AnalyzerAdapter.visitIincInsn(int,int)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashMap.LeafNode.getHash()	false	false	true	0	0	0	0	null	null
clojure.lang.Compiler.convert(Object)	false	false	true	0	0	0	1	null	null
clojure.lang.EdnReader.MetaReader.invoke(Object,Object,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentTreeSet.create(Comparator,ISeq)	false	false	false	0	0	0	0	null	null
clojure.lang.Compiler.IdenticalExpr.Parser.parse(C,Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.GeneratorAdapter.loadArgs()	false	false	false	0	0	4	4	null	null
clojure.lang.ArgVector.create(List)	false	false	true	0	0	0	1	null	null
clojure.lang.PersistentTreeMap.get(Object)	false	false	true	0	0	0	0	null	null
clojure.lang.Murmur3.fmix(int,int)	false	false	false	0	0	4	4	null	null
clojure.lang.LispReader.readDelimitedList(char,PushbackReader,boolean)	true	false	false	1	3	5	5	[91b5515ecf44af1140d4d8293b8b55cd73a9336a]	public
clojure.lang.RT.uncheckedCharCast(float)	false	false	false	0	0	0	0	null	null
clojure.lang.PersistentHashSet.create(ISeq)	false	false	false	0	0	0	1	null	null
clojure.lang.Compiler.FnLoaderThunk.doInvoke(Object)	false	false	true	0	0	0	0	null	null
clojure.asm.commons.EmptyVisitor.visitLocalVariable(String,String,String,Label,Label,int)	false	false	true	0	0	0	0	null	null
org.clojure.runtime.PersistentTree.BlackVal.val()	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.not(Number)	false	false	true	0	0	0	0	null	null
clojure.lang.FixNum.truncateBy(int)	false	false	true	0	0	0	0	null	null
clojure.lang.Numbers.unchecked_add(double,Object)	false	false	false	0	0	0	0	null	null
clojure.lang.ArraySeq.ArraySeq_boolean.count()	false	false	false	0	0	0	0	null	null
clojure.lang.BytecodeCompiler.QuoteExpr.val()	false	false	true	0	0	0	0	null	null
clojure.lang.RT.listStar(Object,Object,Object,Object,ISeq)	false	false	false	0	0	1	2	null	null
clojure.lang.Numbers.IntegerBitOps.bitOpsWith(BigIntegerBitOps)	false	false	true	0	0	0	0	null	null
clojure.lang.PersistentHashMap2.NodeSeq.create(Object[],int,ISeq)	false	false	true	0	0	0	3	null	null
clojure.lang.ASeq.pop()	false	false	true	0	0	0	0	null	null
