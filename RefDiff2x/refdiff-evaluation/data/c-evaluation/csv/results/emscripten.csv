emscripten,b5313f6504c6b34f283fbd2d3a1d18561d0e9fce,MOVE_FUNCTION,"system/include/libcxx/support/win32/locale_mgmt_win32.h:newlocale(int, char, _locale_t):1102-1159","system/include/libcxx/support/win32/locale_win32.h:newlocale(int, char, locale_t):2945-3002",Update to libc++ 6.0 (#6619),0.9715924907221345
emscripten,b5313f6504c6b34f283fbd2d3a1d18561d0e9fce,RENAME_FILE,system/include/libcxx/support/win32/limits_win32.h:limits_win32.h:0-2848,system/include/libcxx/support/win32/limits_msvc_win32.h:limits_msvc_win32.h:0-2619,Update to libc++ 6.0 (#6619),0.04896876386895899
emscripten,020943397c228c001f3f629be952b2b614967813,EXTRACT,tests/core/test_float_builtins.c:main():337-617,tests/core/test_float_builtins.c:test_builtins():355-596,Add log* and exp* methods to wasm_libc_rt (#6235),0.5729782948566716
emscripten,49b70007dc9005037b9c0ae761ea8432c2d24593,CHANGE_SIGNATURE,system/include/emscripten/vr.h:emscripten_vr_deinit():3743-3765,system/include/emscripten/vr.h:emscripten_vr_deinit(void):3743-3769,vr: Add missing void for parameters of emscripten_vr_deinit,0.2456251180341269
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:__atomic_exchange_8(void, uint64_t, int):23831-23956","system/lib/pthread/library_pthread_asmjs.c:__atomic_exchange_8(void, uint64_t, int):7660-7786",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.5898467052824838
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:__atomic_store_8(void, uint64_t, int):23710-23829","system/lib/pthread/library_pthread_asmjs.c:__atomic_store_8(void, uint64_t, int):7549-7658",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.04391349047713322
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:__atomic_load_8(void, int):23614-23708","system/lib/pthread/library_pthread_asmjs.c:__atomic_load_8(void, int):7452-7547",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.2395285857830335
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:_emscripten_atomic_fetch_and_sub_u64(void, uint64_t):20612-20965","system/lib/pthread/library_pthread_asmjs.c:_emscripten_atomic_fetch_and_sub_u64(void, uint64_t):4625-4978",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.8028475684403045
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:_emscripten_atomic_fetch_and_or_u64(void, uint64_t):22260-22612","system/lib/pthread/library_pthread_asmjs.c:_emscripten_atomic_fetch_and_or_u64(void, uint64_t):6273-6625",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.5399902566966235
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:__atomic_compare_exchange_8(void, uint64_t, uint64_t, int, int, int):23958-24161","system/lib/pthread/library_pthread_asmjs.c:__atomic_compare_exchange_8(void, uint64_t, uint64_t, int, int, int):7788-7992",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.27948014591626724
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:__atomic_fetch_add_8(void, uint64_t, int):24163-24295","system/lib/pthread/library_pthread_asmjs.c:__atomic_fetch_add_8(void, uint64_t, int):7994-8127",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.6900673839375635
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,system/lib/pthread/library_pthread.c:emscripten_atomic_load_u64(void):18203-18496,system/lib/pthread/library_pthread_asmjs.c:emscripten_atomic_load_u64(void):2216-2509,Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.8798809613717796
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:emscripten_atomic_cas_u64(void, uint64_t, uint64_t):17480-17894","system/lib/pthread/library_pthread_asmjs.c:emscripten_atomic_cas_u64(void, uint64_t, uint64_t):1493-1907",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.33733255133856965
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:emscripten_atomic_exchange_u64(void, uint64_t):17099-17469","system/lib/pthread/library_pthread_asmjs.c:emscripten_atomic_exchange_u64(void, uint64_t):1112-1482",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.7976646874035056
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:emscripten_atomic_store_u64(void, uint64_t):19004-19315","system/lib/pthread/library_pthread_asmjs.c:emscripten_atomic_store_u64(void, uint64_t):3017-3328",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.2614459595394967
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:emscripten_atomic_add_u64(void, uint64_t):19326-19671","system/lib/pthread/library_pthread_asmjs.c:emscripten_atomic_add_u64(void, uint64_t):3339-3684",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.25881605216268644
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:emscripten_atomic_or_u64(void, uint64_t):21801-22145","system/lib/pthread/library_pthread_asmjs.c:emscripten_atomic_or_u64(void, uint64_t):5814-6158",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.9322084101599022
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:_emscripten_atomic_fetch_and_and_u64(void, uint64_t):21437-21790","system/lib/pthread/library_pthread_asmjs.c:_emscripten_atomic_fetch_and_and_u64(void, uint64_t):5450-5803",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.19202555454943004
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:__atomic_fetch_or_8(void, uint64_t, int):24565-24695","system/lib/pthread/library_pthread_asmjs.c:__atomic_fetch_or_8(void, uint64_t, int):8399-8530",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.1479082065035302
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:__atomic_fetch_xor_8(void, uint64_t, int):24697-24829","system/lib/pthread/library_pthread_asmjs.c:__atomic_fetch_xor_8(void, uint64_t, int):8532-8665",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.7257242715306403
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:_emscripten_atomic_fetch_and_xor_u64(void, uint64_t):23084-23437","system/lib/pthread/library_pthread_asmjs.c:_emscripten_atomic_fetch_and_xor_u64(void, uint64_t):7097-7450",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.4203418589592882
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:__atomic_fetch_and_8(void, uint64_t, int):24431-24563","system/lib/pthread/library_pthread_asmjs.c:__atomic_fetch_and_8(void, uint64_t, int):8264-8397",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.9149629935420694
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:_emscripten_atomic_fetch_and_add_u64(void, uint64_t):19787-20140","system/lib/pthread/library_pthread_asmjs.c:_emscripten_atomic_fetch_and_add_u64(void, uint64_t):3800-4153",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.988133388103467
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:emscripten_atomic_xor_u64(void, uint64_t):22623-22968","system/lib/pthread/library_pthread_asmjs.c:emscripten_atomic_xor_u64(void, uint64_t):6636-6981",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.7273217038366183
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:emscripten_atomic_and_u64(void, uint64_t):20976-21321","system/lib/pthread/library_pthread_asmjs.c:emscripten_atomic_and_u64(void, uint64_t):4989-5334",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.7403402412768854
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:emscripten_atomic_sub_u64(void, uint64_t):20151-20496","system/lib/pthread/library_pthread_asmjs.c:emscripten_atomic_sub_u64(void, uint64_t):4164-4509",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.2868886195373571
emscripten,2a57fd9b2d9d1ecbcf671c0e6439b93e0192d74e,MOVE_FUNCTION,"system/lib/pthread/library_pthread.c:__atomic_fetch_sub_8(void, uint64_t, int):24297-24429","system/lib/pthread/library_pthread_asmjs.c:__atomic_fetch_sub_8(void, uint64_t, int):8129-8262",Improve C++11 atomics to directly route to wasm opcodes rather than go through an asm.js emulation function. Improve C++11 64-bit atomics test and split out asm.js atomics to a separate file that's not built in Wasm mode.,0.9891071278482215
